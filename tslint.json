{
  "defaultSeverity": "warn",
  "rules":
  {
    "member-access": true,
    "member-ordering": [true, { "order": "fields-first" }],
    "no-any": true,
    "no-internal-module": true,
    "no-namespace": [true, "allow-declarations"],
    // currently using references for libraries. might be dumb?
    // "no-reference": true,
    "no-var-requires": true,
    "only-arrow-functions": [true, "allow-declarations"],
    "curly": [true],
    "label-position": true,
    "no-arg": true,
    "no-bitwise": true,
    "no-conditional-assignment": true,
    "no-construct": true,
    "no-eval": true,
    "no-invalid-this": true,
    "no-shadowed-variable": true,
    "no-unsafe-finally": true,
    "no-unused-expression": true,
    "no-var-keyword": true,
    "triple-equals": true,
    "use-isnan": true,

    // should enable this later. isn't there a way to automatically fix these?
    // "no-default-export": true,
    "no-mergeable-namespace": true,
    "no-require-imports": true,

    "class-name": true,
    "comment-format": [true, "check-space"],
    "interface-name": [true, "never-prefix"],
    "jsdoc-format": true,
    "object-literal-key-quotes": [true, "as-needed"],
    "one-variable-per-declaration": [true],
    "ordered-imports":
    [
      true,
      {
      "import-sources-order": "lowercase-last",
      "named-imports-order": "case-insensitive",
      "grouped-imports": true
    }],
    "variable-name": [true, "ban-keywords", "check-format", "allow-leading-underscore"],

    "prefer-const": true,
    // too strict. means we can't do stuff like randInt(2, 5)
    // "no-magic-numbers": true,
    "no-string-throw": true,
    "callable-types": true,

    "unified-signatures": true,
    // complains about () => {return {}}; which is annoying
    "arrow-return-shorthand": [true],
    "no-unnecessary-initializer": true,
    "no-misused-new": true,
    "prefer-function-over-method": {"severity": "warn", "options": [true]},

    "no-import-side-effect": true,
    "no-duplicate-super": true,
    "newline-before-return": true,
    "ban-types":
    [
      true,
      ["Object", "Avoid using the `Object` type. Did you mean `object`?"],
      ["Function", "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."],
      ["Boolean", "Avoid using the `Boolean` type. Did you mean `boolean`?"],
      ["Number", "Avoid using the `Number` type. Did you mean `number`?"],
      ["String", "Avoid using the `String` type. Did you mean `string`?"],
      ["Symbol", "Avoid using the `Symbol` type. Did you mean `symbol`?"]
    ],

    "no-reference-import": true,
    // doesn't actually work
    // https://github.com/palantir/tslint/issues/2430
    // "no-unnecessary-callback-wrapper": true,

    "no-invalid-template-strings": true,
    "no-sparse-arrays": true,

    "prefer-switch": true,

    "prefer-object-spread": true,
    "encoding": true,

    "no-this-assignment": true,

    "no-duplicate-imports": true,
    "no-submodule-imports": true,

    "no-parameter-reassignment": true,

    "no-return-await": true,
    "no-duplicate-switch-case": true,
    "no-unnecessary-class": true,
    "ban-comma-operator": true,
    "object-literal-shorthand": [true, "never"],

    "no-dynamic-delete": true,

    "prefer-while": true
  }
}

// requires typechecking
// "promise-function-async": true,
// "no-inferred-empty-object-type": true,
// "no-void-expression": true,
// "no-unbound-method": true,
// "no-unsafe-any": true,
// "no-unnecessary-qualifier": true,
// "await-promise": true,
// "no-floating-promises": true,
// "strict-type-predicates": true,
// "no-use-before-declare": true,
// "return-undefined": true,

// "no-unnecessary-type-assertion": true,

// "use-default-type-parameter": true,

// "prefer-readonly": true,
// "no-for-in-array": true,
// "no-boolean-literal-compare": true,

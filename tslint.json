{
  "defaultSeverity": "off",
  "rules":
  {
    "member-access": true,
    "member-ordering": [true, { "order": "fields-first" }],
    // should allow this after fixing existing lazy use cases.
    // anything handling generics probably wants to use 'any'
    "no-any": true,
    "no-internal-module": true,
    "no-namespace": [true, "allow-declarations"],
    // currently using references for libraries. might be dumb?
    // "no-reference": true,
    "no-var-requires": true,
    "only-arrow-functions": [true, "allow-declarations"],
    // not sure if this is needed. requires def for string literals etc.
    // "typedef": [true, "call-signature", "parameter", "member-variable-declaration"],
    // tslint doesn't currently recognize newlines which we use after declaration
    // https://github.com/palantir/tslint/pull/1531
    // "typedef-whitespace":
    // [
    //   true,
    //   {
    //     "call-signature": "nospace",
    //     "index-signature": "nospace",
    //     "parameter": "nospace",
    //     "property-declaration": "nospace",
    //     "variable-declaration": "nospace"
    //   },
    //   {
    //     "call-signature": "onespace",
    //     "index-signature": "onespace",
    //     "parameter": "onespace",
    //     "property-declaration": "onespace",
    //     "variable-declaration": "onespace"
    //   }
    // ]

    "curly": [true, "as-needed"],
    "label-position": true,
    "no-arg": true,
    "no-bitwise": true,
    "no-conditional-assignment": true,
    "no-construct": true,
    "no-eval": true,
    // https://github.com/palantir/tslint/issues/1445
    // "no-for-in-array": true,
    "no-invalid-this": true,
    "no-shadowed-variable": true,
    "no-string-literal": true,
    "no-unsafe-finally": true,
    "no-unused-expression": true,
    "no-var-keyword": true,
    "triple-equals": true,
    "use-isnan": true,

    "eofline": true,
    // should enable this later. isn't there a way to automatically fix these?
    // "no-default-export": true,
    "no-mergeable-namespace": true,
    "no-require-imports": true,
    "no-trailing-whitespace": true,
    "trailing-comma": [true, {"multiline": "always", "singleline": "never"}],

    "align": [true, "parameters", "statements"],
    "arrow-parens": [true, "ban-single-arg-parens"],
    "class-name": true,
    "comment-format": [true, "check-space"],
    "interface-name": [true, "never-prefix"],
    "jsdoc-format": true,
    "new-parens": true,
    "object-literal-key-quotes": [true, "as-needed"],
    "one-variable-per-declaration": [true],
    "ordered-imports": [true, {"import-sources-order": "lowercase-last", "named-imports-order": "case-insensitive"}],
    "quotemark": [true, "double", "avoid-escape", "avoid-template"],
    "semicolon": [true, "always"],
    "variable-name": [true, "ban-keywords", "check-format", "allow-leading-underscore"],

    // lots of problems. for (let i = 0, n = a.length) etc...
    // "prefer-const": true,
    // might be good for later
    // "strict-boolean-expressions": ,
    // too strict. means we can't do stuff like randInt(2, 5)
    // "no-magic-numbers": true,
    // probably not
    // "import-blacklist": ,
    "no-string-throw": true,
    // having empty interfaces for stuff like react component state can be cleaner
    // "no-empty-interface": true,
    "callable-types": true,

    "space-before-function-paren": [true, "never"],
    // we use newlines
    // "import-spacing": true,
    "unified-signatures": true,
    "arrow-return-shorthand": [true],
    // maybe later
    // "no-boolean-literal-compare": ,
    "no-unnecessary-initializer": true,
    "no-misused-new": true,
    // maybe later
    // "prefer-method-signature": ,
    // whines about abstract methods etc.
    // "prefer-function-over-method": true,


    "no-import-side-effect": true,
    "no-duplicate-super": true,
    "newline-before-return": true,
    "ban-types": [
      true,
      ["Object", "Avoid using the `Object` type. Did you mean `object`?"],
      ["Function", "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."],
      ["Boolean", "Avoid using the `Boolean` type. Did you mean `boolean`?"],
      ["Number", "Avoid using the `Number` type. Did you mean `number`?"],
      ["String", "Avoid using the `String` type. Did you mean `string`?"],
      ["Symbol", "Avoid using the `Symbol` type. Did you mean `symbol`?"]
    ],

    "no-reference-import": true,
    // doesn't actually work
    // https://github.com/palantir/tslint/issues/2430
    // "no-unnecessary-callback-wrapper": true,

    "no-invalid-template-strings": true,
    "no-sparse-arrays rule" : true,

    "no-irregular-whitespace": true,
    "prefer-switch": true,

    "prefer-object-spread": true,
    "encoding": true,

    "no-this-assignment": true,

    "no-duplicate-imports": true,
    "no-submodule-imports": true,

    "no-parameter-reassignment": true,
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      // "check-module",
      "check-separator",
      "check-rest-spread",
      "check-type",
      "check-typecast",
      "check-type-operator",
      "check-preblock"
    ]
  }
}

// requires typechecking
// "promise-function-async": true,
// "no-inferred-empty-object-type": true,
// "no-void-expression": true,
// "no-unbound-method": true,
// "no-unsafe-any": true,
// "no-unnecessary-qualifier": true,
// "await-promise": true,
// "no-floating-promises": true,
// "strict-type-predicates": true,
// "no-use-before-declare": true,
// "return-undefined": true,

// "no-unnecessary-type-assertion": true,

// "use-default-type-parameter": true

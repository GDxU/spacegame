var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define("src/Point", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/idGenerators", ["require", "exports"], function (require, exports) {
    "use strict";
    var IDGenerator = (function () {
        function IDGenerator() {
            this.fleet = 0;
            this.item = 0;
            this.player = 0;
            this.star = 0;
            this.unit = 0;
            this.building = 0;
            this.objective = 0;
        }
        IDGenerator.prototype.setValues = function (newValues) {
            for (var key in newValues) {
                this[key] = newValues[key];
            }
        };
        return IDGenerator;
    }());
    var idGenerators = new IDGenerator();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = idGenerators;
});
define("src/RandomGenUnitRarity", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/priorityqueue", ["require", "exports"], function (require, exports) {
    "use strict";
    var PriorityQueue = (function () {
        function PriorityQueue() {
            this.items = {};
        }
        PriorityQueue.prototype.isEmpty = function () {
            if (Object.keys(this.items).length > 0)
                return false;
            else
                return true;
        };
        PriorityQueue.prototype.push = function (priority, data) {
            if (!this.items[priority]) {
                this.items[priority] = [];
            }
            this.items[priority].push(data);
        };
        PriorityQueue.prototype.pop = function () {
            var highestPriority = Math.min.apply(null, Object.keys(this.items));
            var toReturn = this.items[highestPriority].pop();
            if (this.items[highestPriority].length < 1) {
                delete this.items[highestPriority];
            }
            return toReturn;
        };
        PriorityQueue.prototype.peek = function () {
            var highestPriority = Math.min.apply(null, Object.keys(this.items));
            var toReturn = this.items[highestPriority][0];
            return [highestPriority, toReturn.mapPosition[1], toReturn.mapPosition[2]];
        };
        return PriorityQueue;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = PriorityQueue;
});
define("src/pathfinding", ["require", "exports", "src/priorityqueue"], function (require, exports, PriorityQueue_1) {
    "use strict";
    function backTrace(graph, target) {
        var parent = graph[target.id];
        if (!parent)
            return [];
        var path = [
            {
                star: target,
                cost: parent.cost
            }
        ];
        while (parent) {
            path.push({
                star: parent.star,
                cost: parent.cost
            });
            parent = graph[parent.star.id];
        }
        path.reverse();
        path[0].cost = null;
        return path;
    }
    exports.backTrace = backTrace;
    function aStar(start, target) {
        var frontier = new PriorityQueue_1.default();
        frontier.push(0, start);
        var cameFrom = {};
        var costSoFar = {};
        cameFrom[start.id] = null;
        costSoFar[start.id] = 0;
        while (!frontier.isEmpty()) {
            var current = frontier.pop();
            if (current === target)
                return { came: cameFrom, cost: costSoFar, queue: frontier };
            var neighbors = current.getAllLinks();
            for (var i = 0; i < neighbors.length; i++) {
                var neigh = neighbors[i];
                if (!neigh)
                    continue;
                var moveCost = 1;
                var newCost = costSoFar[current.id] + moveCost;
                if (costSoFar[neigh.id] === undefined || newCost < costSoFar[neigh.id]) {
                    costSoFar[neigh.id] = newCost;
                    var dx = Math.abs(neigh.id[1] - target.id[1]);
                    var dy = Math.abs(neigh.id[2] - target.id[2]);
                    var priority = newCost;
                    frontier.push(priority, neigh);
                    cameFrom[neigh.id] =
                        {
                            star: current,
                            cost: moveCost
                        };
                }
            }
        }
        return null;
    }
    exports.aStar = aStar;
});
define("src/UnitBattleSide", ["require", "exports"], function (require, exports) {
    "use strict";
    exports.UnitBattleSides = ["side1", "side2"];
});
define("src/GuardCoverage", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/StatusEffect", ["require", "exports"], function (require, exports) {
    "use strict";
    var StatusEffect = (function () {
        function StatusEffect(template, duration) {
            this.template = template;
            this.duration = duration;
        }
        StatusEffect.prototype.processTurnEnd = function () {
            if (this.duration > 0) {
                this.duration--;
            }
        };
        StatusEffect.prototype.clone = function () {
            return new StatusEffect(this.template, this.duration);
        };
        return StatusEffect;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = StatusEffect;
});
define("src/eventManager", ["require", "exports"], function (require, exports) {
    "use strict";
    var eventEmitter = new EventEmitter3();
    var eventManager = {
        dispatchEvent: eventEmitter.emit.bind(eventEmitter),
        removeEventListener: eventEmitter.removeListener.bind(eventEmitter),
        removeAllListeners: eventEmitter.removeAllListeners.bind(eventEmitter),
        addEventListener: function (eventType, listener) {
            eventEmitter.on(eventType, listener);
            return listener;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = eventManager;
});
define("src/Fleet", ["require", "exports", "src/idGenerators", "src/App", "src/eventManager", "src/pathfinding"], function (require, exports, idGenerators_1, App_1, eventManager_1, pathFinding_1) {
    "use strict";
    var Fleet = (function () {
        function Fleet(player, units, location, id, shouldRender) {
            if (shouldRender === void 0) { shouldRender = true; }
            this.units = [];
            this.visionIsDirty = true;
            this.visibleStars = [];
            this.detectedStars = [];
            this.player = player;
            this.location = location;
            this.id = isFinite(id) ? id : idGenerators_1.default.fleet++;
            this.name = "Fleet " + this.id;
            this.location.addFleet(this);
            this.player.addFleet(this);
            this.addUnits(units);
            if (shouldRender) {
                eventManager_1.default.dispatchEvent("renderLayer", "fleets", this.location);
            }
        }
        Fleet.prototype.getUnitIndex = function (unit) {
            return this.units.indexOf(unit);
        };
        Fleet.prototype.hasUnit = function (unit) {
            return this.getUnitIndex(unit) >= 0;
        };
        Fleet.prototype.deleteFleet = function (shouldRender) {
            if (shouldRender === void 0) { shouldRender = true; }
            this.location.removeFleet(this);
            this.player.removeFleet(this);
            if (shouldRender) {
                eventManager_1.default.dispatchEvent("renderLayer", "fleets", this.location);
            }
        };
        Fleet.prototype.mergeWith = function (fleet, shouldRender) {
            if (shouldRender === void 0) { shouldRender = true; }
            if (fleet.isStealthy !== this.isStealthy) {
                console.warn("Tried to merge stealthy fleet with non stealthy or other way around");
                return;
            }
            fleet.addUnits(this.units);
            this.deleteFleet(shouldRender);
        };
        Fleet.prototype.addUnit = function (unit) {
            if (this.hasUnit(unit))
                return false;
            if (this.units.length === 0) {
                this.isStealthy = unit.isStealthy();
            }
            else if (unit.isStealthy() !== this.isStealthy) {
                console.warn("Tried to add stealthy unit to non stealthy fleet or other way around");
                return;
            }
            this.units.push(unit);
            unit.addToFleet(this);
            this.visionIsDirty = true;
        };
        Fleet.prototype.addUnits = function (units) {
            for (var i = 0; i < units.length; i++) {
                this.addUnit(units[i]);
            }
        };
        Fleet.prototype.removeUnit = function (unit) {
            var index = this.getUnitIndex(unit);
            if (index < 0)
                return false;
            this.units.splice(index, 1);
            unit.removeFromFleet();
            this.visionIsDirty = true;
            if (this.units.length <= 0) {
                this.deleteFleet();
            }
        };
        Fleet.prototype.removeUnits = function (units) {
            for (var i = 0; i < units.length; i++) {
                this.removeUnit(units[i]);
            }
        };
        Fleet.prototype.transferUnit = function (fleet, unit) {
            if (fleet === this)
                return;
            if (unit.isStealthy() !== this.isStealthy) {
                console.warn("Tried to transfer stealthy unit to non stealthy fleet");
                return;
            }
            var index = this.getUnitIndex(unit);
            if (index < 0)
                return false;
            fleet.addUnit(unit);
            this.units.splice(index, 1);
            eventManager_1.default.dispatchEvent("renderLayer", "fleets", this.location);
        };
        Fleet.prototype.split = function () {
            var newFleet = new Fleet(this.player, [], this.location);
            this.location.addFleet(newFleet);
            return newFleet;
        };
        Fleet.prototype.splitStealthyUnits = function () {
            var stealthyUnits = this.units.filter(function (unit) {
                return unit.isStealthy();
            });
            var newFleet = new Fleet(this.player, stealthyUnits, this.location);
            this.location.addFleet(newFleet);
            this.removeUnits(stealthyUnits);
            return newFleet;
        };
        Fleet.prototype.getMinCurrentMovePoints = function () {
            if (!this.units[0])
                return 0;
            var min = this.units[0].currentMovePoints;
            for (var i = 0; i < this.units.length; i++) {
                min = Math.min(this.units[i].currentMovePoints, min);
            }
            return min;
        };
        Fleet.prototype.getMinMaxMovePoints = function () {
            if (!this.units[0])
                return 0;
            var min = this.units[0].maxMovePoints;
            for (var i = 0; i < this.units.length; i++) {
                min = Math.min(this.units[i].maxMovePoints, min);
            }
            return min;
        };
        Fleet.prototype.canMove = function () {
            for (var i = 0; i < this.units.length; i++) {
                if (this.units[i].currentMovePoints <= 0) {
                    return false;
                }
            }
            if (this.getMinCurrentMovePoints() > 0) {
                return true;
            }
            return false;
        };
        Fleet.prototype.subtractMovePoints = function () {
            for (var i = 0; i < this.units.length; i++) {
                this.units[i].currentMovePoints--;
            }
        };
        Fleet.prototype.move = function (newLocation) {
            if (newLocation === this.location)
                return;
            if (!this.canMove())
                return;
            var oldLocation = this.location;
            oldLocation.removeFleet(this);
            this.location = newLocation;
            newLocation.addFleet(this);
            this.subtractMovePoints();
            this.visionIsDirty = true;
            this.player.visionIsDirty = true;
            for (var i = 0; i < App_1.default.game.playerOrder.length; i++) {
                var player = App_1.default.game.playerOrder[i];
                if (player.isIndependent || player === this.player) {
                    continue;
                }
                player.updateAllVisibilityInStar(newLocation);
            }
            eventManager_1.default.dispatchEvent("renderLayer", "fleets", this.location);
            eventManager_1.default.dispatchEvent("updateSelection", null);
        };
        Fleet.prototype.getPathTo = function (newLocation) {
            var a = pathFinding_1.aStar(this.location, newLocation);
            if (!a)
                return;
            var path = pathFinding_1.backTrace(a.came, newLocation);
            return path;
        };
        Fleet.prototype.pathFind = function (newLocation, onMove, afterMove) {
            var path = this.getPathTo(newLocation);
            var interval = window.setInterval(function () {
                if (!path || path.length <= 0) {
                    window.clearInterval(interval);
                    if (afterMove)
                        afterMove();
                    return;
                }
                var move = path.shift();
                this.move(move.star);
                if (onMove)
                    onMove();
            }.bind(this), 10);
        };
        Fleet.prototype.getFriendlyFleetsAtOwnLocation = function () {
            return this.location.fleets[this.player.id];
        };
        Fleet.prototype.getTotalStrengthEvaluation = function () {
            var total = 0;
            for (var i = 0; i < this.units.length; i++) {
                total += this.units[i].getStrengthEvaluation();
            }
            return total;
        };
        Fleet.prototype.getTotalHealth = function () {
            var total = {
                current: 0,
                max: 0
            };
            for (var i = 0; i < this.units.length; i++) {
                total.current += this.units[i].currentHealth;
                total.max += this.units[i].maxHealth;
            }
            return total;
        };
        Fleet.prototype.updateVisibleStars = function () {
            var highestVisionRange = 0;
            var highestDetectionRange = -1;
            for (var i = 0; i < this.units.length; i++) {
                highestVisionRange = Math.max(this.units[i].getVisionRange(), highestVisionRange);
                highestDetectionRange = Math.max(this.units[i].getDetectionRange(), highestDetectionRange);
            }
            var inVision = this.location.getLinkedInRange(highestVisionRange);
            var inDetection = this.location.getLinkedInRange(highestDetectionRange);
            this.visibleStars = inVision.all;
            this.detectedStars = inDetection.all;
            this.visionIsDirty = false;
        };
        Fleet.prototype.getVision = function () {
            if (this.visionIsDirty) {
                this.updateVisibleStars();
            }
            return this.visibleStars;
        };
        Fleet.prototype.getDetection = function () {
            if (this.visionIsDirty) {
                this.updateVisibleStars();
            }
            return this.detectedStars;
        };
        Fleet.prototype.serialize = function () {
            var data = {
                id: this.id,
                name: this.name,
                locationId: this.location.id,
                playerId: this.player.id,
                units: this.units.map(function (unit) {
                    return unit.serialize(false);
                })
            };
            return data;
        };
        return Fleet;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Fleet;
});
define("src/utility", ["require", "exports", "src/App"], function (require, exports, App_2) {
    "use strict";
    function randInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    exports.randInt = randInt;
    function randRange(min, max) {
        return Math.random() * (max - min) + min;
    }
    exports.randRange = randRange;
    function getRandomArrayKey(target) {
        return Math.floor(Math.random() * (target.length));
    }
    exports.getRandomArrayKey = getRandomArrayKey;
    function getRandomArrayItem(target) {
        var _rnd = Math.floor(Math.random() * (target.length));
        return target[_rnd];
    }
    exports.getRandomArrayItem = getRandomArrayItem;
    function getSeededRandomArrayItem(array, rng) {
        var _rnd = Math.floor(rng.uniform() * array.length);
        return array[_rnd];
    }
    exports.getSeededRandomArrayItem = getSeededRandomArrayItem;
    function getRandomKey(target) {
        var _targetKeys = Object.keys(target);
        var _rnd = Math.floor(Math.random() * (_targetKeys.length));
        return _targetKeys[_rnd];
    }
    exports.getRandomKey = getRandomKey;
    function getObjectKeysSortedByValue(obj, order) {
        return Object.keys(obj).sort(function (a, b) {
            if (order === "asc") {
                return obj[a] - obj[b];
            }
            else
                return obj[b] - obj[a];
        });
    }
    exports.getObjectKeysSortedByValue = getObjectKeysSortedByValue;
    function getObjectKeysSortedByValueOfProp(obj, prop, order) {
        return Object.keys(obj).sort(function (a, b) {
            if (order === "asc") {
                return obj[a][prop] - obj[b][prop];
            }
            else
                return obj[b][prop] - obj[a][prop];
        });
    }
    exports.getObjectKeysSortedByValueOfProp = getObjectKeysSortedByValueOfProp;
    function sortObjectsByProperty(objects, prop, order) {
        return objects.sort(function (a, b) {
            if (order === "asc") {
                return a[prop] - b[prop];
            }
            else
                return b[prop] - a[prop];
        });
    }
    exports.sortObjectsByProperty = sortObjectsByProperty;
    function getRandomProperty(target) {
        var _rndProp = target[getRandomKey(target)];
        return _rndProp;
    }
    exports.getRandomProperty = getRandomProperty;
    function getAllPropertiesWithKey(target, keyToFind) {
        var matchingProperties = [];
        for (var key in target) {
            if (target[key][keyToFind]) {
                matchingProperties.push(target[key]);
            }
        }
        return matchingProperties;
    }
    exports.getAllPropertiesWithKey = getAllPropertiesWithKey;
    function getRandomPropertyWithKey(target, keyToFind) {
        var keys = Object.keys(target);
        while (keys.length > 0) {
            var key = getRandomArrayItem(keys);
            var prop = target[key];
            if (prop[keyToFind]) {
                return prop;
            }
            else {
                keys.splice(keys.indexOf(key), 1);
            }
        }
        return null;
    }
    exports.getRandomPropertyWithKey = getRandomPropertyWithKey;
    function getRandomKeyWithWeights(target) {
        var totalWeight = 0;
        for (var prop in target) {
            totalWeight += target[prop];
        }
        var selection = randRange(0, totalWeight);
        for (var prop in target) {
            selection -= target[prop];
            if (selection <= 0) {
                return prop;
            }
        }
    }
    exports.getRandomKeyWithWeights = getRandomKeyWithWeights;
    function getRandomArrayItemWithWeights(arr) {
        var totalWeight = 0;
        for (var i = 0; i < arr.length; i++) {
            totalWeight += arr[i].weight;
        }
        var selection = randRange(0, totalWeight);
        for (var i = 0; i < arr.length; i++) {
            selection -= arr[i].weight;
            if (selection <= 0) {
                return arr[i];
            }
        }
    }
    exports.getRandomArrayItemWithWeights = getRandomArrayItemWithWeights;
    function findItemWithKey(source, keyToFind, parentKey, hasParentKey) {
        if (hasParentKey === void 0) { hasParentKey = false; }
        var hasParentKey = hasParentKey;
        if (source[keyToFind]) {
            if (!parentKey || hasParentKey) {
                return source[keyToFind];
            }
        }
        ;
        for (var key in source) {
            if (key === parentKey) {
                hasParentKey = true;
            }
            if (source[key][keyToFind]) {
                if (!parentKey || hasParentKey) {
                    return source[key][keyToFind];
                }
            }
            else if (typeof source[key] === "object") {
                return findItemWithKey(source[key], keyToFind, parentKey, hasParentKey);
            }
        }
        return null;
    }
    exports.findItemWithKey = findItemWithKey;
    function getFrom2dArray(target, arr) {
        var result = [];
        for (var i = 0; i < arr.length; i++) {
            if ((arr[i] !== undefined) &&
                (arr[i][0] >= 0 && arr[i][0] < target.length) &&
                (arr[i][1] >= 0 && arr[i][1] < target[0].length)) {
                result.push(target[arr[i][0]][arr[i][1]]);
            }
            else {
                result.push(null);
            }
        }
        ;
        return result;
    }
    exports.getFrom2dArray = getFrom2dArray;
    function flatten2dArray(toFlatten) {
        var flattened = [];
        for (var i = 0; i < toFlatten.length; i++) {
            for (var j = 0; j < toFlatten[i].length; j++) {
                flattened.push(toFlatten[i][j]);
            }
        }
        return flattened;
    }
    exports.flatten2dArray = flatten2dArray;
    function reverseSide(side) {
        switch (side) {
            case "side1":
                {
                    return "side2";
                }
            case "side2":
                {
                    return "side1";
                }
            default:
                {
                    throw new Error("Invalid side");
                }
        }
    }
    exports.reverseSide = reverseSide;
    function sortByManufactoryCapacityFN(a, b) {
        var aLevel = (a.manufactory ? a.manufactory.capacity : -1);
        var bLevel = (b.manufactory ? b.manufactory.capacity : -1);
        if (bLevel !== aLevel) {
            return bLevel - aLevel;
        }
        var _a = a.name.toLowerCase();
        var _b = b.name.toLowerCase();
        if (_a > _b)
            return 1;
        else if (_a < _b)
            return -1;
        else
            return 0;
    }
    exports.sortByManufactoryCapacityFN = sortByManufactoryCapacityFN;
    function rectContains(rect, point) {
        var x = point.x;
        var y = point.y;
        var x1 = Math.min(rect.x1, rect.x2);
        var x2 = Math.max(rect.x1, rect.x2);
        var y1 = Math.min(rect.y1, rect.y2);
        var y2 = Math.max(rect.y1, rect.y2);
        return ((x >= x1 && x <= x2) &&
            (y >= y1 && y <= y2));
    }
    exports.rectContains = rectContains;
    function hexToString(hex) {
        hex = Math.round(hex);
        var converted = hex.toString(16);
        return '000000'.substr(0, 6 - converted.length) + converted;
    }
    exports.hexToString = hexToString;
    function stringToHex(text) {
        if (text.charAt(0) === "#") {
            text = text.substring(1, 7);
        }
        return parseInt(text, 16);
    }
    exports.stringToHex = stringToHex;
    function colorImageInPlayerColor(image, player) {
        var canvas = document.createElement("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(image, 0, 0, image.width, image.height);
        ctx.globalCompositeOperation = "source-in";
        ctx.fillStyle = "#" + player.color.getHexString();
        ctx.fillRect(0, 0, image.width, image.height);
        return canvas.toDataURL();
    }
    exports.colorImageInPlayerColor = colorImageInPlayerColor;
    function extendObject(from, to, onlyExtendAlreadyPresent) {
        if (onlyExtendAlreadyPresent === void 0) { onlyExtendAlreadyPresent = false; }
        if (from == null || typeof from != "object")
            return from;
        if (from.constructor != Object && from.constructor != Array)
            return from;
        if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function ||
            from.constructor == String || from.constructor == Number || from.constructor == Boolean)
            return new from.constructor(from);
        to = to || new from.constructor();
        var toIterateOver = onlyExtendAlreadyPresent ? to : from;
        for (var name_1 in toIterateOver) {
            if (!onlyExtendAlreadyPresent || from.hasOwnProperty(name_1)) {
                to[name_1] = extendObject(from[name_1], null);
            }
        }
        return to;
    }
    exports.extendObject = extendObject;
    function shallowCopy(toCopy) {
        var cloned = {};
        for (var key in toCopy) {
            cloned[key] = toCopy[key];
        }
        return cloned;
    }
    exports.shallowCopy = shallowCopy;
    function deepMerge(target, src, excludeKeysNotInTarget) {
        if (excludeKeysNotInTarget === void 0) { excludeKeysNotInTarget = false; }
        if (excludeKeysNotInTarget) {
            var merged = deepMerge(target, src, false);
            return deletePropertiesNotSharedWithTarget(merged, target);
        }
        var array = Array.isArray(src);
        var dst = array && [] || {};
        if (array) {
            target = target || [];
            dst = dst.concat(target);
            src.forEach(function (e, i) {
                if (typeof dst[i] === 'undefined') {
                    dst[i] = e;
                }
                else if (typeof e === 'object') {
                    dst[i] = deepMerge(target[i], e);
                }
                else {
                    if (target.indexOf(e) === -1) {
                        dst.push(e);
                    }
                }
            });
        }
        else {
            if (target && typeof target === 'object') {
                Object.keys(target).forEach(function (key) {
                    dst[key] = target[key];
                });
            }
            Object.keys(src).forEach(function (key) {
                if (typeof src[key] !== 'object' || !src[key]) {
                    dst[key] = src[key];
                }
                else {
                    if (!target[key]) {
                        dst[key] = src[key];
                    }
                    else {
                        dst[key] = deepMerge(target[key], src[key]);
                    }
                }
            });
        }
        return dst;
    }
    exports.deepMerge = deepMerge;
    function deletePropertiesNotSharedWithTarget(source, target) {
        var dst = {};
        for (var key in target) {
            if (typeof target[key] !== "object" || !target[key]) {
                dst[key] = source[key];
            }
            else {
                dst[key] = deletePropertiesNotSharedWithTarget(source[key], target[key]);
            }
        }
        return dst;
    }
    exports.deletePropertiesNotSharedWithTarget = deletePropertiesNotSharedWithTarget;
    function recursiveRemoveAttribute(parent, attribute) {
        parent.removeAttribute(attribute);
        for (var i = 0; i < parent.children.length; i++) {
            var child = parent.children[i];
            recursiveRemoveAttribute(child, attribute);
        }
    }
    exports.recursiveRemoveAttribute = recursiveRemoveAttribute;
    function clamp(value, min, max) {
        if (value < min)
            return min;
        else if (value > max)
            return max;
        else
            return value;
    }
    exports.clamp = clamp;
    function roundToNearestMultiple(value, multiple) {
        var resto = value % multiple;
        if (resto <= (multiple / 2)) {
            return value - resto;
        }
        else {
            return value + multiple - resto;
        }
    }
    exports.roundToNearestMultiple = roundToNearestMultiple;
    function getAngleBetweenDegrees(degA, degB) {
        var angle = Math.abs(degB - degA) % 360;
        var distance = Math.min(360 - angle, angle);
        return distance;
    }
    exports.getAngleBetweenDegrees = getAngleBetweenDegrees;
    function prettifyDate(date) {
        return ([
            [
                date.getDate(),
                date.getMonth() + 1,
                date.getFullYear().toString().slice(2, 4)
            ].join("/"),
            [
                date.getHours(),
                date.getMinutes().toString().length < 2 ? "0" + date.getMinutes() : date.getMinutes().toString()
            ].join(":")
        ].join(" "));
    }
    exports.prettifyDate = prettifyDate;
    function getMatchingLocalstorageItemsByDate(stringToMatch) {
        var allKeys = Object.keys(localStorage);
        var matchingItems = [];
        for (var i = 0; i < allKeys.length; i++) {
            if (allKeys[i].indexOf(stringToMatch) !== -1) {
                var item = localStorage.getItem(allKeys[i]);
                var parsed = JSON.parse(item);
                if (parsed.date) {
                    matchingItems.push(parsed);
                }
            }
        }
        matchingItems.sort(function (a, b) {
            return Date.parse(b.date) - Date.parse(a.date);
        });
        return matchingItems;
    }
    exports.getMatchingLocalstorageItemsByDate = getMatchingLocalstorageItemsByDate;
    function shuffleArray(toShuffle, seed) {
        var rng = new RNG(seed);
        var resultArray = toShuffle.slice(0);
        var i = resultArray.length;
        while (i > 0) {
            i--;
            var n = rng.random(0, i);
            var temp = resultArray[i];
            resultArray[i] = resultArray[n];
            resultArray[n] = temp;
        }
        return resultArray;
    }
    exports.shuffleArray = shuffleArray;
    function getRelativeValue(value, min, max, inverse) {
        if (inverse === void 0) { inverse = false; }
        if (inverse) {
            if (min === max)
                return 0;
            else {
                return 1 - ((value - min) / (max - min));
            }
        }
        else {
            if (min === max)
                return 1;
            else {
                return (value - min) / (max - min);
            }
        }
    }
    exports.getRelativeValue = getRelativeValue;
    function getRelativeWeightsFromObject(byCount, inverse) {
        var relativeWeights = {};
        var min = 0;
        var max;
        for (var prop in byCount) {
            var count = byCount[prop];
            max = isFinite(max) ? Math.max(max, count) : count;
        }
        for (var prop in byCount) {
            var count = byCount[prop];
            relativeWeights[prop] = getRelativeValue(count, min, max);
        }
        return relativeWeights;
    }
    exports.getRelativeWeightsFromObject = getRelativeWeightsFromObject;
    function getDropTargetAtLocation(x, y) {
        var dropTargets = document.getElementsByClassName("drop-target");
        var point = {
            x: x,
            y: y
        };
        for (var i = 0; i < dropTargets.length; i++) {
            var node = dropTargets[i];
            var nodeBounds = node.getBoundingClientRect();
            var rect = {
                x1: nodeBounds.left,
                x2: nodeBounds.right,
                y1: nodeBounds.top,
                y2: nodeBounds.bottom
            };
            if (rectContains(rect, point)) {
                return node;
            }
        }
        return null;
    }
    exports.getDropTargetAtLocation = getDropTargetAtLocation;
    function onDOMLoaded(onLoaded) {
        if (document.readyState === "interactive" || document.readyState === "complete") {
            onLoaded();
        }
        else {
            document.addEventListener('DOMContentLoaded', onLoaded);
        }
    }
    exports.onDOMLoaded = onDOMLoaded;
    function meetAllPlayers() {
        for (var i = 0; i < App_2.default.game.playerOrder.length; i++) {
            var player = App_2.default.game.playerOrder[i];
            if (player !== App_2.default.humanPlayer) {
                App_2.default.humanPlayer.diplomacyStatus.meetPlayer(player);
            }
        }
    }
    exports.meetAllPlayers = meetAllPlayers;
    function getItemsFromWeightedProbabilities(probabilities) {
        var allItems = [];
        if (probabilities.length === 0) {
            return allItems;
        }
        if (probabilities[0].weight) {
            var selected = getRandomArrayItemWithWeights(probabilities);
            var firstItem = selected.probabilityItems[0];
            if (firstItem.probabilityItems) {
                var probabilityItems = selected.probabilityItems;
                allItems = allItems.concat(getItemsFromWeightedProbabilities(probabilityItems));
            }
            else {
                var toAdd = selected.probabilityItems;
                allItems = allItems.concat(toAdd);
            }
        }
        else {
            for (var i = 0; i < probabilities.length; i++) {
                var selected = probabilities[i];
                if (Math.random() < selected.flatProbability) {
                    var firstItem = selected.probabilityItems[0];
                    if (firstItem.probabilityItems) {
                        var probabilityItems = selected.probabilityItems;
                        allItems = allItems.concat(getItemsFromWeightedProbabilities(probabilityItems));
                    }
                    else {
                        var toAdd = selected.probabilityItems;
                        allItems = allItems.concat(toAdd);
                    }
                }
            }
        }
        return allItems;
    }
    exports.getItemsFromWeightedProbabilities = getItemsFromWeightedProbabilities;
    function defaultNameGenerator(unit) {
        return "" + unit.id + " " + unit.template.displayName;
    }
    exports.defaultNameGenerator = defaultNameGenerator;
    function transformMat3(a, m) {
        var x = m[0] * a.x + m[3] * a.y + m[6];
        var y = m[1] * a.x + m[4] * a.y + m[7];
        return { x: x, y: y };
    }
    exports.transformMat3 = transformMat3;
    function createDummySpriteForShader(x, y, width, height) {
        var texture = getDummyTextureForShader();
        var sprite = new PIXI.Sprite(texture);
        if (x || y) {
            sprite.position = new PIXI.Point(x || 0, y || 0);
        }
        if (width) {
            sprite.width = width;
        }
        if (height) {
            sprite.height = height;
        }
        return sprite;
    }
    exports.createDummySpriteForShader = createDummySpriteForShader;
    function getDummyTextureForShader() {
        var canvas = document.createElement("canvas");
        canvas._pixiId = "dummyShaderTexture";
        canvas.width = 1;
        canvas.height = 1;
        return PIXI.Texture.fromCanvas(canvas);
    }
    exports.getDummyTextureForShader = getDummyTextureForShader;
    function findEasingFunctionHighPoint(easingFunction, resolution, maxIterations, startIndex, endIndex, iteration) {
        if (resolution === void 0) { resolution = 10; }
        if (maxIterations === void 0) { maxIterations = 4; }
        if (startIndex === void 0) { startIndex = 0; }
        if (endIndex === void 0) { endIndex = 1; }
        if (iteration === void 0) { iteration = 0; }
        if (iteration >= maxIterations) {
            return (startIndex + endIndex) / 2;
        }
        var highestValue;
        var highestValueIndex;
        var step = (endIndex - startIndex) / resolution;
        for (var i = 0; i < resolution; i++) {
            var currentIndex = startIndex + i * step;
            var currentValue = easingFunction(currentIndex);
            if (!isFinite(highestValue) || currentValue > highestValue) {
                highestValue = currentValue;
                highestValueIndex = currentIndex;
            }
        }
        return findEasingFunctionHighPoint(easingFunction, resolution, maxIterations, highestValueIndex - step / 2, highestValueIndex + step / 2, iteration + 1);
    }
    exports.findEasingFunctionHighPoint = findEasingFunctionHighPoint;
    function pointsEqual(p1, p2) {
        return (p1.x === p2.x && p1.y === p2.y);
    }
    exports.pointsEqual = pointsEqual;
    function makeRandomPersonality() {
        var unitCompositionPreference = {};
        for (var archetype in App_2.default.moduleData.Templates.UnitArchetypes) {
            unitCompositionPreference[archetype] = Math.random();
        }
        return ({
            expansiveness: Math.random(),
            aggressiveness: Math.random(),
            friendliness: Math.random(),
            unitCompositionPreference: unitCompositionPreference
        });
    }
    exports.makeRandomPersonality = makeRandomPersonality;
    function splitMultilineText(text) {
        if (Array.isArray(text)) {
            var returnArr = [];
            for (var i = 0; i < text.length; i++) {
                returnArr.push(text[i]);
                returnArr.push(React.DOM.br({
                    key: "" + i
                }));
            }
            return returnArr;
        }
        else {
            return text;
        }
    }
    exports.splitMultilineText = splitMultilineText;
});
define("src/Building", ["require", "exports", "src/idGenerators", "src/App"], function (require, exports, idGenerators_2, App_3) {
    "use strict";
    var Building = (function () {
        function Building(props) {
            this.template = props.template;
            this.id = (props.id && isFinite(props.id)) ?
                props.id : idGenerators_2.default.building++;
            this.location = props.location;
            this.controller = props.controller || this.location.owner;
            this.upgradeLevel = props.upgradeLevel || 1;
            this.totalCost = props.totalCost || this.template.buildCost || 0;
        }
        Building.prototype.getEffect = function (effect) {
            if (effect === void 0) { effect = {}; }
            if (!this.template.effect)
                return {};
            var multiplier = this.template.effectMultiplierFN ?
                this.template.effectMultiplierFN(this.upgradeLevel) :
                this.upgradeLevel;
            for (var key in this.template.effect) {
                var prop = this.template.effect[key];
                if (isFinite(prop)) {
                    if (!effect[key]) {
                        effect[key] = 0;
                    }
                    effect[key] += prop * multiplier;
                }
                else {
                    if (!effect[key]) {
                        effect[key] = {};
                    }
                    for (var key2 in prop) {
                        if (!effect[key][key2]) {
                            effect[key][key2] = 0;
                        }
                        effect[key][key2] += prop[key2] * multiplier;
                    }
                }
            }
            return effect;
        };
        Building.prototype.getPossibleUpgrades = function () {
            var self = this;
            var upgrades = [];
            if (this.upgradeLevel < this.template.maxUpgradeLevel) {
                upgrades.push({
                    template: this.template,
                    level: this.upgradeLevel + 1,
                    cost: this.template.buildCost * (this.upgradeLevel + 1),
                    parentBuilding: this
                });
            }
            else if (this.template.upgradeInto && this.template.upgradeInto.length > 0) {
                var templatedUpgrades = this.template.upgradeInto.map(function (upgradeData) {
                    var template = App_3.default.moduleData.Templates.Buildings[upgradeData.templateType];
                    return ({
                        level: upgradeData.level,
                        template: template,
                        cost: template.buildCost,
                        parentBuilding: self
                    });
                });
                upgrades = upgrades.concat(templatedUpgrades);
            }
            return upgrades;
        };
        Building.prototype.upgrade = function () {
        };
        Building.prototype.setController = function (newController) {
            var oldController = this.controller;
            if (oldController === newController)
                return;
            this.controller = newController;
            this.location.updateController();
        };
        Building.prototype.serialize = function () {
            var data = {
                templateType: this.template.type,
                id: this.id,
                locationId: this.location.id,
                controllerId: this.controller.id,
                upgradeLevel: this.upgradeLevel,
                totalCost: this.totalCost
            };
            return data;
        };
        return Building;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Building;
});
define("src/Color", ["require", "exports"], function (require, exports) {
    "use strict";
    var Color = (function () {
        function Color(r, g, b) {
            this.r = r;
            this.g = g;
            this.b = b;
        }
        Color.fromHex = function (hex) {
            return new Color((hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255);
        };
        Color.fromHexString = function (hexString) {
            var hexDigits;
            if (hexString.charAt(0) === "#") {
                hexDigits = hexString.substring(1, 7);
            }
            return Color.fromHex(parseInt(hexDigits, 16));
        };
        Color.fromHSV = function (h, s, v) {
            var r, g, b, i, f, p, q, t;
            i = Math.floor(h * 6);
            f = h * 6 - i;
            p = v * (1 - s);
            q = v * (1 - f * s);
            t = v * (1 - (1 - f) * s);
            switch (i % 6) {
                case 0:
                    r = v, g = t, b = p;
                    break;
                case 1:
                    r = q, g = v, b = p;
                    break;
                case 2:
                    r = p, g = v, b = t;
                    break;
                case 3:
                    r = p, g = q, b = v;
                    break;
                case 4:
                    r = t, g = p, b = v;
                    break;
                case 5:
                    r = v, g = p, b = q;
                    break;
            }
            return new Color(r, g, b);
        };
        Color.fromHSL = function (h, s, l) {
            var r, g, b;
            if (s == 0) {
                r = g = b = l;
            }
            else {
                function hue2rgb(p, q, t) {
                    if (t < 0)
                        t += 1;
                    if (t > 1)
                        t -= 1;
                    if (t < 1 / 6)
                        return p + (q - p) * 6 * t;
                    if (t < 1 / 2)
                        return q;
                    if (t < 2 / 3)
                        return p + (q - p) * (2 / 3 - t) * 6;
                    return p;
                }
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }
            return new Color(r, g, b);
        };
        Color.fromHUSL = function (h, s, l) {
            var RGB = HUSL.toRGB(h * 360, s * 100, l * 100);
            return new Color(RGB[0], RGB[1], RGB[2]);
        };
        Color.convertScalarsToDegrees = function (s) {
            return [s[0] * 360, s[1] * 100, s[2] * 100];
        };
        Color.convertDegreesToScalars = function (d) {
            return [d[0] / 360, d[1] / 100, d[2] / 100];
        };
        Color.prototype.getRGB = function () {
            return [this.r, this.g, this.b];
        };
        Color.prototype.getRGBA = function (alpha) {
            return [this.r, this.g, this.b, alpha];
        };
        Color.prototype.get8BitRGB = function () {
            return this.getRGB().map(function (x) { return x * 255; });
        };
        Color.prototype.getHex = function () {
            return (this.r * 255 << 16) + (this.g * 255 << 8) + this.b * 255;
        };
        Color.prototype.getHexString = function () {
            var hex = Math.round(this.getHex());
            var converted = hex.toString(16);
            return '000000'.substr(0, 6 - converted.length) + converted;
        };
        Color.prototype.getHUSL = function () {
            var husl = HUSL.fromRGB(this.r, this.g, this.b);
            return [husl[0] / 360, husl[1] / 100, husl[2] / 100];
        };
        Color.prototype.getHSV = function () {
            var r = this.r;
            var g = this.g;
            var b = this.b;
            var max = Math.max(r, g, b), min = Math.min(r, g, b);
            var h, s, v = max;
            var d = max - min;
            s = max == 0 ? 0 : d / max;
            if (max == min) {
                h = 0;
            }
            else {
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }
            return [h, s, v];
        };
        Color.prototype.serialize = function () {
            return this.getRGB();
        };
        Color.deSerialize = function (saveData) {
            if (!saveData) {
                return undefined;
            }
            return new Color(saveData[0], saveData[1], saveData[2]);
        };
        return Color;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Color;
});
define("src/SubEmblemCoverage", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/SubEmblemPosition", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/Emblem", ["require", "exports", "src/App", "src/utility"], function (require, exports, App_4, utility_1) {
    "use strict";
    var Emblem = (function () {
        function Emblem(color, alpha, inner, outer) {
            this.color = color;
            this.alpha = isFinite(alpha) ? alpha : 1;
            this.inner = inner;
            this.outer = outer;
        }
        Emblem.prototype.generateRandom = function (minAlpha, rng) {
            var rng = rng || new RNG(Math.random);
            this.alpha = rng.uniform();
            this.alpha = utility_1.clamp(this.alpha, minAlpha, 1);
            this.generateSubEmblems(rng);
        };
        Emblem.prototype.canAddOuterTemplate = function () {
            return (this.inner && this.inner.coverage.indexOf(0) !== -1);
        };
        Emblem.prototype.getPossibleSubEmblemsToAdd = function () {
            var possibleTemplates = [];
            if (this.inner && this.outer) {
                throw new Error("Tried to get available sub emblems for emblem that already has both inner and outer");
            }
            if (!this.inner) {
                for (var key in App_4.default.moduleData.Templates.SubEmblems) {
                    if (!App_4.default.moduleData.Templates.SubEmblems[key].disallowRandomGeneration) {
                        possibleTemplates.push(App_4.default.moduleData.Templates.SubEmblems[key]);
                    }
                }
            }
            else {
                if (this.canAddOuterTemplate()) {
                    for (var key in App_4.default.moduleData.Templates.SubEmblems) {
                        var template = App_4.default.moduleData.Templates.SubEmblems[key];
                        if (!template.disallowRandomGeneration && template.coverage.indexOf(1) !== -1) {
                            possibleTemplates.push(template);
                        }
                    }
                }
            }
            return possibleTemplates;
        };
        Emblem.prototype.generateSubEmblems = function (rng) {
            var candidates = this.getPossibleSubEmblemsToAdd();
            this.inner = utility_1.getSeededRandomArrayItem(candidates, rng);
            candidates = this.getPossibleSubEmblemsToAdd();
            if (candidates.length > 0 && rng.uniform() > 0.4) {
                this.outer = utility_1.getSeededRandomArrayItem(candidates, rng);
            }
        };
        Emblem.prototype.canAddBackground = function () {
            if (this.inner.position.indexOf(0) !== -1) {
                return (!this.outer || this.outer.position.indexOf(0) !== -1);
            }
            return false;
        };
        Emblem.prototype.drawSubEmblem = function (toDraw, maxWidth, maxHeight, stretch) {
            var image = App_4.default.images[toDraw.src];
            var width = image.width;
            var height = image.height;
            if (stretch) {
                var widthRatio = width / maxWidth;
                var heightRatio = height / maxHeight;
                var largestRatio = Math.max(widthRatio, heightRatio);
                width /= largestRatio;
                height /= largestRatio;
            }
            var canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(image, 0, 0, width, height);
            ctx.globalCompositeOperation = "source-in";
            ctx.fillStyle = "#" + this.color.getHexString();
            ctx.fillRect(0, 0, width, height);
            return canvas;
        };
        Emblem.prototype.draw = function (maxWidth, maxHeight, stretch) {
            var canvas = document.createElement("canvas");
            var ctx = canvas.getContext("2d");
            ctx.globalAlpha = this.alpha;
            var inner = this.drawSubEmblem(this.inner, maxWidth, maxHeight, stretch);
            canvas.width = inner.width;
            canvas.height = inner.height;
            ctx.drawImage(inner, 0, 0);
            if (this.outer) {
                var outer = this.drawSubEmblem(this.outer, maxWidth, maxHeight, stretch);
                ctx.drawImage(outer, 0, 0);
            }
            return canvas;
        };
        Emblem.prototype.serialize = function () {
            var data = {
                alpha: this.alpha,
                innerKey: this.inner.key
            };
            if (this.outer) {
                data.outerKey = this.outer.key;
            }
            return data;
        };
        return Emblem;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Emblem;
});
define("src/Flag", ["require", "exports", "src/Emblem"], function (require, exports, Emblem_1) {
    "use strict";
    var Flag = (function () {
        function Flag(props) {
            this.cachedCanvases = {};
            this.width = props.width;
            this.height = props.height || props.width;
            this.mainColor = props.mainColor;
            this.secondaryColor = props.secondaryColor;
            this.tetriaryColor = props.tetriaryColor;
        }
        Flag.prototype.setColorScheme = function (main, secondary, tetriary) {
            this.mainColor = main;
            this.secondaryColor = secondary;
            if (this.foregroundEmblem && secondary) {
                this.foregroundEmblem.color = this.secondaryColor;
            }
            this.tetriaryColor = tetriary;
            if (this.backgroundEmblem && tetriary) {
                this.backgroundEmblem.color = this.tetriaryColor;
            }
        };
        Flag.prototype.generateRandom = function (seed) {
            this.seed = seed || Math.random();
            var rng = new RNG(this.seed);
            this.foregroundEmblem = new Emblem_1.default(this.secondaryColor);
            this.foregroundEmblem.generateRandom(1, rng);
            if (this.foregroundEmblem.canAddBackground() && rng.uniform() > 0.5) {
                this.backgroundEmblem = new Emblem_1.default(this.tetriaryColor);
                this.backgroundEmblem.generateRandom(0.4, rng);
            }
        };
        Flag.prototype.clearContent = function () {
            this.customImage = null;
            this._customImageToRender = null;
            this.foregroundEmblem = null;
            this.backgroundEmblem = null;
            this.seed = null;
        };
        Flag.prototype.setForegroundEmblem = function (emblem) {
            if (!emblem) {
                this.foregroundEmblem = null;
                return;
            }
            this.clearContent();
            this.foregroundEmblem = emblem;
            if (emblem.color) {
                this.secondaryColor = emblem.color;
            }
            else {
                emblem.color = this.secondaryColor;
            }
        };
        Flag.prototype.setBackgroundEmblem = function (emblem) {
            if (!emblem) {
                this.backgroundEmblem = null;
                return;
            }
            this.clearContent();
            this.backgroundEmblem = emblem;
            if (emblem.color) {
                this.tetriaryColor = emblem.color;
            }
            else {
                emblem.color = this.tetriaryColor;
            }
        };
        Flag.prototype.setCustomImage = function (imageSrc) {
            this.clearContent();
            this.customImage = imageSrc;
            var canvas = document.createElement("canvas");
            canvas.width = this.width;
            canvas.height = this.height;
            var ctx = canvas.getContext("2d");
            var image = new Image();
            image.src = imageSrc;
            var xPos, xWidth, yPos, yHeight;
            if (image.width < this.width) {
                xPos = (this.width - image.width) / 2;
                xWidth = image.width;
            }
            else {
                xPos = 0;
                xWidth = this.width;
            }
            if (image.height < this.height) {
                yPos = (this.height - image.height) / 2;
                yHeight = image.height;
            }
            else {
                yPos = 0;
                yHeight = this.height;
            }
            ctx.drawImage(image, xPos, yPos, xWidth, yHeight);
            this._customImageToRender = canvas;
        };
        Flag.prototype.getCanvas = function (width, height, stretch, useCache) {
            if (width === void 0) { width = this.width; }
            if (height === void 0) { height = this.height; }
            if (stretch === void 0) { stretch = true; }
            if (useCache === void 0) { useCache = true; }
            if (useCache) {
                var sizeString = "" + width + "," + height + stretch;
                if (!this.cachedCanvases[sizeString]) {
                    var canvas = this.draw(width, height, stretch);
                    this.cachedCanvases[sizeString] = canvas;
                }
                return this.cachedCanvases[sizeString];
            }
            else {
                var canvas = this.draw(width, height, stretch);
                return (canvas);
            }
        };
        Flag.prototype.draw = function (width, height, stretch) {
            if (width === void 0) { width = this.width; }
            if (height === void 0) { height = this.height; }
            if (stretch === void 0) { stretch = true; }
            var canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            if (!this.mainColor) {
                return canvas;
            }
            var ctx = canvas.getContext("2d");
            ctx.globalCompositeOperation = "source-over";
            ctx.fillStyle = "#" + this.mainColor.getHexString();
            ctx.fillRect(0, 0, width, height);
            if (this._customImageToRender) {
                ctx.drawImage(this._customImageToRender, 0, 0);
            }
            else {
                if (this.backgroundEmblem && this.tetriaryColor) {
                    var background = this.backgroundEmblem.draw(width, height, stretch);
                    var x = (width - background.width) / 2;
                    var y = (height - background.height) / 2;
                    ctx.drawImage(background, x, y);
                }
                if (this.foregroundEmblem && this.secondaryColor) {
                    var foreground = this.foregroundEmblem.draw(width, height, stretch);
                    var x = (width - foreground.width) / 2;
                    var y = (height - foreground.height) / 2;
                    ctx.drawImage(foreground, x, y);
                }
            }
            return canvas;
        };
        Flag.prototype.serialize = function () {
            var data = {
                mainColor: this.mainColor.serialize()
            };
            if (this.secondaryColor) {
                data.secondaryColor = this.secondaryColor.serialize();
            }
            if (this.tetriaryColor) {
                data.tetriaryColor = this.tetriaryColor.serialize();
            }
            if (this.customImage) {
                data.customImage = this.customImage;
            }
            else if (this.seed) {
                data.seed = this.seed;
            }
            else {
                if (this.foregroundEmblem)
                    data.foregroundEmblem = this.foregroundEmblem.serialize();
                if (this.backgroundEmblem)
                    data.backgroundEmblem = this.backgroundEmblem.serialize();
            }
            return data;
        };
        return Flag;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Flag;
});
define("src/Item", ["require", "exports", "src/idGenerators"], function (require, exports, idGenerators_3) {
    "use strict";
    var Item = (function () {
        function Item(template, id) {
            this.id = isFinite(id) ? id : idGenerators_3.default.item++;
            this.template = template;
        }
        Item.prototype.serialize = function () {
            var data = {
                id: this.id,
                templateType: this.template.type
            };
            if (this.unit) {
                data.unitId = this.unit.id;
            }
            return data;
        };
        return Item;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Item;
});
define("src/RuleSet", ["require", "exports"], function (require, exports) {
    "use strict";
    exports.defaultRuleSet = {
        manufactory: {
            startingCapacity: 1,
            maxCapacity: 3,
            buildCost: 1000
        },
        research: {
            baseResearchSpeed: 3000
        },
        battle: {
            rowsPerFormation: 2,
            cellsPerRow: 3,
            maxUnitsPerSide: 6,
            maxUnitsPerRow: 3,
            baseMaxCapturedUnits: 1,
            absoluteMaxCapturedUnits: 3,
            baseUnitCaptureChance: 0.1,
            humanUnitDeathChance: 0.65,
            aiUnitDeathChance: 0.65,
            independentUnitDeathChance: 1.0,
            loserUnitExtraDeathChance: 0.35
        }
    };
});
define("src/BattleTurnOrder", ["require", "exports"], function (require, exports) {
    "use strict";
    var BattleTurnOrder = (function () {
        function BattleTurnOrder() {
            this.allUnits = [];
            this.orderedUnits = [];
        }
        BattleTurnOrder.prototype.destroy = function () {
            this.allUnits = null;
            this.orderedUnits = null;
        };
        BattleTurnOrder.prototype.hasUnit = function (unit) {
            return this.allUnits.indexOf(unit) !== -1;
        };
        BattleTurnOrder.prototype.addUnit = function (unit) {
            if (this.hasUnit(unit)) {
                throw new Error("Unit " + unit.name + " is already part of turn order");
            }
            this.allUnits.push(unit);
            this.orderedUnits.push(unit);
        };
        BattleTurnOrder.turnOrderFilterFN = function (unit) {
            if (unit.battleStats.currentActionPoints <= 0) {
                return false;
            }
            if (unit.currentHealth <= 0) {
                return false;
            }
            return true;
        };
        BattleTurnOrder.turnOrderSortFN = function (a, b) {
            if (a.battleStats.moveDelay !== b.battleStats.moveDelay) {
                return a.battleStats.moveDelay - b.battleStats.moveDelay;
            }
            else {
                return a.id - b.id;
            }
        };
        BattleTurnOrder.prototype.update = function () {
            this.orderedUnits = this.allUnits.filter(BattleTurnOrder.turnOrderFilterFN);
            this.orderedUnits.sort(BattleTurnOrder.turnOrderSortFN);
        };
        BattleTurnOrder.prototype.getActiveUnit = function () {
            return this.orderedUnits[0];
        };
        BattleTurnOrder.getDisplayDataFromUnit = function (unit) {
            return ({
                moveDelay: unit.battleStats.moveDelay,
                isGhost: false,
                unit: unit,
                displayName: unit.name
            });
        };
        BattleTurnOrder.makeGhostDisplayData = function (ghostMoveDelay) {
            return ({
                moveDelay: ghostMoveDelay,
                isGhost: true,
                unit: null,
                displayName: null
            });
        };
        BattleTurnOrder.prototype.getGhostIndex = function (ghostMoveDelay, ghostId) {
            for (var i = 0; i < this.orderedUnits.length; i++) {
                var unit = this.orderedUnits[i];
                var unitMoveDelay = unit.battleStats.moveDelay;
                if (ghostMoveDelay < unitMoveDelay) {
                    return i;
                }
                else if (ghostMoveDelay === unitMoveDelay && ghostId < unit.id) {
                    return i;
                }
            }
            return this.orderedUnits.length;
        };
        BattleTurnOrder.prototype.getDisplayData = function (ghostMoveDelay, ghostId) {
            var displayData = this.orderedUnits.map(BattleTurnOrder.getDisplayDataFromUnit);
            if (isFinite(ghostMoveDelay)) {
                var ghostIndex = this.getGhostIndex(ghostMoveDelay, ghostId);
                var ghostDisplayData = BattleTurnOrder.makeGhostDisplayData(ghostMoveDelay);
                displayData.splice(ghostIndex, 0, ghostDisplayData);
            }
            return displayData;
        };
        return BattleTurnOrder;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BattleTurnOrder;
});
define("src/Battle", ["require", "exports", "src/App", "src/eventManager", "src/BattleTurnOrder", "src/UnitBattleSide", "src/utility"], function (require, exports, App_5, eventManager_2, BattleTurnOrder_1, UnitBattleSide_1, utility_2) {
    "use strict";
    var Battle = (function () {
        function Battle(props) {
            this.unitsById = {};
            this.unitsBySide = {
                side1: [],
                side2: []
            };
            this.evaluation = {};
            this.isSimulated = false;
            this.isVirtual = false;
            this.ended = false;
            this.afterFinishCallbacks = [];
            this.side1 = props.side1;
            this.side1Player = props.side1Player;
            this.side2 = props.side2;
            this.side2Player = props.side2Player;
            this.battleData = props.battleData;
            this.turnOrder = new BattleTurnOrder_1.default();
        }
        Battle.prototype.init = function () {
            var self = this;
            UnitBattleSide_1.UnitBattleSides.forEach(function (sideId) {
                var side = self[sideId];
                for (var i = 0; i < side.length; i++) {
                    for (var j = 0; j < side[i].length; j++) {
                        if (side[i][j]) {
                            self.unitsById[side[i][j].id] = side[i][j];
                            self.unitsBySide[sideId].push(side[i][j]);
                            var pos = self.getAbsolutePositionFromSidePosition([i, j], sideId);
                            self.initUnit(side[i][j], sideId, pos);
                        }
                    }
                }
            });
            this.currentTurn = 0;
            this.maxTurns = 24;
            this.turnsLeft = this.maxTurns;
            this.updateTurnOrder();
            this.startHealth =
                {
                    side1: this.getTotalHealthForSide("side1").current,
                    side2: this.getTotalHealthForSide("side2").current
                };
            if (this.checkBattleEnd()) {
                this.endBattle();
            }
            else {
                this.shiftRowsIfNeeded();
            }
            this.triggerBattleStartAbilities();
        };
        Battle.prototype.forEachUnit = function (operator) {
            for (var id in this.unitsById) {
                operator.call(this, this.unitsById[id]);
            }
        };
        Battle.prototype.initUnit = function (unit, side, position) {
            unit.resetBattleStats();
            unit.setBattlePosition(this, side, position);
            this.turnOrder.addUnit(unit);
            unit.timesActedThisTurn++;
        };
        Battle.prototype.triggerBattleStartAbilities = function () {
            this.forEachUnit(function (unit) {
                var passiveSkillsByPhase = unit.getPassiveSkillsByPhase();
                if (passiveSkillsByPhase["atBattleStart"]) {
                    var skills = passiveSkillsByPhase["atBattleStart"];
                    for (var i = 0; i < skills.length; i++) {
                        for (var j = 0; j < skills[i].atBattleStart.length; j++) {
                            var effect = skills[i].atBattleStart[j];
                            effect.action.executeAction(unit, unit, this, effect.data);
                        }
                    }
                }
            });
        };
        Battle.prototype.endTurn = function () {
            this.currentTurn++;
            this.turnsLeft--;
            this.updateTurnOrder();
            var shouldEnd = this.checkBattleEnd();
            if (shouldEnd) {
                this.endBattle();
            }
            else {
                this.shiftRowsIfNeeded();
            }
        };
        Battle.prototype.getPlayerForSide = function (side) {
            if (side === "side1")
                return this.side1Player;
            else if (side === "side2")
                return this.side2Player;
            else
                throw new Error("invalid side");
        };
        Battle.prototype.getSideForPlayer = function (player) {
            if (this.side1Player === player)
                return "side1";
            else if (this.side2Player === player)
                return "side2";
            else
                throw new Error("invalid player");
        };
        Battle.prototype.getActivePlayer = function () {
            if (!this.activeUnit)
                return null;
            var side = this.activeUnit.battleStats.side;
            return this.getPlayerForSide(side);
        };
        Battle.prototype.getRowByPosition = function (position) {
            var rowsPerSide = App_5.default.moduleData.ruleSet.battle.rowsPerFormation;
            var side = position < rowsPerSide ? "side1" : "side2";
            var relativePosition = position % rowsPerSide;
            return this[side][relativePosition];
        };
        Battle.prototype.getCapturedUnits = function (victor, maxCapturedUnits) {
            if (!victor || victor.isIndependent)
                return [];
            var winningSide = this.getSideForPlayer(victor);
            var losingSide = utility_2.reverseSide(winningSide);
            var losingUnits = this.unitsBySide[losingSide].slice(0);
            losingUnits.sort(function (a, b) {
                var captureChanceSort = b.battleStats.captureChance - a.battleStats.captureChance;
                if (captureChanceSort) {
                    return captureChanceSort;
                }
                else {
                    return utility_2.randInt(0, 1) * 2 - 1;
                }
            });
            var capturedUnits = [];
            for (var i = 0; i < losingUnits.length; i++) {
                if (capturedUnits.length >= maxCapturedUnits)
                    break;
                var unit = losingUnits[i];
                if (unit.currentHealth <= 0 &&
                    Math.random() <= unit.battleStats.captureChance) {
                    capturedUnits.push(unit);
                }
            }
            return capturedUnits;
        };
        Battle.prototype.getUnitDeathChance = function (unit, victor) {
            var ruleSet = App_5.default.moduleData.ruleSet;
            var player = unit.fleet.player;
            var deathChance;
            if (player.isIndependent) {
                deathChance = ruleSet.battle.independentUnitDeathChance;
            }
            else if (player.isAI) {
                deathChance = ruleSet.battle.aiUnitDeathChance;
            }
            else {
                deathChance = ruleSet.battle.humanUnitDeathChance;
            }
            var playerDidLose = (victor && player !== victor);
            if (playerDidLose) {
                deathChance += ruleSet.battle.loserUnitExtraDeathChance;
            }
            return deathChance;
        };
        Battle.prototype.getDeadUnits = function (capturedUnits, victor) {
            var deadUnits = [];
            this.forEachUnit(function (unit) {
                if (unit.currentHealth <= 0) {
                    var wasCaptured = capturedUnits.indexOf(unit) >= 0;
                    if (!wasCaptured) {
                        var deathChance = this.getUnitDeathChance(unit, victor);
                        if (Math.random() < deathChance) {
                            deadUnits.push(unit);
                        }
                    }
                }
            });
            return deadUnits;
        };
        Battle.prototype.endBattle = function () {
            this.ended = true;
            if (this.isVirtual)
                return;
            this.activeUnit = null;
            var victor = this.getVictor();
            var maxCapturedUnits = App_5.default.moduleData.ruleSet.battle.baseMaxCapturedUnits;
            this.capturedUnits = this.getCapturedUnits(victor, maxCapturedUnits);
            this.deadUnits = this.getDeadUnits(this.capturedUnits, victor);
            eventManager_2.default.dispatchEvent("battleEnd", null);
        };
        Battle.prototype.finishBattle = function (forcedVictor) {
            var victor = forcedVictor || this.getVictor();
            for (var i = 0; i < this.deadUnits.length; i++) {
                this.deadUnits[i].removeFromPlayer();
            }
            var experiencePerSide = this.getGainedExperiencePerSide();
            this.forEachUnit(function (unit) {
                unit.addExperience(experiencePerSide[unit.battleStats.side]);
                unit.resetBattleStats();
                if (unit.currentHealth < Math.round(unit.maxHealth * 0.1)) {
                    unit.currentHealth = Math.round(unit.maxHealth * 0.1);
                }
                this.side1Player.identifyUnit(unit);
                this.side2Player.identifyUnit(unit);
            });
            if (victor) {
                for (var i = 0; i < this.capturedUnits.length; i++) {
                    this.capturedUnits[i].transferToPlayer(victor);
                    this.capturedUnits[i].experienceForCurrentLevel = 0;
                }
            }
            if (this.battleData.building) {
                if (victor) {
                    this.battleData.building.setController(victor);
                }
            }
            if (this.isSimulated) {
                eventManager_2.default.dispatchEvent("renderLayer", "fleets", this.battleData.location);
            }
            else {
                eventManager_2.default.dispatchEvent("setCameraToCenterOn", this.battleData.location);
                eventManager_2.default.dispatchEvent("switchScene", "galaxyMap");
            }
            if (App_5.default.humanPlayer.starIsVisible(this.battleData.location)) {
                eventManager_2.default.dispatchEvent("makeBattleFinishNotification", {
                    location: this.battleData.location,
                    attacker: this.battleData.attacker.player,
                    defender: this.battleData.defender.player,
                    victor: victor
                });
            }
            for (var i = 0; i < this.afterFinishCallbacks.length; i++) {
                this.afterFinishCallbacks[i]();
            }
        };
        Battle.prototype.getVictor = function () {
            var evaluation = this.getEvaluation();
            if (evaluation > 0)
                return this.side1Player;
            else if (evaluation < 0)
                return this.side2Player;
            else
                return null;
        };
        Battle.prototype.getTotalHealthForRow = function (position) {
            var row = this.getRowByPosition(position);
            var total = 0;
            for (var i = 0; i < row.length; i++) {
                if (row[i]) {
                    total += row[i].currentHealth;
                }
            }
            return total;
        };
        Battle.prototype.getTotalHealthForSide = function (side) {
            var health = {
                current: 0,
                max: 0
            };
            var units = this.unitsBySide[side];
            for (var i = 0; i < units.length; i++) {
                var unit = units[i];
                health.current += unit.currentHealth;
                health.max += unit.maxHealth;
            }
            return health;
        };
        Battle.prototype.getEvaluation = function () {
            var self = this;
            var evaluation = 0;
            UnitBattleSide_1.UnitBattleSides.forEach(function (side) {
                var sign = side === "side1" ? 1 : -1;
                var currentHealth = self.getTotalHealthForSide(side).current;
                if (currentHealth <= 0) {
                    return -999 * sign;
                }
                var currentHealthFactor = currentHealth / self.startHealth[side];
                for (var i = 0; i < self.unitsBySide[side].length; i++) {
                    if (self.unitsBySide[side][i].currentHealth <= 0) {
                        evaluation -= 0.2 * sign;
                    }
                }
                var defenderMultiplier = 1;
                if (self.battleData.building) {
                    var template = self.battleData.building.template;
                    var isDefender = self.battleData.defender.player === self.getPlayerForSide(side);
                    if (isDefender) {
                        defenderMultiplier += template.defenderAdvantage;
                    }
                }
                evaluation += currentHealthFactor * defenderMultiplier * sign;
            });
            evaluation = utility_2.clamp(evaluation, -1, 1);
            this.evaluation[this.currentTurn] = evaluation;
            return this.evaluation[this.currentTurn];
        };
        Battle.prototype.getAbsolutePositionFromSidePosition = function (relativePosition, side) {
            if (side === "side1") {
                return relativePosition;
            }
            else {
                var rowsPerSide = App_5.default.moduleData.ruleSet.battle.rowsPerFormation;
                return [relativePosition[0] + rowsPerSide, relativePosition[1]];
            }
        };
        Battle.prototype.updateBattlePositions = function (side) {
            var units = this[side];
            for (var i = 0; i < units.length; i++) {
                var row = this[side][i];
                for (var j = 0; j < row.length; j++) {
                    var pos = this.getAbsolutePositionFromSidePosition([i, j], side);
                    var unit = row[j];
                    if (unit) {
                        unit.setBattlePosition(this, side, pos);
                    }
                }
            }
        };
        Battle.prototype.shiftRowsForSide = function (side) {
            var formation = this[side];
            if (side === "side1") {
                formation.reverse();
            }
            var nextHealthyRowIndex;
            for (var i = 1; i < formation.length; i++) {
                var absoluteRow = side === "side1" ? i : i + App_5.default.moduleData.ruleSet.battle.rowsPerFormation;
                if (this.getTotalHealthForRow(absoluteRow) > 0) {
                    nextHealthyRowIndex = i;
                    break;
                }
            }
            if (!isFinite(nextHealthyRowIndex)) {
                throw new Error("Tried to shift battle rows when all rows are defeated");
            }
            var rowsToShift = formation.splice(0, nextHealthyRowIndex);
            formation = formation.concat(rowsToShift);
            if (side === "side1") {
                formation.reverse();
            }
            this[side] = formation;
            this.updateBattlePositions(side);
        };
        Battle.prototype.shiftRowsIfNeeded = function () {
            var rowsPerSide = App_5.default.moduleData.ruleSet.battle.rowsPerFormation;
            var side1FrontRowHealth = this.getTotalHealthForRow(rowsPerSide - 1);
            if (side1FrontRowHealth <= 0) {
                this.shiftRowsForSide("side1");
            }
            var side2FrontRowHealth = this.getTotalHealthForRow(rowsPerSide);
            if (side2FrontRowHealth <= 0) {
                this.shiftRowsForSide("side2");
            }
        };
        Battle.prototype.getGainedExperiencePerSide = function () {
            var totalValuePerSide = {
                side1: 0,
                side2: 0
            };
            for (var side in this.unitsBySide) {
                var totalValue = 0;
                var units = this.unitsBySide[side];
                for (var i = 0; i < units.length; i++) {
                    totalValuePerSide[side] += units[i].level + 1;
                }
            }
            return ({
                side1: totalValuePerSide.side2 / totalValuePerSide.side1 * 10,
                side2: totalValuePerSide.side1 / totalValuePerSide.side2 * 10
            });
        };
        Battle.prototype.checkBattleEnd = function () {
            if (!this.activeUnit)
                return true;
            if (this.turnsLeft <= 0)
                return true;
            if (this.getTotalHealthForSide("side1").current <= 0 ||
                this.getTotalHealthForSide("side2").current <= 0) {
                return true;
            }
            return false;
        };
        Battle.prototype.makeVirtualClone = function () {
            var battleData = this.battleData;
            function cloneUnits(units) {
                var clones = [];
                for (var i = 0; i < units.length; i++) {
                    var row = [];
                    for (var j = 0; j < units[i].length; j++) {
                        var unit = units[i][j];
                        if (!unit) {
                            row.push(unit);
                        }
                        else {
                            row.push(unit.makeVirtualClone());
                        }
                    }
                    clones.push(row);
                }
                return clones;
            }
            var side1 = cloneUnits(this.side1);
            var side2 = cloneUnits(this.side2);
            var side1Player = this.side1Player;
            var side2Player = this.side2Player;
            var clone = new Battle({
                battleData: battleData,
                side1: side1,
                side2: side2,
                side1Player: side1Player,
                side2Player: side2Player
            });
            [side1, side2].forEach(function (side) {
                for (var i = 0; i < side.length; i++) {
                    for (var j = 0; j < side[i].length; j++) {
                        if (!side[i][j])
                            continue;
                        clone.turnOrder.addUnit(side[i][j]);
                        clone.unitsById[side[i][j].id] = side[i][j];
                        clone.unitsBySide[side[i][j].battleStats.side].push(side[i][j]);
                    }
                }
            });
            clone.isVirtual = true;
            clone.currentTurn = this.currentTurn;
            clone.maxTurns = this.maxTurns;
            clone.turnsLeft = this.turnsLeft;
            clone.startHealth = this.startHealth;
            clone.updateTurnOrder();
            if (clone.checkBattleEnd()) {
                clone.endBattle();
            }
            else {
                clone.shiftRowsIfNeeded();
            }
            return clone;
        };
        Battle.prototype.updateTurnOrder = function () {
            this.turnOrder.update();
            this.activeUnit = this.turnOrder.getActiveUnit();
        };
        return Battle;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Battle;
});
define("src/targeting", ["require", "exports", "src/utility"], function (require, exports, utility_3) {
    "use strict";
    (function (TargetFormation) {
        TargetFormation[TargetFormation["ally"] = 0] = "ally";
        TargetFormation[TargetFormation["enemy"] = 1] = "enemy";
        TargetFormation[TargetFormation["either"] = 2] = "either";
    })(exports.TargetFormation || (exports.TargetFormation = {}));
    var TargetFormation = exports.TargetFormation;
    exports.targetSelf = function (units, user) {
        return [user];
    };
    exports.targetNextRow = function (units, user) {
        var ownPosition = user.battleStats.position;
        var increment = user.battleStats.side === "side1" ? 1 : -1;
        return units[ownPosition[0] + increment];
    };
    exports.targetAll = function (units, user) {
        return utility_3.flatten2dArray(units);
    };
    exports.areaSingle = function (units, target) {
        return utility_3.getFrom2dArray(units, [target]);
    };
    exports.areaAll = function (units, target) {
        return utility_3.flatten2dArray(units);
    };
    exports.areaColumn = function (units, target) {
        var y = target[1];
        var targetLocations = [];
        for (var i = 0; i < units.length; i++) {
            targetLocations.push([i, y]);
        }
        return utility_3.getFrom2dArray(units, targetLocations);
    };
    exports.areaRow = function (units, target) {
        var x = target[0];
        var targetLocations = [];
        for (var i = 0; i < units[x].length; i++) {
            targetLocations.push([x, i]);
        }
        return utility_3.getFrom2dArray(units, targetLocations);
    };
    exports.areaRowNeighbors = function (units, target) {
        var x = target[0];
        var y = target[1];
        var targetLocations = [];
        targetLocations.push([x, y]);
        targetLocations.push([x, y - 1]);
        targetLocations.push([x, y + 1]);
        return utility_3.getFrom2dArray(units, targetLocations);
    };
    exports.areaNeighbors = function (units, target) {
        var x = target[0];
        var y = target[1];
        var targetLocations = [];
        targetLocations.push([x, y]);
        targetLocations.push([x - 1, y]);
        targetLocations.push([x + 1, y]);
        targetLocations.push([x, y - 1]);
        targetLocations.push([x, y + 1]);
        return utility_3.getFrom2dArray(units, targetLocations);
    };
});
define("src/battleAbilityTargeting", ["require", "exports", "src/App", "src/utility", "src/targeting"], function (require, exports, App_6, utility_4, targeting_1) {
    "use strict";
    var _nullFormation;
    function getNullFormation() {
        if (!_nullFormation) {
            _nullFormation = [];
            var rows = App_6.default.moduleData.ruleSet.battle.rowsPerFormation;
            var columns = App_6.default.moduleData.ruleSet.battle.cellsPerRow;
            for (var i = 0; i < rows; i++) {
                _nullFormation.push([]);
                for (var j = 0; j < columns; j++) {
                    _nullFormation[i].push(null);
                }
            }
        }
        return _nullFormation;
    }
    exports.getNullFormation = getNullFormation;
    function getFormationsToTarget(battle, user, effect) {
        if (effect.targetFormations === targeting_1.TargetFormation.either) {
            return battle.side1.concat(battle.side2);
        }
        else {
            var userSide = user.battleStats.side;
            var insertNullBefore = (userSide === "side1") ? true : false;
            var toConcat;
        }
        if (effect.targetFormations === targeting_1.TargetFormation.ally) {
            toConcat = battle[userSide];
        }
        else if (effect.targetFormations === targeting_1.TargetFormation.enemy) {
            toConcat = battle[utility_4.reverseSide(userSide)];
        }
        else {
            throw new Error("Invalid target formation for effect: " + effect.name);
        }
        if (insertNullBefore) {
            return getNullFormation().concat(toConcat);
        }
        else {
            return toConcat.concat(getNullFormation());
        }
    }
    exports.getFormationsToTarget = getFormationsToTarget;
    function isTargetableFilterFN(unit) {
        return unit && unit.isTargetable();
    }
    function getPotentialTargets(battle, user, ability) {
        var targetFormations = getFormationsToTarget(battle, user, ability.mainEffect.action);
        var targetsInRange = ability.mainEffect.action.targetRangeFunction(targetFormations, user);
        var targets = targetsInRange.filter(isTargetableFilterFN);
        return targets;
    }
    function getTargetsForAllAbilities(battle, user) {
        if (!user || !battle.activeUnit) {
            return null;
        }
        var allTargets = {};
        var abilities = user.getAllAbilities();
        for (var i = 0; i < abilities.length; i++) {
            var ability = abilities[i];
            var targets = getPotentialTargets(battle, user, ability);
            for (var j = 0; j < targets.length; j++) {
                var target = targets[j];
                if (!allTargets[target.id]) {
                    allTargets[target.id] = [];
                }
                allTargets[target.id].push(ability);
            }
        }
        return allTargets;
    }
    exports.getTargetsForAllAbilities = getTargetsForAllAbilities;
});
define("src/battleAbilityProcessing", ["require", "exports", "src/battleAbilityTargeting"], function (require, exports, battleAbilityTargeting_1) {
    "use strict";
    function getAbilityEffectDataByPhase(battle, abilityUseData) {
        abilityUseData.actualTarget = getTargetOrGuard(battle, abilityUseData);
        var beforeUse = getAbilityEffectDataFromEffectTemplates(battle, abilityUseData, getBeforeAbilityUseEffectTemplates(abilityUseData));
        var abilityEffects = getAbilityEffectDataFromEffectTemplates(battle, abilityUseData, getAbilityUseEffectTemplates(abilityUseData));
        var afterUse = getAbilityEffectDataFromEffectTemplates(battle, abilityUseData, getAfterAbilityUseEffectTemplates(abilityUseData));
        return ({
            beforeUse: beforeUse,
            abilityEffects: abilityEffects,
            afterUse: afterUse
        });
    }
    exports.getAbilityEffectDataByPhase = getAbilityEffectDataByPhase;
    function getTargetOrGuard(battle, abilityUseData) {
        if (abilityUseData.ability.bypassesGuard) {
            return abilityUseData.intendedTarget;
        }
        var guarding = getGuarders(battle, abilityUseData);
        guarding = guarding.sort(function (a, b) {
            return a.battleStats.guardAmount - b.battleStats.guardAmount;
        });
        for (var i = 0; i < guarding.length; i++) {
            var guardRoll = Math.random() * 100;
            if (guardRoll <= guarding[i].battleStats.guardAmount) {
                return guarding[i];
            }
        }
        return abilityUseData.intendedTarget;
    }
    function canGuardFN(intendedTarget, unit) {
        if (!unit.isTargetable()) {
            return false;
        }
        if (unit.battleStats.guardCoverage === 1) {
            return unit.battleStats.guardAmount > 0;
        }
        else if (unit.battleStats.guardCoverage === 0) {
            if (unit.battleStats.position[0] === intendedTarget.battleStats.position[0]) {
                return unit.battleStats.guardAmount > 0;
            }
        }
    }
    function getGuarders(battle, abilityUseData) {
        var userSide = abilityUseData.user.battleStats.side;
        var targetSide = abilityUseData.intendedTarget.battleStats.side;
        if (userSide === targetSide)
            return [];
        var allEnemies = battle.unitsBySide[targetSide];
        var guarders = allEnemies.filter(canGuardFN.bind(null, abilityUseData.intendedTarget));
        return guarders;
    }
    function activeUnitsFilterFN(unit) {
        return unit && unit.isActiveInBattle();
    }
    function getUnitsInEffectArea(battle, effect, user, target) {
        var targetFormations = battleAbilityTargeting_1.getFormationsToTarget(battle, user, effect);
        var inArea = effect.battleAreaFunction(targetFormations, target.battleStats.position);
        return inArea.filter(activeUnitsFilterFN);
    }
    function getAbilityEffectDataFromEffectTemplates(battle, abilityUseData, effectTemplates) {
        var effectData = [];
        for (var i = 0; i < effectTemplates.length; i++) {
            var templateEffect = effectTemplates[i];
            var targetsForEffect = getUnitsInEffectArea(battle, templateEffect.action, abilityUseData.user, abilityUseData.actualTarget);
            for (var j = 0; j < targetsForEffect.length; j++) {
                effectData.push({
                    templateEffect: templateEffect,
                    user: abilityUseData.user,
                    target: targetsForEffect[j],
                    trigger: templateEffect.trigger
                });
            }
        }
        return effectData;
    }
    function getEffectTemplatesWithAttachedEffects(templates) {
        var withAttached = [];
        for (var i = 0; i < templates.length; i++) {
            var template = templates[i];
            withAttached.push(template);
            if (template.attachedEffects) {
                for (var j = 0; j < template.attachedEffects.length; j++) {
                    withAttached.push(template.attachedEffects[j]);
                }
            }
        }
        return withAttached;
    }
    function getBeforeAbilityUseEffectTemplates(abilityUseData) {
        var beforeUseEffects = [];
        if (abilityUseData.ability.beforeUse) {
            beforeUseEffects = beforeUseEffects.concat(abilityUseData.ability.beforeUse);
        }
        return getEffectTemplatesWithAttachedEffects(beforeUseEffects);
    }
    function getAbilityUseEffectTemplates(abilityUseData) {
        var abilityUseEffects = [];
        abilityUseEffects.push(abilityUseData.ability.mainEffect);
        if (abilityUseData.ability.secondaryEffects) {
            abilityUseEffects = abilityUseEffects.concat(abilityUseData.ability.secondaryEffects);
        }
        return getEffectTemplatesWithAttachedEffects(abilityUseEffects);
    }
    function getAfterAbilityUseEffectTemplates(abilityUseData) {
        var afterUseEffects = [];
        if (abilityUseData.ability.afterUse) {
            afterUseEffects = afterUseEffects.concat(abilityUseData.ability.afterUse);
        }
        return getEffectTemplatesWithAttachedEffects(afterUseEffects);
    }
});
define("src/battleAbilityUsage", ["require", "exports", "src/battleAbilityProcessing"], function (require, exports, battleAbilityProcessing_1) {
    "use strict";
    function useAbility(battle, ability, user, target, getEffects) {
        var effectDataByPhase = battleAbilityProcessing_1.getAbilityEffectDataByPhase(battle, {
            ability: ability,
            user: user,
            intendedTarget: target
        });
        var useData = executeFullAbilityEffects(battle, effectDataByPhase, getEffects);
        return useData;
    }
    exports.useAbility = useAbility;
    function executeFullAbilityEffects(battle, abilityEffectData, getUseEffects) {
        var beforeUse = executeMultipleEffects(battle, abilityEffectData.beforeUse, getUseEffects);
        var abilityEffects = executeMultipleEffects(battle, abilityEffectData.abilityEffects, getUseEffects);
        var afterUse = executeMultipleEffects(battle, abilityEffectData.afterUse, getUseEffects);
        if (getUseEffects) {
            return beforeUse.concat(abilityEffects, afterUse);
        }
        else {
            return null;
        }
    }
    function executeMultipleEffects(battle, abilityEffectData, getUseEffects) {
        if (getUseEffects) {
            var useEffects = [];
            for (var i = 0; i < abilityEffectData.length; i++) {
                var useEffect = executeAbilityEffectDataAndGetUseEffect(battle, abilityEffectData[i]);
                if (useEffect) {
                    useEffects.push(useEffect);
                }
            }
            return useEffects;
        }
        else {
            for (var i = 0; i < abilityEffectData.length; i++) {
                executeAbilityEffectData(battle, abilityEffectData[i]);
            }
        }
    }
    function getUnitDisplayData(unit) {
        return ({
            health: unit.currentHealth,
            guardAmount: unit.battleStats.guardAmount,
            guardType: unit.battleStats.guardCoverage,
            actionPoints: unit.battleStats.currentActionPoints,
            isPreparing: Boolean(unit.battleStats.queuedAction),
            isAnnihilated: unit.battleStats.isAnnihilated
        });
    }
    function shouldEffectActionTrigger(abilityEffectData) {
        if (!abilityEffectData.trigger) {
            return true;
        }
        return abilityEffectData.trigger(abilityEffectData.user, abilityEffectData.target);
    }
    function executeAbilityEffectData(battle, abilityEffectData) {
        if (!shouldEffectActionTrigger(abilityEffectData)) {
            return false;
        }
        abilityEffectData.templateEffect.action.executeAction(abilityEffectData.user, abilityEffectData.target, battle, abilityEffectData.templateEffect.data);
        return true;
    }
    function executeAbilityEffectDataAndGetUseEffect(battle, abilityEffectData) {
        var didTriggerAction = executeAbilityEffectData(battle, abilityEffectData);
        if (!didTriggerAction) {
            return null;
        }
        var unitDisplayData = {};
        unitDisplayData[abilityEffectData.user.id] = getUnitDisplayData(abilityEffectData.user);
        unitDisplayData[abilityEffectData.target.id] = getUnitDisplayData(abilityEffectData.target);
        return ({
            actionName: abilityEffectData.templateEffect.action.name,
            unitDisplayDataAfterUsingById: unitDisplayData,
            sfx: abilityEffectData.templateEffect.sfx,
            sfxUser: abilityEffectData.user,
            sfxTarget: abilityEffectData.target
        });
    }
});
define("src/MCTreeNode", ["require", "exports", "src/App", "src/utility", "src/battleAbilityUsage", "src/battleAbilityTargeting"], function (require, exports, App_7, utility_5, battleAbilityUsage_1, battleAbilityTargeting_2) {
    "use strict";
    var MCTreeNode = (function () {
        function MCTreeNode(battle, move) {
            this.depth = 0;
            this.children = [];
            this.visits = 0;
            this.wins = 0;
            this.winRate = 0;
            this.totalScore = 0;
            this.averageScore = 0;
            this.uctIsDirty = true;
            this.battle = battle;
            this.sideId = battle.activeUnit.battleStats.side;
            this.move = move;
            this.isBetweenAI = battle.side1Player.isAI && battle.side2Player.isAI;
            this.currentScore = battle.getEvaluation();
        }
        MCTreeNode.prototype.getPossibleMoves = function () {
            if (!this.battle.activeUnit) {
                return [];
            }
            var targets = battleAbilityTargeting_2.getTargetsForAllAbilities(this.battle, this.battle.activeUnit);
            var actions = [];
            for (var id in targets) {
                var targetActions = targets[id];
                for (var i = 0; i < targetActions.length; i++) {
                    if (!this.isBetweenAI || !targetActions[i].disableInAIBattles) {
                        actions.push({
                            targetId: parseInt(id),
                            ability: targetActions[i]
                        });
                    }
                }
            }
            return actions;
        };
        MCTreeNode.prototype.addChild = function (possibleMovesIndex) {
            if (!this.possibleMoves) {
                this.possibleMoves = this.getPossibleMoves();
            }
            if (isFinite(possibleMovesIndex)) {
                var move = this.possibleMoves.splice(possibleMovesIndex, 1)[0];
            }
            else {
                var move = this.possibleMoves.pop();
            }
            var battle = this.battle.makeVirtualClone();
            var child = new MCTreeNode(battle, move);
            child.parent = this;
            child.depth = this.depth + 1;
            this.children.push(child);
            battleAbilityUsage_1.useAbility(battle, move.ability, battle.activeUnit, battle.unitsById[move.targetId], false);
            child.currentScore = battle.getEvaluation();
            battle.endTurn();
            return child;
        };
        MCTreeNode.prototype.getChildForMove = function (move) {
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                if (child.move.targetId === move.targetId &&
                    child.move.ability.type === move.ability.type) {
                    return child;
                }
            }
            if (!this.possibleMoves) {
                this.possibleMoves = this.getPossibleMoves();
            }
            for (var i = 0; i < this.possibleMoves.length; i++) {
                var possibleMove = this.possibleMoves[i];
                if (possibleMove.targetId === move.targetId &&
                    possibleMove.ability.type === move.ability.type) {
                    return this.addChild(i);
                }
            }
            return null;
        };
        MCTreeNode.prototype.updateResult = function (result) {
            this.visits++;
            this.totalScore += result;
            if (this.sideId === "side1") {
                if (result > 0)
                    this.wins++;
            }
            if (this.sideId === "side2") {
                if (result < 0)
                    this.wins++;
            }
            this.averageScore = this.totalScore / this.visits;
            this.winRate = this.wins / this.visits;
            this.uctIsDirty = true;
            if (this.parent)
                this.parent.updateResult(result);
        };
        MCTreeNode.prototype.pickRandomAbilityAndTarget = function (actions) {
            var prioritiesByAbilityAndTarget = {};
            for (var targetId in actions) {
                var abilities = actions[targetId];
                for (var i = 0; i < abilities.length; i++) {
                    var priority = isFinite(abilities[i].AIEvaluationPriority) ? abilities[i].AIEvaluationPriority : 1;
                    prioritiesByAbilityAndTarget["" + targetId + ":" + abilities[i].type] = priority;
                }
            }
            var selected = utility_5.getRandomKeyWithWeights(prioritiesByAbilityAndTarget);
            var separatorIndex = selected.indexOf(":");
            return ({
                targetId: parseInt(selected.slice(0, separatorIndex)),
                abilityType: selected.slice(separatorIndex + 1)
            });
        };
        MCTreeNode.prototype.simulateOnce = function (battle) {
            var actions = battleAbilityTargeting_2.getTargetsForAllAbilities(battle, battle.activeUnit);
            var targetData = this.pickRandomAbilityAndTarget(actions);
            var ability = App_7.default.moduleData.Templates.Abilities[targetData.abilityType];
            var target = battle.unitsById[targetData.targetId];
            battleAbilityUsage_1.useAbility(battle, ability, battle.activeUnit, target, false);
            battle.endTurn();
        };
        MCTreeNode.prototype.simulateToEnd = function () {
            var battle = this.battle.makeVirtualClone();
            while (!battle.ended) {
                this.simulateOnce(battle);
            }
            this.updateResult(battle.getEvaluation());
        };
        MCTreeNode.prototype.clearResult = function () {
            this.visits = 0;
            this.wins = 0;
            this.averageScore = 0;
            this.totalScore = 0;
        };
        MCTreeNode.prototype.getCombinedScore = function () {
            var sign = this.sideId === "side1" ? 1 : -1;
            var baseScore = this.averageScore * sign / 2;
            var winRate = this.winRate;
            var aiAdjust = this.move.ability.AIScoreAdjust || 0;
            return (baseScore + winRate) + aiAdjust * 1.5;
        };
        MCTreeNode.prototype.setUct = function () {
            if (!this.parent) {
                this.uctEvaluation = -1;
                this.uctIsDirty = false;
                return;
            }
            this.uctEvaluation = this.getCombinedScore() + Math.sqrt(2 * Math.log(this.parent.visits) / this.visits);
            if (this.move.ability.AIEvaluationPriority) {
                this.uctEvaluation *= this.move.ability.AIEvaluationPriority;
            }
            this.uctIsDirty = false;
        };
        MCTreeNode.prototype.getHighestUctChild = function () {
            var highest = this.children[0];
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                if (child.uctIsDirty) {
                    child.setUct();
                }
                if (child.uctEvaluation > highest.uctEvaluation) {
                    highest = child;
                }
            }
            return highest;
        };
        MCTreeNode.prototype.getRecursiveBestUctChild = function () {
            if (this.battle.ended) {
                return this;
            }
            if (!this.possibleMoves) {
                this.possibleMoves = this.getPossibleMoves();
            }
            if (this.possibleMoves && this.possibleMoves.length > 0) {
                return this.addChild();
            }
            else if (this.children.length === 1) {
                return this.children[0];
            }
            else if (this.children.length > 1) {
                return this.getHighestUctChild().getRecursiveBestUctChild();
            }
        };
        return MCTreeNode;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MCTreeNode;
});
define("src/MCTree", ["require", "exports", "src/MCTreeNode"], function (require, exports, MCTreeNode_1) {
    "use strict";
    var MCTree = (function () {
        function MCTree(battle, sideId, fastMode) {
            if (fastMode === void 0) { fastMode = false; }
            var cloned = battle.makeVirtualClone();
            this.rootNode = new MCTreeNode_1.default(cloned);
            this.actualBattle = battle;
            this.sideId = sideId;
            if (fastMode) {
                this.countVisitsAsIterations = true;
            }
        }
        MCTree.prototype.sortByWinRateFN = function (a, b) {
            return b.winRate - a.winRate;
        };
        MCTree.prototype.sortByCombinedScoreFN = function (a, b) {
            if (a.sideId !== b.sideId)
                debugger;
            return b.getCombinedScore() - a.getCombinedScore();
        };
        MCTree.prototype.evaluate = function (iterations) {
            var root = this.rootNode;
            if (!root.possibleMoves)
                root.possibleMoves = root.getPossibleMoves();
            if (this.rootSimulationNeedsToBeRemade()) {
                this.remakeSimulation();
                root = this.rootNode;
            }
            var iterationStart = this.countVisitsAsIterations ? Math.min(iterations - 1, root.visits - root.depth) : 0;
            for (var i = iterationStart; i < iterations; i++) {
                var toSimulateFrom = root.getRecursiveBestUctChild();
                toSimulateFrom.simulateToEnd();
            }
            var sortedMoves = root.children.sort(this.sortByCombinedScoreFN.bind(this));
            var best = sortedMoves[0];
            if (!best) {
                debugger;
            }
            return best;
        };
        MCTree.prototype.getChildForMove = function (move) {
            return this.rootNode.getChildForMove(move);
        };
        MCTree.prototype.rootSimulationNeedsToBeRemade = function () {
            var scoreVariationTolerance = 0.1;
            var scoreVariance = Math.abs(this.actualBattle.getEvaluation() - this.rootNode.currentScore);
            if (scoreVariance > scoreVariationTolerance) {
                return true;
            }
            else if (this.actualBattle.activeUnit !== this.rootNode.battle.activeUnit) {
                return true;
            }
            else if (this.rootNode.children.length === 0) {
                if (!this.rootNode.possibleMoves) {
                    this.rootNode.possibleMoves = this.rootNode.getPossibleMoves();
                }
                if (this.rootNode.possibleMoves.length === 0) {
                    return true;
                }
            }
            return false;
        };
        MCTree.prototype.remakeSimulation = function () {
            this.rootNode = new MCTreeNode_1.default(this.actualBattle.makeVirtualClone());
            return this.rootNode;
        };
        MCTree.prototype.advanceMove = function (move) {
            this.rootNode = this.getChildForMove(move);
            if (!this.rootNode) {
                this.remakeSimulation();
            }
        };
        MCTree.prototype.getBestMoveAndAdvance = function (iterations) {
            var best = this.evaluate(iterations);
            this.rootNode = best;
            return best.move;
        };
        MCTree.prototype.printToConsole = function (nodes) {
            var consoleRows = [];
            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                var row = {
                    visits: node.visits,
                    uctEvaluation: node.uctEvaluation,
                    winRate: node.winRate,
                    currentScore: node.currentScore,
                    averageScore: node.averageScore,
                    finalScore: node.getCombinedScore(),
                    abilityName: node.move.ability.displayName,
                    targetId: node.move.targetId
                };
                consoleRows.push(row);
            }
            var _ = window;
            if (_.console.table) {
                _.console.table(consoleRows);
            }
            console.log(nodes);
        };
        return MCTree;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MCTree;
});
define("src/options", ["require", "exports", "src/eventManager", "src/utility"], function (require, exports, eventManager_3, utility_6) {
    "use strict";
    var OptionsCategories = [
        "battleAnimationTiming", "debugMode", "debugOptions", "ui", "display"
    ];
    var defaultOptionsValues = {
        battleAnimationTiming: {
            before: 750,
            effectDuration: 1,
            after: 1500,
            unitEnter: 200,
            unitExit: 100
        },
        debugMode: false,
        debugOptions: {
            battleSimulationDepth: 20
        },
        ui: {
            noHamburger: false
        },
        display: {
            borderWidth: 8
        },
    };
    var Options = (function () {
        function Options() {
            this.setDefaults();
        }
        Options.prototype.setDefaultForCategory = function (category) {
            var shouldReRenderUI = false;
            var shouldReRenderMap = false;
            switch (category) {
                case "battleAnimationTiming":
                    this.battleAnimationTiming = defaultOptionsValues.battleAnimationTiming;
                    break;
                case "debugMode":
                    if (this.debugMode !== defaultOptionsValues.debugMode) {
                        shouldReRenderUI = true;
                    }
                    this.debugMode = defaultOptionsValues.debugMode;
                    break;
                case "debugOptions":
                    this.debugOptions = defaultOptionsValues.debugOptions;
                    break;
                case "ui":
                    this.ui = defaultOptionsValues.ui;
                    break;
                case "display":
                    if (this.display && this.display.borderWidth !== defaultOptionsValues.display.borderWidth) {
                        shouldReRenderMap = true;
                    }
                    this.display = defaultOptionsValues.display;
                    break;
            }
            if (shouldReRenderUI) {
                eventManager_3.default.dispatchEvent("renderUI");
            }
            if (shouldReRenderMap) {
                eventManager_3.default.dispatchEvent("renderMap");
            }
        };
        Options.prototype.setDefaults = function () {
            var _this = this;
            OptionsCategories.forEach(function (category) {
                _this.setDefaultForCategory(category);
            });
        };
        Options.prototype.save = function (slot) {
            if (slot === void 0) { slot = 0; }
            var data = JSON.stringify({
                options: this.serialize(),
                date: new Date()
            });
            var saveName = "Options." + slot;
            localStorage.setItem(saveName, data);
        };
        Options.prototype.load = function (slot) {
            this.setDefaults();
            var parsedData = this.getParsedDataForSlot(slot);
            var parsedOptions = this.serialize();
            if (parsedData) {
                var optionsToResetIfSetEarlierThan = {
                    "battleAnimationTiming": Date.UTC(2016, 1, 25, 10, 50)
                };
                var dateOptionsWereSaved = Date.parse(parsedData.date);
                for (var key in parsedData.options) {
                    if (parsedOptions[key] !== undefined) {
                        if (optionsToResetIfSetEarlierThan[key] && dateOptionsWereSaved <= optionsToResetIfSetEarlierThan[key]) {
                            console.log("Reset option: " + key);
                        }
                        else {
                            parsedOptions[key] = utility_6.deepMerge(parsedOptions[key], parsedData.options[key]);
                        }
                    }
                }
                this.deSerialize(parsedOptions);
            }
        };
        Options.prototype.getParsedDataForSlot = function (slot) {
            var baseString = "Options.";
            var parsedData;
            if (isFinite(slot)) {
                if (!localStorage[baseString + slot]) {
                    throw new Error("No options saved in that slot");
                }
                parsedData = JSON.parse(localStorage.getItem(baseString + slot));
            }
            else {
                parsedData = utility_6.getMatchingLocalstorageItemsByDate(baseString)[0];
            }
            return parsedData;
        };
        Options.prototype.serialize = function () {
            return ({
                battleAnimationTiming: this.battleAnimationTiming,
                debugMode: this.debugMode,
                debugOptions: this.debugOptions,
                ui: this.ui,
                display: this.display
            });
        };
        Options.prototype.deSerialize = function (data) {
            this.battleAnimationTiming = utility_6.deepMerge(this.battleAnimationTiming, data.battleAnimationTiming, true);
            this.debugMode = utility_6.deepMerge(this.debugMode, data.debugMode, true);
            this.debugOptions = utility_6.deepMerge(this.debugOptions, data.debugOptions, true);
            this.ui = utility_6.deepMerge(this.ui, data.ui, true);
            this.display = utility_6.deepMerge(this.display, data.display, true);
        };
        return Options;
    }());
    var options = new Options();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = options;
});
define("src/BattleSimulator", ["require", "exports", "src/MCTree", "src/options", "src/battleAbilityUsage"], function (require, exports, MCTree_1, options_1, battleAbilityUsage_2) {
    "use strict";
    var BattleSimulator = (function () {
        function BattleSimulator(battle) {
            this.hasEnded = false;
            this.battle = battle;
            battle.isSimulated = true;
            if (!battle.ended) {
                this.tree = new MCTree_1.default(this.battle, this.battle.activeUnit.battleStats.side, true);
            }
        }
        BattleSimulator.prototype.simulateBattle = function () {
            while (!this.battle.ended) {
                this.simulateMove();
            }
        };
        BattleSimulator.prototype.simulateMove = function () {
            if (!this.battle.activeUnit || this.battle.ended) {
                throw new Error("Simulated battle already ended");
            }
            var move = this.tree.getBestMoveAndAdvance(options_1.default.debugOptions.battleSimulationDepth);
            var target = this.battle.unitsById[move.targetId];
            this.simulateAbility(move.ability, target);
            this.battle.endTurn();
        };
        BattleSimulator.prototype.simulateAbility = function (ability, target) {
            battleAbilityUsage_2.useAbility(this.battle, ability, this.battle.activeUnit, target, false);
        };
        BattleSimulator.prototype.getBattleEndData = function () {
            if (!this.battle.ended) {
                throw new Error("Simulated battle hasn't ended yet");
            }
            var captured = this.battle.capturedUnits;
            var destroyed = this.battle.deadUnits;
            var victor = this.battle.getVictor();
        };
        BattleSimulator.prototype.finishBattle = function () {
            this.battle.finishBattle();
        };
        return BattleSimulator;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BattleSimulator;
});
define("src/DiplomacyState", ["require", "exports"], function (require, exports) {
    "use strict";
    var DiplomacyState;
    (function (DiplomacyState) {
        DiplomacyState[DiplomacyState["peace"] = 0] = "peace";
        DiplomacyState[DiplomacyState["coldWar"] = 1] = "coldWar";
        DiplomacyState[DiplomacyState["war"] = 2] = "war";
    })(DiplomacyState || (DiplomacyState = {}));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = DiplomacyState;
});
define("src/AttitudeModifier", ["require", "exports", "src/utility"], function (require, exports, utility_7) {
    "use strict";
    var AttitudeModifier = (function () {
        function AttitudeModifier(props) {
            this.isOverRidden = false;
            this.template = props.template;
            this.startTurn = props.startTurn;
            this.currentTurn = this.startTurn;
            if (isFinite(props.endTurn)) {
                this.endTurn = props.endTurn;
            }
            else if (isFinite(this.template.duration)) {
                if (this.template.duration < 0) {
                    this.endTurn = -1;
                }
                else {
                    this.endTurn = this.startTurn + this.template.duration;
                }
            }
            else {
                throw new Error("Attitude modifier has no duration or end turn set");
            }
            if (isFinite(this.template.constantEffect)) {
                this.strength = this.template.constantEffect;
            }
            else {
                this.strength = props.strength;
            }
        }
        AttitudeModifier.prototype.setStrength = function (evaluation) {
            if (this.template.constantEffect) {
                this.strength = this.template.constantEffect;
            }
            else if (this.template.getEffectFromEvaluation) {
                this.strength = this.template.getEffectFromEvaluation(evaluation);
            }
            else {
                throw new Error("Attitude modifier has no constant effect " +
                    "or effect from evaluation defined");
            }
            return this.strength;
        };
        AttitudeModifier.prototype.getFreshness = function (currentTurn) {
            if (currentTurn === void 0) { currentTurn = this.currentTurn; }
            if (this.endTurn < 0)
                return 1;
            else {
                return 1 - utility_7.getRelativeValue(currentTurn, this.startTurn, this.endTurn);
            }
        };
        AttitudeModifier.prototype.refresh = function (newModifier) {
            this.startTurn = newModifier.startTurn;
            this.endTurn = newModifier.endTurn;
            this.strength = newModifier.strength;
        };
        AttitudeModifier.prototype.getAdjustedStrength = function (currentTurn) {
            if (currentTurn === void 0) { currentTurn = this.currentTurn; }
            var freshenss = this.getFreshness(currentTurn);
            return Math.round(this.strength * freshenss);
        };
        AttitudeModifier.prototype.hasExpired = function (currentTurn) {
            if (currentTurn === void 0) { currentTurn = this.currentTurn; }
            return (this.endTurn >= 0 && currentTurn > this.endTurn);
        };
        AttitudeModifier.prototype.shouldEnd = function (evaluation) {
            if (this.hasExpired(evaluation.currentTurn)) {
                return true;
            }
            else if (this.template.endCondition) {
                return this.template.endCondition(evaluation);
            }
            else if (this.template.duration < 0 && this.template.startCondition) {
                return !this.template.startCondition(evaluation);
            }
            else {
                return false;
            }
        };
        AttitudeModifier.prototype.serialize = function () {
            var data = {
                templateType: this.template.type,
                startTurn: this.startTurn,
                endTurn: this.endTurn,
                strength: this.strength
            };
            return data;
        };
        return AttitudeModifier;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AttitudeModifier;
});
define("src/DiplomacyStatus", ["require", "exports", "src/App", "src/eventManager", "src/AttitudeModifier", "src/DiplomacyState"], function (require, exports, App_8, eventManager_4, AttitudeModifier_1, DiplomacyState_1) {
    "use strict";
    var DiplomacyStatus = (function () {
        function DiplomacyStatus(player) {
            this.metPlayers = {};
            this.statusByPlayer = {};
            this.attitudeModifiersByPlayer = {};
            this.listeners = {};
            this.player = player;
            this.addEventListeners();
        }
        DiplomacyStatus.prototype.addEventListeners = function () {
            for (var key in App_8.default.moduleData.Templates.AttitudeModifiers) {
                var template = App_8.default.moduleData.Templates.AttitudeModifiers[key];
                if (template.triggers) {
                    for (var i = 0; i < template.triggers.length; i++) {
                        var listenerKey = template.triggers[i];
                        var listener = eventManager_4.default.addEventListener(listenerKey, this.triggerAttitudeModifier.bind(this, template));
                        if (!this.listeners[listenerKey]) {
                            this.listeners[listenerKey] = [];
                        }
                        this.listeners[listenerKey].push(listener);
                    }
                }
            }
        };
        DiplomacyStatus.prototype.destroy = function () {
            for (var key in this.listeners) {
                for (var i = 0; i < this.listeners[key].length; i++) {
                    eventManager_4.default.removeEventListener(key, this.listeners[key][i]);
                }
            }
        };
        DiplomacyStatus.prototype.removePlayer = function (player) {
            ["metPlayers", "statusByPlayer", "attitudeModifiersByPlayer"].forEach(function (prop) {
                this[prop][player.id] = null;
                delete this[prop][player.id];
            }.bind(this));
        };
        DiplomacyStatus.prototype.getBaseOpinion = function () {
            if (isFinite(this.baseOpinion))
                return this.baseOpinion;
            var friendliness = this.player.AIController.personality.friendliness;
            this.baseOpinion = Math.round((friendliness - 0.5) * 10);
            return this.baseOpinion;
        };
        DiplomacyStatus.prototype.updateAttitudes = function () {
            if (!this.player.AIController) {
                return;
            }
            this.player.AIController.diplomacyAI.setAttitudes();
        };
        DiplomacyStatus.prototype.handleDiplomaticStatusUpdate = function () {
            eventManager_4.default.dispatchEvent("diplomaticStatusUpdated");
        };
        DiplomacyStatus.prototype.getOpinionOf = function (player) {
            var baseOpinion = this.getBaseOpinion();
            var attitudeModifiers = this.attitudeModifiersByPlayer[player.id];
            var modifierOpinion = 0;
            for (var i = 0; i < attitudeModifiers.length; i++) {
                modifierOpinion += attitudeModifiers[i].getAdjustedStrength();
            }
            return Math.round(baseOpinion + modifierOpinion);
        };
        DiplomacyStatus.prototype.getUnMetPlayerCount = function () {
            return App_8.default.game.playerOrder.length - Object.keys(this.metPlayers).length;
        };
        DiplomacyStatus.prototype.meetPlayer = function (player) {
            if (this.metPlayers[player.id] || player === this.player)
                return;
            else {
                this.metPlayers[player.id] = player;
                this.statusByPlayer[player.id] = DiplomacyState_1.default.coldWar;
                this.attitudeModifiersByPlayer[player.id] = [];
                player.diplomacyStatus.meetPlayer(this.player);
            }
        };
        DiplomacyStatus.prototype.canDeclareWarOn = function (player) {
            return (this.statusByPlayer[player.id] < DiplomacyState_1.default.war);
        };
        DiplomacyStatus.prototype.canMakePeaceWith = function (player) {
            return (this.statusByPlayer[player.id] > DiplomacyState_1.default.peace);
        };
        DiplomacyStatus.prototype.declareWarOn = function (player) {
            if (this.statusByPlayer[player.id] >= DiplomacyState_1.default.war) {
                console.error("Players " + this.player.id + " and " + player.id + " are already at war");
                return;
            }
            this.statusByPlayer[player.id] = DiplomacyState_1.default.war;
            player.diplomacyStatus.statusByPlayer[this.player.id] = DiplomacyState_1.default.war;
            eventManager_4.default.dispatchEvent("addDeclaredWarAttitudeModifier", player, this.player);
            var playersAreRelevantToHuman = true;
            [this.player, player].forEach(function (p) {
                if (App_8.default.humanPlayer !== p && !App_8.default.humanPlayer.diplomacyStatus.metPlayers[p.id]) {
                    playersAreRelevantToHuman = false;
                }
            });
            if (playersAreRelevantToHuman) {
                eventManager_4.default.dispatchEvent("makeWarDeclarationNotification", {
                    player1: this.player,
                    player2: player
                });
            }
        };
        DiplomacyStatus.prototype.makePeaceWith = function (player) {
            if (this.statusByPlayer[player.id] <= DiplomacyState_1.default.peace) {
                throw new Error("Players " + this.player.id + " and " + player.id + " are already at peace");
            }
            this.statusByPlayer[player.id] = DiplomacyState_1.default.peace;
            player.diplomacyStatus.statusByPlayer[this.player.id] = DiplomacyState_1.default.peace;
            player.diplomacyStatus.updateAttitudes();
        };
        DiplomacyStatus.prototype.canAttackFleetOfPlayer = function (player) {
            if (player.isIndependent)
                return true;
            if (this.statusByPlayer[player.id] >= DiplomacyState_1.default.coldWar) {
                return true;
            }
            return false;
        };
        DiplomacyStatus.prototype.canAttackBuildingOfPlayer = function (player) {
            if (player.isIndependent)
                return true;
            if (this.statusByPlayer[player.id] >= DiplomacyState_1.default.war) {
                return true;
            }
            return false;
        };
        DiplomacyStatus.prototype.getModifierOfSameType = function (player, modifier) {
            var modifiers = this.attitudeModifiersByPlayer[player.id];
            for (var i = 0; i < modifiers.length; i++) {
                if (modifiers[i].template.type === modifier.template.type) {
                    return modifiers[i];
                }
            }
            return null;
        };
        DiplomacyStatus.prototype.addAttitudeModifier = function (player, modifier) {
            if (!this.attitudeModifiersByPlayer[player.id]) {
                this.attitudeModifiersByPlayer[player.id] = [];
            }
            var sameType = this.getModifierOfSameType(player, modifier);
            if (sameType) {
                sameType.refresh(modifier);
                return;
            }
            this.attitudeModifiersByPlayer[player.id].push(modifier);
            this.updateAttitudes();
        };
        DiplomacyStatus.prototype.triggerAttitudeModifier = function (template, player, source) {
            if (player !== this.player)
                return;
            var modifier = new AttitudeModifier_1.default({
                template: template,
                startTurn: App_8.default.game.turnNumber
            });
            this.addAttitudeModifier(source, modifier);
        };
        DiplomacyStatus.prototype.processAttitudeModifiersForPlayer = function (player, evaluation) {
            var modifiersByPlayer = this.attitudeModifiersByPlayer;
            var allModifiers = App_8.default.moduleData.Templates.AttitudeModifiers;
            for (var playerId in modifiersByPlayer)
                var playerModifiers = modifiersByPlayer[player.id];
            var activeModifiers = {};
            var modifiersAdded = {};
            var modifiersRemoved = {};
            for (var i = playerModifiers.length - 1; i >= 0; i--) {
                var modifier = playerModifiers[i];
                if (modifier.shouldEnd(evaluation)) {
                    playerModifiers.splice(i, 1);
                    modifiersRemoved[modifier.template.type] = modifier;
                }
                else {
                    activeModifiers[modifier.template.type] = modifier;
                }
            }
            for (var modifierType in allModifiers) {
                var template = allModifiers[modifierType];
                var modifier;
                modifier = activeModifiers[template.type];
                var alreadyHasModifierOfType = modifier;
                if (!alreadyHasModifierOfType && !template.triggers) {
                    if (!template.startCondition) {
                        throw new Error("Attitude modifier has no start condition or triggers");
                    }
                    else {
                        var shouldStart = template.startCondition(evaluation);
                        if (shouldStart) {
                            modifier = new AttitudeModifier_1.default({
                                template: template,
                                startTurn: evaluation.currentTurn
                            });
                            playerModifiers.push(modifier);
                            modifiersAdded[template.type] = modifier;
                        }
                    }
                }
                if (modifier) {
                    modifier.currentTurn = evaluation.currentTurn;
                    modifier.setStrength(evaluation);
                }
            }
        };
        DiplomacyStatus.prototype.serialize = function () {
            var metPlayerIds = [];
            for (var playerId in this.metPlayers) {
                metPlayerIds.push(this.metPlayers[playerId].id);
            }
            var attitudeModifiersByPlayer = {};
            for (var playerId in this.attitudeModifiersByPlayer) {
                var serializedModifiers = this.attitudeModifiersByPlayer[playerId].map(function (modifier) {
                    return modifier.serialize();
                });
                attitudeModifiersByPlayer[playerId] = serializedModifiers;
            }
            var data = {
                metPlayerIds: metPlayerIds,
                statusByPlayer: this.statusByPlayer,
                attitudeModifiersByPlayer: attitudeModifiersByPlayer
            };
            return data;
        };
        return DiplomacyStatus;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = DiplomacyStatus;
});
define("src/Manufactory", ["require", "exports", "src/App", "src/Unit", "src/Item", "src/Fleet", "src/eventManager"], function (require, exports, App_9, Unit_1, Item_1, Fleet_1, eventManager_5) {
    "use strict";
    var Manufactory = (function () {
        function Manufactory(star, serializedData) {
            this.buildQueue = [];
            this.unitStatsModifier = 1;
            this.unitHealthModifier = 1;
            this.star = star;
            this.player = star.owner;
            if (serializedData) {
                this.makeFromData(serializedData);
            }
            else {
                this.capacity = App_9.default.moduleData.ruleSet.manufactory.startingCapacity;
                this.maxCapacity = App_9.default.moduleData.ruleSet.manufactory.maxCapacity;
            }
        }
        Manufactory.prototype.makeFromData = function (data) {
            this.capacity = data.capacity;
            this.maxCapacity = data.maxCapacity;
            this.unitStatsModifier = data.unitStatsModifier;
            this.unitHealthModifier = data.unitHealthModifier;
            this.buildQueue = data.buildQueue.map(function (savedThing) {
                var templatesString;
                switch (savedThing.type) {
                    case "unit":
                        {
                            templatesString = "Units";
                            break;
                        }
                    case "item":
                        {
                            templatesString = "Items";
                        }
                }
                return ({
                    type: savedThing.type,
                    template: App_9.default.moduleData.Templates[templatesString][savedThing.templateType]
                });
            });
        };
        Manufactory.prototype.queueIsFull = function () {
            return this.buildQueue.length >= this.capacity;
        };
        Manufactory.prototype.addThingToQueue = function (template, type) {
            this.buildQueue.push({ type: type, template: template });
            this.player.money -= template.buildCost;
        };
        Manufactory.prototype.removeThingAtIndex = function (index) {
            var template = this.buildQueue[index].template;
            this.player.money += template.buildCost;
            this.buildQueue.splice(index, 1);
        };
        Manufactory.prototype.buildAllThings = function () {
            var units = [];
            var toBuild = this.buildQueue.slice(0, this.capacity);
            this.buildQueue = this.buildQueue.slice(this.capacity);
            while (toBuild.length > 0) {
                var thingData = toBuild.pop();
                switch (thingData.type) {
                    case "unit":
                        {
                            var unitTemplate = thingData.template;
                            var unit = new Unit_1.default(unitTemplate);
                            unit.setAttributes(this.unitStatsModifier);
                            unit.setBaseHealth(this.unitHealthModifier);
                            units.push(unit);
                            this.player.addUnit(unit);
                            break;
                        }
                    case "item":
                        {
                            var itemTemplate = thingData.template;
                            var item = new Item_1.default(itemTemplate);
                            this.player.addItem(item);
                            break;
                        }
                }
            }
            if (units.length > 0) {
                var fleet = new Fleet_1.default(this.player, units, this.star);
            }
            if (!this.player.isAI) {
                eventManager_5.default.dispatchEvent("playerManufactoryBuiltThings");
            }
        };
        Manufactory.prototype.getLocalUnitTypes = function () {
            var manufacturable = [];
            var potential = [];
            for (var i = 0; i < this.star.buildableUnitTypes.length; i++) {
                var type = this.star.buildableUnitTypes[i];
                if (!type.technologyRequirements || this.player.meetsTechnologyRequirements(type.technologyRequirements)) {
                    manufacturable.push(type);
                }
                else {
                    potential.push(type);
                }
            }
            return ({
                manufacturable: manufacturable,
                potential: potential
            });
        };
        Manufactory.prototype.getLocalItemTypes = function () {
            var manufacturable = [];
            var potential = [];
            return ({
                manufacturable: manufacturable,
                potential: potential
            });
        };
        Manufactory.prototype.getManufacturableThingsForType = function (type) {
            switch (type) {
                case "item":
                    {
                        return this.getLocalItemTypes().manufacturable;
                    }
                case "unit":
                    {
                        return this.getLocalUnitTypes().manufacturable;
                    }
            }
        };
        Manufactory.prototype.canManufactureThing = function (template, type) {
            var manufacturableThings = this.getManufacturableThingsForType(type);
            return manufacturableThings.indexOf(template) !== -1;
        };
        Manufactory.prototype.handleOwnerChange = function () {
            while (this.buildQueue.length > 0) {
                this.removeThingAtIndex(this.buildQueue.length - 1);
            }
            this.player = this.star.owner;
            this.capacity = Math.max(1, this.capacity - 1);
        };
        Manufactory.prototype.getCapacityUpgradeCost = function () {
            return App_9.default.moduleData.ruleSet.manufactory.buildCost * this.capacity;
        };
        Manufactory.prototype.upgradeCapacity = function (amount) {
            this.player.money -= this.getCapacityUpgradeCost();
            this.capacity = Math.min(this.capacity + amount, this.maxCapacity);
        };
        Manufactory.prototype.getUnitUpgradeCost = function () {
            var totalUpgrades = (this.unitStatsModifier + this.unitHealthModifier - 2) / 0.1;
            return Math.round((totalUpgrades + 1) * 100);
        };
        Manufactory.prototype.upgradeUnitStatsModifier = function (amount) {
            this.player.money -= this.getUnitUpgradeCost();
            this.unitStatsModifier += amount;
        };
        Manufactory.prototype.upgradeUnitHealthModifier = function (amount) {
            this.player.money -= this.getUnitUpgradeCost();
            this.unitHealthModifier += amount;
        };
        Manufactory.prototype.serialize = function () {
            var buildQueue = this.buildQueue.map(function (thingData) {
                return ({
                    type: thingData.type,
                    templateType: thingData.template.type
                });
            });
            return ({
                capacity: this.capacity,
                maxCapacity: this.maxCapacity,
                unitStatsModifier: this.unitStatsModifier,
                unitHealthModifier: this.unitHealthModifier,
                buildQueue: buildQueue
            });
        };
        return Manufactory;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Manufactory;
});
define("src/PlayerTechnology", ["require", "exports", "src/App", "src/eventManager"], function (require, exports, App_10, eventManager_6) {
    "use strict";
    var PlayerTechnology = (function () {
        function PlayerTechnology(getResearchSpeed, savedData) {
            this.tempOverflowedResearchAmount = 0;
            this.getResearchSpeed = getResearchSpeed;
            this.technologies = {};
            var totalTechnologies = Object.keys(App_10.default.moduleData.Templates.Technologies).length;
            for (var key in App_10.default.moduleData.Templates.Technologies) {
                var technology = App_10.default.moduleData.Templates.Technologies[key];
                this.technologies[key] =
                    {
                        technology: technology,
                        totalResearch: 0,
                        level: 0,
                        priority: undefined,
                        priorityIsLocked: false
                    };
                if (savedData && savedData[key]) {
                    this.addResearchTowardsTechnology(technology, savedData[key].totalResearch);
                    this.technologies[key].priority = savedData[key].priority;
                    this.technologies[key].priorityIsLocked = savedData[key].priorityIsLocked;
                }
            }
            this.initPriorities();
        }
        PlayerTechnology.prototype.initPriorities = function () {
            var priorityToAllocate = 1;
            var techsToInit = [];
            for (var key in this.technologies) {
                var techData = this.technologies[key];
                if (techData.priority === undefined) {
                    techsToInit.push(techData.technology);
                }
                else {
                    priorityToAllocate -= techData.priority;
                }
            }
            techsToInit.sort(function (a, b) {
                return b.maxLevel - a.maxLevel;
            });
            while (techsToInit.length > 0) {
                var averagePriority = priorityToAllocate / techsToInit.length;
                var technology = techsToInit.pop();
                var maxNeededPriority = this.getMaxNeededPriority(technology);
                var priorityForTech = Math.min(averagePriority, maxNeededPriority);
                this.technologies[technology.key].priority = priorityForTech;
                priorityToAllocate -= priorityForTech;
            }
        };
        PlayerTechnology.prototype.allocateResearchPoints = function (amount, iteration) {
            if (iteration === void 0) { iteration = 0; }
            var totalPriority = 0;
            for (var key in this.technologies) {
                totalPriority += this.technologies[key].priority;
            }
            for (var key in this.technologies) {
                var techData = this.technologies[key];
                var relativePriority = techData.priority / totalPriority;
                if (relativePriority > 0) {
                    this.addResearchTowardsTechnology(techData.technology, relativePriority * amount);
                }
            }
            if (this.tempOverflowedResearchAmount) {
                if (iteration > 10) {
                    throw new RangeError("Maximum call stack size exceeded");
                }
                this.allocateOverflowedResearchPoints(iteration);
            }
            else {
                this.capTechnologyPrioritiesToMaxNeeded();
            }
        };
        PlayerTechnology.prototype.allocateOverflowedResearchPoints = function (iteration) {
            if (iteration === void 0) { iteration = 0; }
            var overflow = this.tempOverflowedResearchAmount;
            this.tempOverflowedResearchAmount = 0;
            this.allocateResearchPoints(overflow, ++iteration);
        };
        PlayerTechnology.prototype.getResearchNeededForTechnologyLevel = function (level) {
            if (level <= 0)
                return 0;
            if (level === 1)
                return 40;
            var a = 20;
            var b = 40;
            var swap;
            var total = 0;
            for (var i = 0; i < level; i++) {
                swap = a;
                a = b;
                b = swap + b;
                total += a;
            }
            return total;
        };
        PlayerTechnology.prototype.addResearchTowardsTechnology = function (technology, amount) {
            var tech = this.technologies[technology.key];
            var overflow = 0;
            if (tech.level >= technology.maxLevel) {
                return;
            }
            else {
                tech.totalResearch += amount;
                while (tech.level < technology.maxLevel &&
                    this.getResearchNeededForTechnologyLevel(tech.level + 1) <= tech.totalResearch) {
                    tech.level++;
                }
                if (tech.level === technology.maxLevel) {
                    var neededForMaxLevel = this.getResearchNeededForTechnologyLevel(tech.level);
                    overflow += tech.totalResearch - neededForMaxLevel;
                    tech.totalResearch -= overflow;
                    this.setTechnologyPriority(technology, 0, true);
                    tech.priorityIsLocked = true;
                }
            }
            this.tempOverflowedResearchAmount += overflow;
        };
        PlayerTechnology.prototype.getMaxNeededPriority = function (technology) {
            var researchUntilMaxed = this.getResearchNeededForTechnologyLevel(technology.maxLevel) -
                this.technologies[technology.key].totalResearch;
            return researchUntilMaxed / this.getResearchSpeed();
        };
        PlayerTechnology.prototype.getOpenTechnologiesPriority = function () {
            var openPriority = 0;
            for (var key in this.technologies) {
                var techData = this.technologies[key];
                if (!techData.priorityIsLocked) {
                    openPriority += techData.priority;
                }
            }
            return openPriority;
        };
        PlayerTechnology.prototype.getRelativeOpenTechnologyPriority = function (technology) {
            var totalOpenPriority = this.getOpenTechnologiesPriority();
            if (this.technologies[technology.key].priorityIsLocked || !totalOpenPriority) {
                return 0;
            }
            return this.technologies[technology.key].priority / totalOpenPriority;
        };
        PlayerTechnology.prototype.setTechnologyPriority = function (technology, priority, force) {
            if (force === void 0) { force = false; }
            var remainingPriority = 1;
            var totalOtherPriority = 0;
            var totalOtherPriorityWasZero = false;
            var totalOthersCount = 0;
            for (var key in this.technologies) {
                if (key !== technology.key) {
                    if (this.technologies[key].priorityIsLocked) {
                        remainingPriority -= this.technologies[key].priority;
                    }
                    else {
                        totalOtherPriority += this.technologies[key].priority;
                        totalOthersCount++;
                    }
                }
            }
            if (totalOthersCount === 0) {
                if (force) {
                    this.technologies[technology.key].priority = priority;
                    eventManager_6.default.dispatchEvent("technologyPrioritiesUpdated");
                }
                return;
            }
            if (remainingPriority < 0.0001) {
                remainingPriority = 0;
            }
            if (priority > remainingPriority) {
                priority = remainingPriority;
            }
            var priorityNeededForMaxLevel = this.getMaxNeededPriority(technology);
            var maxNeededPriority = Math.min(priorityNeededForMaxLevel, priority);
            this.technologies[technology.key].priority = maxNeededPriority;
            remainingPriority -= maxNeededPriority;
            if (totalOtherPriority === 0) {
                totalOtherPriority = 1;
                totalOtherPriorityWasZero = true;
            }
            for (var key in this.technologies) {
                if (key !== technology.key && !this.technologies[key].priorityIsLocked) {
                    var techData = this.technologies[key];
                    if (totalOtherPriorityWasZero) {
                        techData.priority = 1 / totalOthersCount;
                    }
                    var maxNeededPriorityForOtherTech = this.getMaxNeededPriority(techData.technology);
                    var relativePriority = techData.priority / totalOtherPriority;
                    var reservedPriority = relativePriority * remainingPriority;
                    if (reservedPriority > maxNeededPriorityForOtherTech) {
                        techData.priority = maxNeededPriorityForOtherTech;
                        var priorityOverflow = reservedPriority - maxNeededPriorityForOtherTech;
                        remainingPriority += priorityOverflow;
                    }
                    else {
                        techData.priority = reservedPriority;
                    }
                }
            }
            eventManager_6.default.dispatchEvent("technologyPrioritiesUpdated");
        };
        PlayerTechnology.prototype.capTechnologyPrioritiesToMaxNeeded = function () {
            var overflowPriority = 0;
            for (var key in this.technologies) {
                var techData = this.technologies[key];
                var maxNeededPriorityForOtherTech = this.getMaxNeededPriority(techData.technology);
                if (techData.priority > maxNeededPriorityForOtherTech) {
                    overflowPriority += techData.priority - maxNeededPriorityForOtherTech;
                    this.setTechnologyPriority(techData.technology, maxNeededPriorityForOtherTech, true);
                    break;
                }
            }
        };
        PlayerTechnology.prototype.serialize = function () {
            var data = {};
            for (var key in this.technologies) {
                data[key] =
                    {
                        totalResearch: this.technologies[key].totalResearch,
                        priority: this.technologies[key].priority,
                        priorityIsLocked: this.technologies[key].priorityIsLocked
                    };
            }
            return data;
        };
        return PlayerTechnology;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = PlayerTechnology;
});
define("src/NotificationFilterState", ["require", "exports"], function (require, exports) {
    "use strict";
    var NotificationFilterState;
    (function (NotificationFilterState) {
        NotificationFilterState[NotificationFilterState["alwaysShow"] = 0] = "alwaysShow";
        NotificationFilterState[NotificationFilterState["showIfInvolved"] = 1] = "showIfInvolved";
        NotificationFilterState[NotificationFilterState["neverShow"] = 2] = "neverShow";
    })(NotificationFilterState || (NotificationFilterState = {}));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = NotificationFilterState;
});
define("src/Notification", ["require", "exports"], function (require, exports) {
    "use strict";
    var Notification = (function () {
        function Notification(template, props, turn) {
            this.hasBeenRead = false;
            this.template = template;
            this.props = props;
            this.turn = turn;
        }
        Notification.prototype.makeMessage = function () {
            return this.template.messageConstructor(this.props);
        };
        Notification.prototype.serialize = function () {
            var data = {
                templateKey: this.template.key,
                hasBeenRead: this.hasBeenRead,
                turn: this.turn,
                props: this.template.serializeProps(this.props)
            };
            return data;
        };
        return Notification;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Notification;
});
define("src/FillerPoint", ["require", "exports"], function (require, exports) {
    "use strict";
    var FillerPoint = (function () {
        function FillerPoint(x, y) {
            this.mapGenData = {};
            this.x = x;
            this.y = y;
        }
        FillerPoint.prototype.setPosition = function (x, y) {
            this.x = x;
            this.y = y;
        };
        FillerPoint.prototype.serialize = function () {
            return ({
                x: this.x,
                y: this.y
            });
        };
        return FillerPoint;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = FillerPoint;
});
define("src/GameLoader", ["require", "exports", "src/App", "src/Player", "src/Star", "src/Unit", "src/Building", "src/Game", "src/NotificationLog", "src/Notification", "src/FillerPoint", "src/Manufactory", "src/Color", "src/AttitudeModifier", "src/Emblem", "src/Flag", "src/Fleet", "src/Item", "src/utility", "src/mapgencore/MapGenResult"], function (require, exports, App_11, Player_1, Star_1, Unit_2, Building_1, Game_1, NotificationLog_1, Notification_1, FillerPoint_1, Manufactory_1, Color_1, AttitudeModifier_2, Emblem_2, Flag_1, Fleet_2, Item_2, utility_8, MapGenResult_1) {
    "use strict";
    var GameLoader = (function () {
        function GameLoader() {
            this.players = [];
            this.independents = [];
            this.playersById = {};
            this.starsById = {};
            this.unitsById = {};
            this.buildingsByControllerId = {};
        }
        GameLoader.prototype.deserializeGame = function (data) {
            this.map = this.deserializeMap(data.galaxyMap);
            for (var i = 0; i < data.players.length; i++) {
                var playerData = data.players[i];
                var id = playerData.id;
                var player = this.playersById[id] = this.deserializePlayer(playerData);
                if (player.isIndependent) {
                    this.independents.push(player);
                }
                else {
                    this.players.push(player);
                }
            }
            for (var i = 0; i < data.players.length; i++) {
                var playerData = data.players[i];
                this.deserializeDiplomacyStatus(this.playersById[playerData.id], playerData.diplomacyStatus);
                this.deserializeIdentifiedUnits(this.playersById[playerData.id], playerData.identifiedUnitIds);
            }
            this.humanPlayer = this.playersById[data.humanPlayerId];
            this.deserializeBuildings(data.galaxyMap);
            var game = new Game_1.default(this.map, this.players, this.humanPlayer);
            game.independents = game.independents.concat(this.independents);
            game.turnNumber = data.turnNumber;
            if (data.notificationLog) {
                game.notificationLog = this.deserializeNotificationLog(data.notificationLog);
                game.notificationLog.setTurn(game.turnNumber, true);
            }
            return game;
        };
        GameLoader.prototype.deserializeNotificationLog = function (data) {
            var notificationsData = Array.isArray(data) ? data : data.notifications;
            var notificationLog = new NotificationLog_1.default(this.humanPlayer);
            for (var i = 0; i < notificationsData.length; i++) {
                var template = App_11.default.moduleData.Templates.Notifications[notificationsData[i].templateKey];
                var props = template.deserializeProps(notificationsData[i].props, this);
                var notification = new Notification_1.default(template, props, notificationsData[i].turn);
                notification.hasBeenRead = notificationsData[i].hasBeenRead;
                notificationLog.addNotification(notification);
            }
            return notificationLog;
        };
        GameLoader.prototype.deserializeMap = function (data) {
            var stars = [];
            for (var i = 0; i < data.stars.length; i++) {
                var star = this.deserializeStar(data.stars[i]);
                stars.push(star);
                this.starsById[star.id] = star;
            }
            for (var i = 0; i < data.stars.length; i++) {
                var dataStar = data.stars[i];
                var realStar = this.starsById[dataStar.id];
                for (var j = 0; j < dataStar.linksToIds.length; j++) {
                    var linkId = dataStar.linksToIds[j];
                    var linkStar = this.starsById[linkId];
                    realStar.addLink(linkStar);
                }
            }
            var fillerPoints = [];
            for (var i = 0; i < data.fillerPoints.length; i++) {
                var dataPoint = data.fillerPoints[i];
                fillerPoints.push(new FillerPoint_1.default(dataPoint.x, dataPoint.y));
            }
            var mapGenResult = new MapGenResult_1.default({
                stars: stars,
                fillerPoints: fillerPoints,
                width: data.width,
                height: data.height,
                seed: data.seed,
                independents: null
            });
            var galaxyMap = mapGenResult.makeMap();
            return galaxyMap;
        };
        GameLoader.prototype.deserializeStar = function (data) {
            var star = new Star_1.default(data.x, data.y, data.id);
            star.name = data.name;
            star.baseIncome = data.baseIncome;
            star.seed = data.seed;
            if (data.resourceType) {
                star.setResource(App_11.default.moduleData.Templates.Resources[data.resourceType]);
            }
            if (data.buildableUnitTypes) {
                for (var i = 0; i < data.buildableUnitTypes.length; i++) {
                    star.buildableUnitTypes.push(App_11.default.moduleData.Templates.Units[data.buildableUnitTypes[i]]);
                }
            }
            return star;
        };
        GameLoader.prototype.deserializeBuildings = function (data) {
            for (var i = 0; i < data.stars.length; i++) {
                var starData = data.stars[i];
                var star = this.starsById[starData.id];
                for (var category in starData.buildings) {
                    for (var j = 0; j < starData.buildings[category].length; j++) {
                        var buildingData = starData.buildings[category][j];
                        var building = this.deserializeBuilding(buildingData);
                        star.addBuilding(building);
                    }
                }
                if (starData.manufactory) {
                    star.manufactory = new Manufactory_1.default(star, starData.manufactory);
                }
            }
        };
        GameLoader.prototype.deserializeBuilding = function (data) {
            var template = App_11.default.moduleData.Templates.Buildings[data.templateType];
            var building = new Building_1.default({
                template: template,
                location: this.starsById[data.locationId],
                controller: this.playersById[data.controllerId],
                upgradeLevel: data.upgradeLevel,
                totalCost: data.totalCost,
                id: data.id
            });
            return building;
        };
        GameLoader.prototype.deserializePlayer = function (data) {
            var personality;
            if (data.personality) {
                personality = utility_8.extendObject(data.personality, utility_8.makeRandomPersonality(), true);
            }
            var player = new Player_1.default(data.isAI, data.id);
            player.name = data.name;
            player.money = data.money;
            player.isIndependent = data.isIndependent;
            if (data.resources) {
                player.resources = utility_8.extendObject(data.resources);
            }
            player.personality = personality;
            player.color = Color_1.default.deSerialize(data.color);
            player.secondaryColor = Color_1.default.deSerialize(data.secondaryColor);
            player.colorAlpha = data.colorAlpha;
            if (data.flag) {
                player.flag = this.deserializeFlag(data.flag);
            }
            else {
                player.makeRandomFlag();
            }
            for (var i = 0; i < data.fleets.length; i++) {
                var fleet = data.fleets[i];
                player.addFleet(this.deserializeFleet(player, fleet));
            }
            for (var i = 0; i < data.controlledLocationIds.length; i++) {
                player.addStar(this.starsById[data.controlledLocationIds[i]]);
            }
            for (var i = 0; i < data.items.length; i++) {
                this.deserializeItem(data.items[i], player);
            }
            for (var i = 0; i < data.revealedStarIds.length; i++) {
                var id = data.revealedStarIds[i];
                player.revealedStars[id] = this.starsById[id];
            }
            player.initTechnologies(data.researchByTechnology);
            return player;
        };
        GameLoader.prototype.deserializeDiplomacyStatus = function (player, data) {
            if (data) {
                for (var i = 0; i < data.metPlayerIds.length; i++) {
                    var id = data.metPlayerIds[i];
                    player.diplomacyStatus.metPlayers[id] = this.playersById[id];
                }
                player.diplomacyStatus.statusByPlayer = data.statusByPlayer;
                for (var playerId in data.attitudeModifiersByPlayer) {
                    var modifiers = data.attitudeModifiersByPlayer[playerId];
                    if (!modifiers || modifiers.length === 0) {
                        player.diplomacyStatus.attitudeModifiersByPlayer[playerId] = [];
                        continue;
                    }
                    for (var i = 0; i < modifiers.length; i++) {
                        var template = App_11.default.moduleData.Templates.AttitudeModifiers[modifiers[i].templateType];
                        var modifier = new AttitudeModifier_2.default({
                            template: template,
                            startTurn: modifiers[i].startTurn,
                            endTurn: modifiers[i].endTurn,
                            strength: modifiers[i].strength
                        });
                        player.diplomacyStatus.addAttitudeModifier(this.playersById[playerId], modifier);
                    }
                }
            }
        };
        GameLoader.prototype.deserializeIdentifiedUnits = function (player, data) {
            for (var i = 0; i < data.length; i++) {
                var unit = this.unitsById[data[i]];
                if (unit) {
                    player.identifyUnit(unit);
                }
            }
        };
        GameLoader.prototype.deserializeEmblem = function (emblemData, colorData) {
            var inner = App_11.default.moduleData.Templates.SubEmblems[emblemData.innerKey];
            var outer = emblemData.outerKey ?
                App_11.default.moduleData.Templates.SubEmblems[emblemData.outerKey] : null;
            return new Emblem_2.default(Color_1.default.deSerialize(colorData), emblemData.alpha, inner, outer);
        };
        GameLoader.prototype.deserializeFlag = function (data) {
            var flag = new Flag_1.default({
                width: 46,
                mainColor: Color_1.default.deSerialize(data.mainColor),
                secondaryColor: Color_1.default.deSerialize(data.secondaryColor),
                tetriaryColor: Color_1.default.deSerialize(data.tetriaryColor)
            });
            if (data.customImage) {
                flag.setCustomImage(data.customImage);
            }
            else if (data.seed) {
                flag.generateRandom(data.seed);
            }
            else {
                if (data.foregroundEmblem) {
                    var fgEmblem = this.deserializeEmblem(data.foregroundEmblem, data.secondaryColor);
                    flag.setForegroundEmblem(fgEmblem);
                }
                if (data.backgroundEmblem) {
                    var bgEmblem = this.deserializeEmblem(data.backgroundEmblem, data.tetriaryColor);
                    flag.setBackgroundEmblem(bgEmblem);
                }
            }
            return flag;
        };
        GameLoader.prototype.deserializeFleet = function (player, data) {
            var units = [];
            var castedData = data;
            var unitsToDeserialize = castedData.units || castedData.ships;
            for (var i = 0; i < unitsToDeserialize.length; i++) {
                var unit = this.deserializeUnit(unitsToDeserialize[i]);
                player.addUnit(unit);
                units.push(unit);
            }
            var fleet = new Fleet_2.default(player, units, this.starsById[data.locationId], data.id, false);
            fleet.name = data.name;
            return fleet;
        };
        GameLoader.prototype.deserializeUnit = function (data) {
            var template = App_11.default.moduleData.Templates.Units[data.templateType];
            var unit = new Unit_2.default(template, data.id, data);
            this.unitsById[unit.id] = unit;
            return unit;
        };
        GameLoader.prototype.deserializeItem = function (data, player) {
            var template = App_11.default.moduleData.Templates.Items[data.templateType];
            var item = new Item_2.default(template, data.id);
            player.addItem(item);
            if (isFinite(data.unitId)) {
                this.unitsById[data.unitId].addItem(item);
            }
        };
        return GameLoader;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = GameLoader;
});
define("src/NotificationFilter", ["require", "exports", "src/App", "src/NotificationFilterState", "src/utility"], function (require, exports, App_12, NotificationFilterState_1, utility_9) {
    "use strict";
    var NotificationFilter = (function () {
        function NotificationFilter(player) {
            this.filters = {};
            this.player = player;
            this.setDefaultFilterStates();
            this.load();
        }
        NotificationFilter.prototype.setDefaultFilterStates = function () {
            var notifications = App_12.default.moduleData.Templates.Notifications;
            for (var key in notifications) {
                var notificationTemplate = notifications[key];
                this.filters[key] = notificationTemplate.defaultFilterState.slice(0);
            }
        };
        NotificationFilter.prototype.shouldDisplayNotification = function (notification) {
            var filterStates = this.filters[notification.template.key];
            if (filterStates.indexOf(NotificationFilterState_1.default.alwaysShow) !== -1) {
                return true;
            }
            else if (filterStates.indexOf(NotificationFilterState_1.default.neverShow) !== -1) {
                return false;
            }
            var playerIsInvolved = false;
            for (var key in notification.props) {
                if (notification.props[key] === this.player) {
                    playerIsInvolved = true;
                    break;
                }
            }
            if (playerIsInvolved) {
                return filterStates.indexOf(NotificationFilterState_1.default.showIfInvolved) !== -1;
            }
            return false;
        };
        NotificationFilter.prototype.getCompatibleFilterStates = function (filterState) {
            switch (filterState) {
                case NotificationFilterState_1.default.alwaysShow:
                    {
                        return [];
                    }
                case NotificationFilterState_1.default.showIfInvolved:
                    {
                        return [];
                    }
                case NotificationFilterState_1.default.neverShow:
                    {
                        return [];
                    }
            }
        };
        NotificationFilter.prototype.handleFilterStateChange = function (filterKey, state) {
            var stateIndex = this.filters[filterKey].indexOf(state);
            if (stateIndex !== -1) {
                if (this.filters[filterKey].length === 1) {
                    this.filters[filterKey] = [NotificationFilterState_1.default.neverShow];
                }
                else {
                    this.filters[filterKey].splice(stateIndex, 1);
                }
            }
            else {
                var newState = [state];
                var compatibleStates = this.getCompatibleFilterStates(state);
                for (var i = 0; i < this.filters[filterKey].length; i++) {
                    if (compatibleStates.indexOf(this.filters[filterKey][i]) !== -1) {
                        newState.push(this.filters[filterKey][i]);
                    }
                }
                this.filters[filterKey] = newState;
            }
        };
        NotificationFilter.prototype.getFiltersByCategory = function () {
            var filtersByCategory = {};
            var notifications = App_12.default.moduleData.Templates.Notifications;
            for (var key in this.filters) {
                var notificationTemplate = notifications[key];
                if (notificationTemplate) {
                    if (!filtersByCategory[notificationTemplate.category]) {
                        filtersByCategory[notificationTemplate.category] = [];
                    }
                    filtersByCategory[notificationTemplate.category].push({
                        notificationTemplate: notificationTemplate,
                        filterState: this.filters[key]
                    });
                }
            }
            return filtersByCategory;
        };
        NotificationFilter.prototype.setDefaultFilterStatesForCategory = function (category) {
            var byCategory = this.getFiltersByCategory();
            var forSelectedCategory = byCategory[category];
            for (var i = 0; i < forSelectedCategory.length; i++) {
                var template = forSelectedCategory[i].notificationTemplate;
                this.filters[template.key] = template.defaultFilterState.slice(0);
            }
        };
        NotificationFilter.prototype.load = function (slot) {
            var baseString = "NotificationFilter.";
            var parsedData;
            if (slot && localStorage[baseString + slot]) {
                parsedData = JSON.parse(localStorage.getItem(baseString + slot));
            }
            else {
                parsedData = utility_9.getMatchingLocalstorageItemsByDate(baseString)[0];
            }
            if (parsedData) {
                this.filters = utility_9.extendObject(parsedData.filters, this.filters, false);
            }
        };
        NotificationFilter.prototype.save = function (slot) {
            if (slot === void 0) { slot = 0; }
            var data = JSON.stringify({
                filters: this.filters,
                date: new Date()
            });
            localStorage.setItem("NotificationFilter." + slot, data);
        };
        return NotificationFilter;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = NotificationFilter;
});
define("src/NotificationLog", ["require", "exports", "src/App", "src/Notification", "src/NotificationFilter", "src/eventManager"], function (require, exports, App_13, Notification_2, NotificationFilter_1, eventManager_7) {
    "use strict";
    var NotificationLog = (function () {
        function NotificationLog(player) {
            this.byTurn = {};
            this.unread = [];
            this.isHumanTurn = true;
            this.listeners = {};
            this.addEventListeners();
            this.notificationFilter = new NotificationFilter_1.default(player);
        }
        NotificationLog.prototype.addEventListeners = function () {
            for (var key in App_13.default.moduleData.Templates.Notifications) {
                var template = App_13.default.moduleData.Templates.Notifications[key];
                for (var i = 0; i < template.eventListeners.length; i++) {
                    var listenerKey = template.eventListeners[i];
                    var listener = eventManager_7.default.addEventListener(listenerKey, this.makeNotification.bind(this, template));
                    if (!this.listeners[listenerKey]) {
                        this.listeners[listenerKey] = [];
                    }
                    this.listeners[listenerKey].push(listener);
                }
            }
        };
        NotificationLog.prototype.destroy = function () {
            for (var key in this.listeners) {
                for (var i = 0; i < this.listeners[key].length; i++) {
                    eventManager_7.default.removeEventListener(key, this.listeners[key][i]);
                }
            }
        };
        NotificationLog.prototype.setTurn = function (turn, isHumanTurn) {
            this.currentTurn = turn;
            this.isHumanTurn = isHumanTurn;
        };
        NotificationLog.prototype.makeNotification = function (template, props) {
            var notification = new Notification_2.default(template, props, this.currentTurn);
            this.addNotification(notification);
            if (this.isHumanTurn) {
                eventManager_7.default.dispatchEvent("updateNotificationLog");
            }
        };
        NotificationLog.prototype.addNotification = function (notification) {
            if (!this.byTurn[notification.turn]) {
                this.byTurn[notification.turn] = [];
            }
            this.byTurn[notification.turn].unshift(notification);
            if (!notification.hasBeenRead) {
                this.unread.unshift(notification);
            }
        };
        NotificationLog.prototype.markAsRead = function (notification) {
            var index = this.unread.indexOf(notification);
            if (index === -1)
                throw new Error("Notification is already unread");
            notification.hasBeenRead = true;
            this.unread.splice(index, 1);
        };
        NotificationLog.prototype.getUnreadNotificationsForTurn = function (turn) {
            return this.byTurn[turn].filter(function (notification) {
                return !notification.hasBeenRead;
            });
        };
        NotificationLog.prototype.filterNotifications = function (notifications) {
            var filtered = [];
            for (var i = 0; i < notifications.length; i++) {
                if (this.notificationFilter.shouldDisplayNotification(notifications[i])) {
                    filtered.push(notifications[i]);
                }
            }
            return filtered;
        };
        NotificationLog.prototype.serialize = function () {
            var notificationsSaveData = [];
            for (var turnNumber in this.byTurn) {
                var notifications = this.byTurn[turnNumber];
                for (var i = 0; i < notifications.length; i++) {
                    notificationsSaveData.push(notifications[i].serialize());
                }
            }
            var data = {
                notifications: notificationsSaveData
            };
            return data;
        };
        return NotificationLog;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = NotificationLog;
});
define("src/Game", ["require", "exports", "src/App", "src/idGenerators", "src/eventManager", "src/utility"], function (require, exports, App_14, idGenerators_4, eventManager_8, utility_10) {
    "use strict";
    var Game = (function () {
        function Game(map, players, humanPlayer) {
            this.independents = [];
            this.galaxyMap = map;
            if (map.independents) {
                this.independents = map.independents;
                map.independents = null;
                delete map.independents;
            }
            this.playerOrder = players;
            this.humanPlayer = humanPlayer;
            this.turnNumber = 1;
        }
        Game.prototype.destroy = function () {
            this.notificationLog.destroy();
            this.notificationLog = null;
            for (var i = 0; i < this.playerOrder.length; i++) {
                this.playerOrder[i].destroy();
            }
            for (var i = 0; i < this.independents.length; i++) {
                this.independents[i].destroy();
            }
        };
        Game.prototype.endTurn = function () {
            this.setNextPlayer();
            while (this.activePlayer.controlledLocations.length === 0) {
                this.killPlayer(this.activePlayer);
                this.activePlayer = this.playerOrder[0];
            }
            this.processPlayerStartTurn(this.activePlayer);
            this.notificationLog.setTurn(this.turnNumber, !this.activePlayer.isAI);
            if (this.activePlayer.isAI) {
                this.activePlayer.AIController.processTurn(this.endTurn.bind(this));
            }
            else {
                this.turnNumber++;
                for (var i = 0; i < this.independents.length; i++) {
                    this.processPlayerStartTurn(this.independents[i]);
                }
            }
            eventManager_8.default.dispatchEvent("endTurn", null);
            eventManager_8.default.dispatchEvent("updateSelection", null);
        };
        Game.prototype.processPlayerStartTurn = function (player) {
            var unitStartTurnFN = function (unit) {
                unit.resetMovePoints();
                unit.heal();
                var passiveSkillsByPhase = unit.getPassiveSkillsByPhase();
                if (passiveSkillsByPhase.atTurnStart) {
                    for (var i = 0; i < passiveSkillsByPhase.atTurnStart.length; i++) {
                        var skill = passiveSkillsByPhase.atTurnStart[i];
                        for (var j = 0; j < skill.atTurnStart.length; j++) {
                            skill.atTurnStart[j](unit);
                        }
                    }
                }
                unit.timesActedThisTurn = 0;
            };
            player.forEachUnit(unitStartTurnFN);
            if (!player.isIndependent) {
                player.money += player.getIncome();
                var allResourceIncomeData = player.getResourceIncome();
                for (var resourceType in allResourceIncomeData) {
                    var resourceData = allResourceIncomeData[resourceType];
                    player.addResource(resourceData.resource, resourceData.amount);
                }
                player.playerTechnology.allocateResearchPoints(player.getResearchSpeed());
                player.getAllManufactories().forEach(function (manufactory) {
                    manufactory.buildAllThings();
                });
            }
        };
        Game.prototype.setNextPlayer = function () {
            this.playerOrder.push(this.playerOrder.shift());
            this.activePlayer = this.playerOrder[0];
        };
        Game.prototype.killPlayer = function (playerToKill) {
            var playerOrderIndex;
            for (var i = 0; i < this.playerOrder.length; i++) {
                var player = this.playerOrder[i];
                if (player === playerToKill) {
                    playerOrderIndex = i;
                    continue;
                }
                player.diplomacyStatus.removePlayer(playerToKill);
            }
            playerToKill.die();
            playerToKill.destroy();
            this.playerOrder.splice(playerOrderIndex, 1);
        };
        Game.prototype.serialize = function () {
            var playersSaveData = this.playerOrder.map(function (player) {
                return player.serialize();
            });
            var independentsSaveData = this.independents.map(function (player) {
                return player.serialize();
            });
            var data = {
                turnNumber: this.turnNumber,
                galaxyMap: this.galaxyMap.serialize(),
                players: playersSaveData.concat(independentsSaveData),
                humanPlayerId: this.humanPlayer.id,
                notificationLog: this.notificationLog.serialize()
            };
            return data;
        };
        Game.prototype.save = function (name) {
            var saveString = "Save." + name;
            this.gameStorageKey = saveString;
            var date = new Date();
            var gameData = this.serialize();
            var stringified = JSON.stringify({
                name: name,
                date: date,
                gameData: gameData,
                idGenerators: utility_10.extendObject(idGenerators_4.default),
                cameraLocation: App_14.default.renderer.camera.getCenterPosition()
            });
            localStorage.setItem(saveString, stringified);
        };
        return Game;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Game;
});
define("src/Range", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/rangeOperations", ["require", "exports", "src/utility"], function (require, exports, utility_11) {
    "use strict";
    function excludeFromRanges(ranges, toExclude) {
        var intersecting = getIntersectingRanges(ranges, toExclude);
        var newRanges = ranges.slice(0);
        for (var i = 0; i < intersecting.length; i++) {
            newRanges.splice(newRanges.indexOf(intersecting[i]), 1);
            var intersectedRanges = excludeFromRange(intersecting[i], toExclude);
            if (intersectedRanges) {
                newRanges = newRanges.concat(intersectedRanges);
            }
        }
        return newRanges;
    }
    exports.excludeFromRanges = excludeFromRanges;
    function getIntersectingRanges(ranges, toIntersectWith) {
        var intersecting = [];
        for (var i = 0; i < ranges.length; i++) {
            var range = ranges[i];
            if (toIntersectWith.max < range.min || toIntersectWith.min > range.max) {
                continue;
            }
            intersecting.push(range);
        }
        return intersecting;
    }
    exports.getIntersectingRanges = getIntersectingRanges;
    function excludeFromRange(range, toExclude) {
        if (toExclude.max < range.min || toExclude.min > range.max) {
            return null;
        }
        else if (toExclude.min < range.min && toExclude.max > range.max) {
            return null;
        }
        if (toExclude.min <= range.min) {
            return ([{ min: toExclude.max, max: range.max }]);
        }
        else if (toExclude.max >= range.max) {
            return ([{ min: range.min, max: toExclude.min }]);
        }
        return ([
            {
                min: range.min,
                max: toExclude.min
            },
            {
                min: toExclude.max,
                max: range.max
            }
        ]);
    }
    exports.excludeFromRange = excludeFromRange;
    function randomSelectFromRanges(ranges) {
        var totalWeight = 0;
        var currentRelativeWeight = 0;
        var rangesByRelativeWeight = {};
        for (var i = 0; i < ranges.length; i++) {
            var range = ranges[i];
            if (!isFinite(range.max))
                range.max = 1;
            if (!isFinite(range.min))
                range.min = 0;
            var weight = range.max - range.min;
            totalWeight += weight;
        }
        for (var i = 0; i < ranges.length; i++) {
            var range = ranges[i];
            var relativeWeight = (range.max - range.min) / totalWeight;
            if (totalWeight === 0)
                relativeWeight = 1;
            currentRelativeWeight += relativeWeight;
            rangesByRelativeWeight[currentRelativeWeight] = range;
        }
        var rand = Math.random();
        var sortedWeights = Object.keys(rangesByRelativeWeight).map(function (w) {
            return parseFloat(w);
        }).sort();
        for (var i = 0; i < sortedWeights.length; i++) {
            if (rand < sortedWeights[i]) {
                var selectedRange = rangesByRelativeWeight[sortedWeights[i]];
                return utility_11.randRange(selectedRange.min, selectedRange.max);
            }
        }
        throw new Error("Couldn't select from ranges.");
    }
    exports.randomSelectFromRanges = randomSelectFromRanges;
});
define("src/colorGeneration", ["require", "exports", "src/Color", "src/rangeOperations", "src/utility"], function (require, exports, Color_2, rangeOperations_1, utility_12) {
    "use strict";
    function makeRandomVibrantColor() {
        var hRanges = [
            { min: 0, max: 90 / 360 },
            { min: 120 / 360, max: 150 / 360 },
            { min: 180 / 360, max: 290 / 360 },
            { min: 320 / 360, max: 1 }
        ];
        var h = rangeOperations_1.randomSelectFromRanges(hRanges);
        var s = utility_12.randRange(0.8, 0.9);
        var v = utility_12.randRange(0.88, 0.92);
        return Color_2.default.fromHSV(h, s, v);
    }
    function makeRandomDeepColor() {
        if (Math.random() < 0.1) {
            var h = utility_12.randRange(15 / 360, 80 / 360);
            var s = utility_12.randRange(0.92, 1);
            var v = utility_12.randRange(0.92, 1);
            return Color_2.default.fromHSV(h, s, v);
        }
        else {
            var hRanges = [
                { min: 0, max: 15 / 360 },
                { min: 100 / 360, max: 195 / 360 },
                { min: 210 / 360, max: 1 }
            ];
            var h = rangeOperations_1.randomSelectFromRanges(hRanges);
            var s = utility_12.randRange(0.8, 0.9);
            var v = utility_12.randRange(0.88, 0.92);
            return Color_2.default.fromHSV(h, s, v);
        }
    }
    function makeRandomLightColor() {
        return Color_2.default.fromHSV(utility_12.randRange(0, 1), utility_12.randRange(0.55, 0.65), 1);
    }
    function makeRandomColor(props) {
        var hRanges = props.h || [{ min: 0, max: 1 }];
        var sRanges = props.s || [{ min: 0, max: 1 }];
        var lRanges = props.l || [{ min: 0, max: 1 }];
        var h = rangeOperations_1.randomSelectFromRanges(hRanges);
        var s = rangeOperations_1.randomSelectFromRanges(sRanges);
        var l = rangeOperations_1.randomSelectFromRanges(lRanges);
        return Color_2.default.fromHUSL(h, s, l);
    }
    function generateMainColor() {
        if (Math.random() < 0.6) {
            return makeRandomDeepColor();
        }
        else if (Math.random() < 0.25) {
            return makeRandomLightColor();
        }
        else if (Math.random() < 0.3) {
            return makeRandomVibrantColor();
        }
        else {
            return makeRandomColor({
                s: [{ min: 1, max: 1 }],
                l: [{ min: 0.88, max: 1 }]
            });
        }
    }
    exports.generateMainColor = generateMainColor;
    function makeContrastingColor(toContrastWith, colorGenProps) {
        var props = colorGenProps || {};
        var initialRanges = props.initialRanges || {};
        var hRange = initialRanges.h || { min: 0.0, max: 1.0 };
        var sRange = initialRanges.s || { min: 0.5, max: 1.0 };
        var lRange = initialRanges.l || { min: 0.0, max: 1.0 };
        var minDifference = props.minDifference || {};
        var hMinDifference = isFinite(minDifference.h) ? minDifference.h : 0.1;
        var sMinDifference = isFinite(minDifference.s) ? minDifference.s : 0.0;
        var lMinDifference = isFinite(minDifference.l) ? minDifference.l : 0.3;
        var maxDifference = props.maxDifference || {};
        var hMaxDifference = isFinite(maxDifference.h) ? maxDifference.h : 1.0;
        var toContrastWithHUSL = toContrastWith.getHUSL();
        var hExclusionRange = {
            min: (toContrastWithHUSL[0] - hMinDifference) % 1.0,
            max: (toContrastWithHUSL[0] + hMinDifference) % 1.0
        };
        var hRangeWithMinExclusion = rangeOperations_1.excludeFromRange(hRange, hExclusionRange);
        var candidateHValue = rangeOperations_1.randomSelectFromRanges(hRangeWithMinExclusion);
        var h = utility_12.clamp(candidateHValue, toContrastWithHUSL[0] - hMaxDifference, toContrastWithHUSL[0] + hMaxDifference);
        var hDistance = utility_12.getAngleBetweenDegrees(h * 360, toContrastWithHUSL[0]);
        var relativeHDistance = 1 / (180 / hDistance);
        var sExclusionRangeMin = utility_12.clamp(toContrastWithHUSL[1] - sMinDifference, sRange.min, 1.0);
        var sExclusionRange = {
            min: sExclusionRangeMin,
            max: utility_12.clamp(toContrastWithHUSL[1] + sMinDifference, sExclusionRangeMin, 1.0)
        };
        var lExclusionRangeMin = utility_12.clamp(toContrastWithHUSL[2] - lMinDifference, lRange.min, 1.0);
        var lExclusionRange = {
            min: lExclusionRangeMin,
            max: utility_12.clamp(toContrastWithHUSL[2] + lMinDifference, lExclusionRangeMin, 1.0)
        };
        return makeRandomColor({
            h: [{ min: h, max: h }],
            s: rangeOperations_1.excludeFromRange(sRange, sExclusionRange),
            l: rangeOperations_1.excludeFromRange(lRange, lExclusionRange)
        });
    }
    function colorsContrast(aColor, bColor) {
        var a = aColor.getHUSL();
        var b = bColor.getHUSL();
        return Math.abs(a[2] - b[2]) > 0.2;
    }
    function generateSecondaryColor(mainColor) {
        return makeContrastingColor(mainColor, {
            minDifference: {
                h: 0.1,
                l: 0.3
            }
        });
    }
    exports.generateSecondaryColor = generateSecondaryColor;
    function generateColorScheme(mainColor) {
        var main = mainColor || generateMainColor();
        return ({
            main: main,
            secondary: generateSecondaryColor(main)
        });
    }
    exports.generateColorScheme = generateColorScheme;
});
define("src/mapai/MapEvaluator", ["require", "exports", "src/utility"], function (require, exports, utility_13) {
    "use strict";
    exports.defaultEvaluationParameters = {
        starDesirability: {
            neighborRange: 1,
            neighborWeight: 0.5,
            defendabilityWeight: 1,
            totalIncomeWeight: 1,
            baseIncomeWeight: 0.5,
            infrastructureWeight: 1,
            productionWeight: 1,
        }
    };
    var MapEvaluator = (function () {
        function MapEvaluator(map, player, game) {
            this.cachedInfluenceMaps = {};
            this.cachedVisibleFleets = {};
            this.cachedVisionMaps = {};
            this.map = map;
            this.player = player;
            this.game = game;
            this.evaluationParameters = exports.defaultEvaluationParameters;
        }
        MapEvaluator.prototype.processTurnStart = function () {
            this.cachedInfluenceMaps = {};
            this.cachedVisibleFleets = {};
            this.cachedVisionMaps = {};
            this.cachedOwnIncome = undefined;
        };
        MapEvaluator.prototype.evaluateStarIncome = function (star) {
            var evaluation = 0;
            evaluation += star.baseIncome;
            evaluation += (star.getIncome() - star.baseIncome) *
                (1 - this.evaluationParameters.starDesirability.baseIncomeWeight);
            return evaluation;
        };
        MapEvaluator.prototype.evaluateStarInfrastructure = function (star) {
            var evaluation = 0;
            for (var category in star.buildings) {
                for (var i = 0; i < star.buildings[category].length; i++) {
                    evaluation += star.buildings[category][i].totalCost / 25;
                }
            }
            return evaluation;
        };
        MapEvaluator.prototype.evaluateStarProduction = function (star) {
            var evaluation = 0;
            return evaluation;
        };
        MapEvaluator.prototype.evaluateStarDefendability = function (star) {
            var evaluation = 0;
            var nearbyStars = star.getLinkedInRange(2).byRange;
            for (var rangeString in nearbyStars) {
                var distanceMultiplier = 1 / parseInt(rangeString);
                var starsInRange = nearbyStars[rangeString];
                for (var i = 0; i < starsInRange.length; i++) {
                    var neighbor = starsInRange[i];
                    var neighborDefendability;
                    if (neighbor.owner === this.player) {
                        neighborDefendability = 3;
                    }
                    else if (neighbor.owner.isIndependent) {
                        neighborDefendability = -0.75;
                    }
                    else {
                        neighborDefendability = -2;
                    }
                    evaluation += neighborDefendability * distanceMultiplier;
                }
            }
            if (star.owner === this.player) {
                evaluation += 3;
            }
            return evaluation * 5;
        };
        MapEvaluator.prototype.evaluateIndividualStarDesirability = function (star) {
            var evaluation = 0;
            var p = this.evaluationParameters.starDesirability;
            if (!isFinite(this.cachedOwnIncome)) {
                this.cachedOwnIncome = this.player.getIncome();
            }
            var incomeEvaluation = this.evaluateStarIncome(star) * p.totalIncomeWeight;
            incomeEvaluation *= incomeEvaluation / (this.cachedOwnIncome / 4);
            evaluation += incomeEvaluation;
            var infrastructureEvaluation = this.evaluateStarInfrastructure(star) * p.infrastructureWeight;
            evaluation += infrastructureEvaluation;
            var productionEvaluation = this.evaluateStarProduction(star) * p.productionWeight;
            evaluation += productionEvaluation;
            var defendabilityEvaluation = this.evaluateStarDefendability(star) * p.defendabilityWeight;
            evaluation += defendabilityEvaluation;
            return evaluation;
        };
        MapEvaluator.prototype.evaluateNeighboringStarsDesirability = function (star, range) {
            var evaluation = 0;
            var getDistanceFalloff = function (distance) {
                return 1 / (distance + 1);
            };
            var inRange = star.getLinkedInRange(range).byRange;
            for (var distanceString in inRange) {
                var stars = inRange[distanceString];
                var distanceFalloff = getDistanceFalloff(parseInt(distanceString));
                for (var i = 0; i < stars.length; i++) {
                    evaluation += this.evaluateIndividualStarDesirability(stars[i]) * distanceFalloff;
                }
            }
            return evaluation;
        };
        MapEvaluator.prototype.evaluateStarDesirability = function (star) {
            var evaluation = 0;
            var p = this.evaluationParameters.starDesirability;
            evaluation += this.evaluateIndividualStarDesirability(star);
            evaluation += this.evaluateNeighboringStarsDesirability(star, p.neighborRange) *
                p.neighborWeight;
            return evaluation;
        };
        MapEvaluator.prototype.evaluateIndependentTargets = function (targetStars) {
            var evaluationByStar = {};
            for (var i = 0; i < targetStars.length; i++) {
                var star = targetStars[i];
                var desirability = this.evaluateStarDesirability(star);
                var independentStrength = this.getIndependentStrengthAtStar(star) || 1;
                var ownInfluenceMap = this.getPlayerInfluenceMap(this.player);
                var ownInfluenceAtStar = ownInfluenceMap[star.id] || 1;
                evaluationByStar[star.id] =
                    {
                        star: star,
                        desirability: desirability,
                        independentStrength: independentStrength,
                        ownInfluence: ownInfluenceAtStar
                    };
            }
            return evaluationByStar;
        };
        MapEvaluator.prototype.scoreIndependentTargets = function (evaluations) {
            var scores = [];
            for (var starId in evaluations) {
                var evaluation = evaluations[starId];
                var easeOfCapturing = evaluation.ownInfluence / evaluation.independentStrength;
                var score = evaluation.desirability * easeOfCapturing;
                if (evaluation.star.getSecondaryController() === this.player) {
                    score *= 1.5;
                }
                scores.push({
                    star: evaluation.star,
                    score: score
                });
            }
            return scores.sort(function (a, b) {
                return b.score - a.score;
            });
        };
        MapEvaluator.prototype.evaluateDesirabilityOfPlayersStars = function (player) {
            var byStar = {};
            var total = 0;
            var stars = this.getVisibleStarsOfPlayer(player);
            for (var i = 0; i < stars.length; i++) {
                var star = stars[i];
                var desirability = this.evaluateStarDesirability(star);
                byStar[star.id] =
                    {
                        star: star,
                        desirability: desirability
                    };
                total += desirability;
            }
            return ({
                byStar: byStar,
                total: total
            });
        };
        MapEvaluator.prototype.getIndependentNeighborStars = function () {
            var self = this;
            var independentNeighborStars = this.player.getNeighboringStars().filter(function (star) {
                var secondaryController = star.getSecondaryController();
                return star.owner.isIndependent && (!secondaryController || secondaryController === self.player);
            });
            return independentNeighborStars;
        };
        MapEvaluator.prototype.getIndependentNeighborStarIslands = function (earlyReturnSize) {
            var self = this;
            var alreadyVisited = {};
            var allStars = [];
            var islandQualifierFN = function (a, b) {
                var secondaryController = b.getSecondaryController();
                return b.owner.isIndependent && (!secondaryController || secondaryController === self.player);
            };
            var neighborStars = this.getIndependentNeighborStars();
            for (var i = 0; i < neighborStars.length; i++) {
                var neighborStar = neighborStars[i];
                if (alreadyVisited[neighborStar.id]) {
                    continue;
                }
                var island = neighborStar.getIslandForQualifier(islandQualifierFN, earlyReturnSize);
                for (var j = 0; j < island.length; j++) {
                    var star = island[j];
                    alreadyVisited[star.id] = true;
                    allStars.push(star);
                }
            }
            return allStars;
        };
        MapEvaluator.prototype.getHostileUnitsAtStar = function (star) {
            var hostilePlayers = star.getEnemyFleetOwners(this.player);
            var unitsByEnemy = {};
            var allUnits = [];
            for (var i = 0; i < hostilePlayers.length; i++) {
                unitsByEnemy[hostilePlayers[i].id] = star.getAllUnitsOfPlayer(hostilePlayers[i]);
                allUnits = allUnits.concat(unitsByEnemy[hostilePlayers[i].id]);
            }
            return ({
                byEnemy: unitsByEnemy,
                all: allUnits
            });
        };
        MapEvaluator.prototype.getHostileStrengthAtStar = function (star) {
            var hostileUnitsByPlayer = this.getHostileUnitsAtStar(star).byEnemy;
            var strengthByEnemy = {};
            for (var playerId in hostileUnitsByPlayer) {
                var strength = 0;
                for (var i = 0; i < hostileUnitsByPlayer[playerId].length; i++) {
                    strength += hostileUnitsByPlayer[playerId][i].getStrengthEvaluation();
                }
                strengthByEnemy[playerId] = strength;
            }
            return strengthByEnemy;
        };
        MapEvaluator.prototype.getIndependentStrengthAtStar = function (star) {
            var units = star.getIndependentUnits();
            var total = 0;
            for (var i = 0; i < units.length; i++) {
                total += units[i].getStrengthEvaluation();
            }
            return total;
        };
        MapEvaluator.prototype.getTotalHostileStrengthAtStar = function (star) {
            var byPlayer = this.getHostileStrengthAtStar(star);
            var total = 0;
            for (var playerId in byPlayer) {
                total += byPlayer[playerId];
            }
            return total;
        };
        MapEvaluator.prototype.getDefenceBuildingStrengthAtStarByPlayer = function (star) {
            var byPlayer = {};
            for (var i = 0; i < star.buildings["defence"].length; i++) {
                var building = star.buildings["defence"][i];
                if (!byPlayer[building.controller.id]) {
                    byPlayer[building.controller.id] = 0;
                }
                byPlayer[building.controller.id] += building.totalCost;
            }
            return byPlayer;
        };
        MapEvaluator.prototype.getTotalDefenceBuildingStrengthAtStar = function (star) {
            var strength = 0;
            for (var i = 0; i < star.buildings["defence"].length; i++) {
                var building = star.buildings["defence"][i];
                if (building.controller.id === this.player.id)
                    continue;
                strength += building.totalCost;
            }
            return strength;
        };
        MapEvaluator.prototype.evaluateFleetStrength = function (fleet) {
            return fleet.getTotalStrengthEvaluation();
        };
        MapEvaluator.prototype.getVisibleFleetsByPlayer = function () {
            if (this.game && this.cachedVisibleFleets[this.game.turnNumber]) {
                return this.cachedVisibleFleets[this.game.turnNumber];
            }
            var stars = this.player.getVisibleStars();
            var byPlayer = {};
            for (var i = 0; i < stars.length; i++) {
                var star = stars[i];
                for (var playerId in star.fleets) {
                    var playerFleets = star.fleets[playerId];
                    if (!byPlayer[playerId]) {
                        byPlayer[playerId] = [];
                    }
                    for (var j = 0; j < playerFleets.length; j++) {
                        if (playerFleets[j].isStealthy && !this.player.starIsDetected(star)) {
                            continue;
                        }
                        byPlayer[playerId] = byPlayer[playerId].concat(playerFleets[j]);
                    }
                }
            }
            if (this.game) {
                this.cachedVisibleFleets[this.game.turnNumber] = byPlayer;
            }
            return byPlayer;
        };
        MapEvaluator.prototype.buildPlayerInfluenceMap = function (player) {
            var playerIsImmobile = player.isIndependent;
            var influenceByStar = {};
            var stars = this.player.getRevealedStars();
            for (var i = 0; i < stars.length; i++) {
                var star = stars[i];
                var defenceBuildingStrengths = this.getDefenceBuildingStrengthAtStarByPlayer(star);
                if (defenceBuildingStrengths[player.id]) {
                    if (!isFinite(influenceByStar[star.id])) {
                        influenceByStar[star.id] = 0;
                    }
                    ;
                    influenceByStar[star.id] += defenceBuildingStrengths[player.id];
                }
            }
            var fleets = this.getVisibleFleetsByPlayer()[player.id] || [];
            function getDistanceFalloff(distance) {
                return 1 / (distance + 1);
            }
            for (var i = 0; i < fleets.length; i++) {
                var fleet = fleets[i];
                var strength = this.evaluateFleetStrength(fleet);
                var location = fleet.location;
                var range = fleet.getMinMaxMovePoints();
                var turnsToCheck = 4;
                var inFleetRange = location.getLinkedInRange(range * turnsToCheck).byRange;
                inFleetRange[0] = [location];
                for (var distance in inFleetRange) {
                    var numericDistance = parseInt(distance);
                    var turnsToReach = Math.floor((numericDistance - 1) / range);
                    if (turnsToReach < 0)
                        turnsToReach = 0;
                    var distanceFalloff = getDistanceFalloff(turnsToReach);
                    var adjustedStrength = strength * distanceFalloff;
                    for (var j = 0; j < inFleetRange[distance].length; j++) {
                        var star = inFleetRange[distance][j];
                        if (!isFinite(influenceByStar[star.id])) {
                            influenceByStar[star.id] = 0;
                        }
                        ;
                        influenceByStar[star.id] += adjustedStrength;
                    }
                }
            }
            return influenceByStar;
        };
        MapEvaluator.prototype.getPlayerInfluenceMap = function (player) {
            if (!this.game) {
                throw new Error("Can't use cached influence maps when game isn't specified for MapEvaluator");
            }
            if (!this.cachedInfluenceMaps[this.game.turnNumber]) {
                this.cachedInfluenceMaps[this.game.turnNumber] = {};
            }
            if (!this.cachedInfluenceMaps[this.game.turnNumber][player.id]) {
                this.cachedInfluenceMaps[this.game.turnNumber][player.id] = this.buildPlayerInfluenceMap(player);
            }
            return this.cachedInfluenceMaps[this.game.turnNumber][player.id];
        };
        MapEvaluator.prototype.getInfluenceMapsForKnownPlayers = function () {
            var byPlayer = {};
            for (var playerId in this.player.diplomacyStatus.metPlayers) {
                var player = this.player.diplomacyStatus.metPlayers[playerId];
                byPlayer[playerId] = this.getPlayerInfluenceMap(player);
            }
            return byPlayer;
        };
        MapEvaluator.prototype.getVisibleStarsOfPlayer = function (player) {
            return this.player.getVisibleStars().filter(function (star) {
                return star.owner === player;
            });
        };
        MapEvaluator.prototype.getVisibleStarsOfKnownPlayers = function () {
            var byPlayer = {};
            for (var playerId in this.player.diplomacyStatus.metPlayers) {
                var player = this.player.diplomacyStatus.metPlayers[playerId];
                byPlayer[playerId] = this.getVisibleStarsOfPlayer(player);
            }
            return byPlayer;
        };
        MapEvaluator.prototype.estimateGlobalStrength = function (player) {
            var visibleStrength = 0;
            var invisibleStrength = 0;
            var fleets = this.getVisibleFleetsByPlayer()[player.id] || [];
            for (var i = 0; i < fleets.length; i++) {
                visibleStrength += this.evaluateFleetStrength(fleets[i]);
            }
            if (player !== this.player) {
                invisibleStrength = visibleStrength * 0.5;
            }
            return visibleStrength + invisibleStrength;
        };
        MapEvaluator.prototype.getPerceivedThreatOfPlayer = function (player) {
            if (!this.player.diplomacyStatus.metPlayers[player.id]) {
                throw new Error(this.player.name +
                    " tried to call getPerceivedThreatOfPlayer on unkown player " + player.name);
            }
            var otherInfluenceMap = this.getPlayerInfluenceMap(player);
            var ownInfluenceMap = this.getPlayerInfluenceMap(this.player);
            var totalInfluenceInOwnStars = 0;
            for (var starId in otherInfluenceMap) {
                for (var i = 0; i < this.player.controlledLocations.length; i++) {
                    var star = this.player.controlledLocations[i];
                    if (star.id === parseInt(starId)) {
                        var otherInfluence = otherInfluenceMap[starId];
                        var ownInfluence = ownInfluenceMap[starId];
                        totalInfluenceInOwnStars += otherInfluence - 0.5 * ownInfluence;
                        break;
                    }
                }
            }
            var globalStrengthDifference = this.estimateGlobalStrength(player) - this.estimateGlobalStrength(this.player);
            return totalInfluenceInOwnStars + globalStrengthDifference;
        };
        MapEvaluator.prototype.getPerceivedThreatOfAllKnownPlayers = function () {
            var byPlayer = {};
            for (var playerId in this.player.diplomacyStatus.metPlayers) {
                var player = this.player.diplomacyStatus.metPlayers[playerId];
                byPlayer[playerId] = this.getPerceivedThreatOfPlayer(player);
            }
            return byPlayer;
        };
        MapEvaluator.prototype.getRelativePerceivedThreatOfAllKnownPlayers = function () {
            var byPlayer = this.getPerceivedThreatOfAllKnownPlayers();
            var relative = {};
            var min, max;
            for (var playerId in byPlayer) {
                var threat = byPlayer[playerId];
                min = isFinite(min) ? Math.min(min, threat) : threat;
                max = isFinite(max) ? Math.max(max, threat) : threat;
            }
            for (var playerId in byPlayer) {
                relative[playerId] = utility_13.getRelativeValue(byPlayer[playerId], min, max);
            }
            return relative;
        };
        MapEvaluator.prototype.getVisionCoverageAroundStar = function (star, range, useDetection) {
            if (useDetection === void 0) { useDetection = false; }
            var toCheck = star.getLinkedInRange(range).all;
            var scorePerVisibleStar = 1 / toCheck.length;
            var coverageScore = 0;
            var visibilityCheckFN = useDetection ? this.player.starIsDetected : this.player.starIsVisible;
            for (var i = 0; i < toCheck.length; i++) {
                var neighbor = toCheck[i];
                if (visibilityCheckFN.call(this.player, neighbor)) {
                    coverageScore += scorePerVisibleStar;
                }
            }
            return coverageScore;
        };
        MapEvaluator.prototype.estimateFleetRange = function (fleet, baseRange, afterSixUnits, getRangeFNName) {
            var range = baseRange;
            if (fleet.units.length >= 6) {
                range += afterSixUnits;
            }
            for (var i = 0; i < fleet.units.length; i++) {
                var unit = fleet.units[i];
                if (this.player.unitIsIdentified(unit)) {
                    range = Math.max(range, unit[getRangeFNName]());
                }
            }
            return range;
        };
        MapEvaluator.prototype.estimateFleetVisionRange = function (fleet) {
            return this.estimateFleetRange(fleet, 1, 1, "getVisionRange");
        };
        MapEvaluator.prototype.estimateFleetDetectionRange = function (fleet) {
            return this.estimateFleetRange(fleet, -1, 1, "getDetectionRange");
        };
        MapEvaluator.prototype.buildPlayerVisionMap = function (player) {
            var detectedStars = {};
            var visibleStars = {};
            var revealedStarsOfPlayer = this.player.getRevealedStars().filter(function (star) {
                return star.owner === player;
            });
            var visibleFleetsOfPlayer = this.getVisibleFleetsByPlayer()[player.id] || [];
            var processDetectionSource = function (source, detectionRange, visionRange) {
                var detected = source.getLinkedInRange(detectionRange).all;
                for (var i = 0; i < detected.length; i++) {
                    var star = detected[i];
                    if (!detectedStars[star.id]) {
                        detectedStars[star.id] = star;
                    }
                }
                var visible = source.getLinkedInRange(visionRange).all;
                for (var i = 0; i < visible.length; i++) {
                    var star = visible[i];
                    if (!visibleStars[star.id]) {
                        visibleStars[star.id] = star;
                    }
                }
            };
            for (var i = 0; i < revealedStarsOfPlayer.length; i++) {
                var star = revealedStarsOfPlayer[i];
                var detectionRange = this.player.starIsDetected(star) ? star.getDetectionRange() : 0;
                var visionRange = this.player.starIsDetected(star) ? star.getVisionRange() : 1;
                processDetectionSource(star, detectionRange, visionRange);
            }
            for (var i = 0; i < visibleFleetsOfPlayer.length; i++) {
                var fleet = visibleFleetsOfPlayer[i];
                var detectionRange = this.estimateFleetDetectionRange(fleet);
                var visionRange = this.estimateFleetVisionRange(fleet);
                processDetectionSource(fleet.location, detectionRange, visionRange);
            }
            return ({
                visible: visibleStars,
                detected: detectedStars
            });
        };
        MapEvaluator.prototype.getPlayerVisionMap = function (player) {
            if (!this.cachedVisionMaps[player.id]) {
                this.cachedVisionMaps[player.id] = this.buildPlayerVisionMap(player);
            }
            return this.cachedVisionMaps[player.id];
        };
        MapEvaluator.prototype.getScoredPerimeterLocationsAgainstPlayer = function (player, safetyFactor, forScouting) {
            var ownInfluence = this.getPlayerInfluenceMap(this.player);
            var enemyInfluence = this.getPlayerInfluenceMap(player);
            var enemyVision = this.getPlayerVisionMap(player);
            var scores = [];
            var revealedStars = this.player.getRevealedStars();
            var stars = revealedStars.filter(function (star) {
                return star.owner.isIndependent || star.owner === this.player;
            }, this);
            for (var i = 0; i < stars.length; i++) {
                var star = stars[i];
                var nearestOwnedStar = player.getNearestOwnedStarTo(star);
                if (!nearestOwnedStar)
                    debugger;
                var distanceToEnemy = star.getDistanceToStar(nearestOwnedStar);
                distanceToEnemy = Math.max(distanceToEnemy - 1, 1);
                var distanceScore = Math.pow(1 / distanceToEnemy, 2);
                var danger = enemyInfluence[star.id] || 1;
                if (!enemyVision.visible[star.id]) {
                    danger *= 0.5;
                }
                danger *= safetyFactor;
                if (forScouting) {
                    var safety = ownInfluence[star.id] / (danger * safetyFactor);
                    var score = safety * distanceScore;
                }
                else {
                    var score = (danger / ownInfluence[star.id]) / safetyFactor;
                }
                scores.push({
                    star: star,
                    score: score
                });
            }
            return scores;
        };
        MapEvaluator.prototype.getDesireToGoToWarWith = function (player) {
            var strength = this.estimateGlobalStrength(player);
            var opinion = this.player.diplomacyStatus.getOpinionOf(player);
            var threat = this.getPerceivedThreatOfPlayer(player);
            return Math.random();
        };
        MapEvaluator.prototype.getAbilityToGoToWarWith = function (player) {
            var strength = this.estimateGlobalStrength(player);
            return Math.random();
        };
        MapEvaluator.prototype.getDiplomacyEvaluations = function (currentTurn) {
            var evaluationByPlayer = {};
            var neighborStarsCountByPlayer = {};
            var allNeighbors = this.player.getNeighboringStars();
            var neighborStarsForPlayer = [];
            for (var i = 0; i < allNeighbors.length; i++) {
                var star = allNeighbors[i];
                if (!star.owner.isIndependent) {
                    if (!neighborStarsCountByPlayer[star.owner.id]) {
                        neighborStarsCountByPlayer[star.owner.id] = 0;
                    }
                    neighborStarsCountByPlayer[star.owner.id]++;
                }
            }
            for (var playerId in this.player.diplomacyStatus.metPlayers) {
                var player = this.player.diplomacyStatus.metPlayers[playerId];
                evaluationByPlayer[player.id] =
                    {
                        currentTurn: currentTurn,
                        opinion: this.player.diplomacyStatus.getOpinionOf(player),
                        neighborStars: neighborStarsCountByPlayer[player.id],
                        currentStatus: this.player.diplomacyStatus.statusByPlayer[player.id]
                    };
            }
            return evaluationByPlayer;
        };
        return MapEvaluator;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapEvaluator;
});
define("src/mapai/GrandStrategyAI", ["require", "exports", "src/utility"], function (require, exports, utility_14) {
    "use strict";
    var GrandStrategyAI = (function () {
        function GrandStrategyAI(personality, mapEvaluator) {
            this.personality = personality;
            this.mapEvaluator = mapEvaluator;
        }
        GrandStrategyAI.prototype.setDesiredStars = function () {
            var totalStarsInMap = this.mapEvaluator.map.stars.length;
            var playersInGame = this.mapEvaluator.game.playerOrder.length;
            var starsPerPlayer = totalStarsInMap / playersInGame;
            var baseMinStarsDesired = starsPerPlayer * 0.34;
            var baseMaxStarsDesired = starsPerPlayer;
            var extraMinStarsDesired = this.personality.expansiveness * (starsPerPlayer * 0.66);
            var extraMaxStarsDesired = this.personality.expansiveness * (starsPerPlayer * (playersInGame / 4));
            var minStarsDesired = baseMinStarsDesired + extraMinStarsDesired;
            var maxStarsDesired = baseMaxStarsDesired + extraMaxStarsDesired;
            this.desiredStars =
                {
                    min: minStarsDesired,
                    max: maxStarsDesired
                };
        };
        GrandStrategyAI.prototype.setDesires = function () {
            this.desireForExpansion = this.getDesireForExpansion();
            this.desireForWar = this.getDesireForWar();
            this.desireForConsolidation = 0.4 + 0.6 * (1 - this.desireForExpansion);
        };
        GrandStrategyAI.prototype.getDesireForWar = function () {
            if (!this.desiredStars)
                this.setDesiredStars();
            var fromAggressiveness = this.personality.aggressiveness;
            var fromExpansiveness = 0;
            var minStarsStillDesired = this.mapEvaluator.player.controlledLocations.length - this.desiredStars.min;
            var availableExpansionTargets = this.mapEvaluator.getIndependentNeighborStarIslands(minStarsStillDesired);
            if (availableExpansionTargets.length < minStarsStillDesired) {
                fromExpansiveness += this.personality.expansiveness / (1 + availableExpansionTargets.length);
            }
            var desire = fromAggressiveness + fromExpansiveness;
            return utility_14.clamp(desire, 0, 1);
        };
        GrandStrategyAI.prototype.getDesireForExpansion = function () {
            if (!this.desiredStars)
                this.setDesiredStars();
            var starsOwned = this.mapEvaluator.player.controlledLocations.length;
            var desire = 1 - utility_14.getRelativeValue(starsOwned, this.desiredStars.min, this.desiredStars.max);
            return utility_14.clamp(desire, 0.1, 1);
        };
        return GrandStrategyAI;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = GrandStrategyAI;
});
define("src/mapai/Front", ["require", "exports", "src/Fleet"], function (require, exports, Fleet_3) {
    "use strict";
    var Front = (function () {
        function Front(props) {
            this.hasMustered = false;
            this.id = props.id;
            this.objective = props.objective;
            this.units = props.units || [];
            this.minUnitsDesired = props.minUnitsDesired;
            this.idealUnitsDesired = props.idealUnitsDesired;
            this.targetLocation = props.targetLocation;
            this.musterLocation = props.musterLocation;
        }
        Front.prototype.organizeFleets = function () {
            var allFleets = this.getAssociatedFleets();
            var pureFleetsByLocation = {};
            var impureFleetMembersByLocation = {};
            var ownUnitFilterFN = function (unit) {
                return this.getUnitIndex(unit) >= 0;
            }.bind(this);
            for (var i = 0; i < allFleets.length; i++) {
                var fleet = allFleets[i];
                var star = fleet.location;
                if (this.isFleetPure(fleet)) {
                    if (!pureFleetsByLocation[star.id]) {
                        pureFleetsByLocation[star.id] = [];
                    }
                    pureFleetsByLocation[star.id].push(fleet);
                }
                else {
                    var ownUnits = fleet.units.filter(ownUnitFilterFN);
                    for (var j = 0; j < ownUnits.length; j++) {
                        if (!impureFleetMembersByLocation[star.id]) {
                            impureFleetMembersByLocation[star.id] = [];
                        }
                        impureFleetMembersByLocation[star.id].push(ownUnits[j]);
                    }
                }
            }
            var sortFleetsBySizeFN = function (a, b) {
                return b.units.length - a.units.length;
            };
            for (var starId in pureFleetsByLocation) {
                var fleets = pureFleetsByLocation[starId];
                if (fleets.length > 1) {
                    fleets.sort(sortFleetsBySizeFN);
                    for (var i = fleets.length - 1; i >= 1; i--) {
                        fleets[i].mergeWith(fleets[0]);
                        fleets.splice(i, 1);
                    }
                }
                if (impureFleetMembersByLocation[starId]) {
                    for (var i = impureFleetMembersByLocation[starId].length - 1; i >= 0; i--) {
                        var unit = impureFleetMembersByLocation[starId][i];
                        unit.fleet.transferUnit(fleets[0], unit);
                        impureFleetMembersByLocation[starId].splice(i, 1);
                    }
                }
            }
            for (var starId in impureFleetMembersByLocation) {
                var units = impureFleetMembersByLocation[starId];
                if (units.length < 1)
                    continue;
                var newFleet = new Fleet_3.default(units[0].fleet.player, [], units[0].fleet.location);
                for (var i = units.length - 1; i >= 0; i--) {
                    units[i].fleet.transferUnit(newFleet, units[i]);
                }
            }
        };
        Front.prototype.isFleetPure = function (fleet) {
            for (var i = 0; i < fleet.units.length; i++) {
                if (this.getUnitIndex(fleet.units[i]) === -1) {
                    return false;
                }
            }
            return true;
        };
        Front.prototype.getAssociatedFleets = function () {
            var fleetsById = {};
            for (var i = 0; i < this.units.length; i++) {
                if (!this.units[i].fleet)
                    continue;
                if (!fleetsById[this.units[i].fleet.id]) {
                    fleetsById[this.units[i].fleet.id] = this.units[i].fleet;
                }
            }
            var allFleets = [];
            for (var fleetId in fleetsById) {
                allFleets.push(fleetsById[fleetId]);
            }
            return allFleets;
        };
        Front.prototype.getUnitIndex = function (unit) {
            return this.units.indexOf(unit);
        };
        Front.prototype.addUnit = function (unit) {
            if (unit.front) {
                unit.front.removeUnit(unit);
            }
            unit.front = this;
            this.units.push(unit);
        };
        Front.prototype.removeUnit = function (unit) {
            var unitIndex = this.getUnitIndex(unit);
            unit.front = null;
            this.units.splice(unitIndex, 1);
        };
        Front.prototype.getUnitCountByArchetype = function () {
            var unitCountByArchetype = {};
            for (var i = 0; i < this.units.length; i++) {
                var archetype = this.units[i].template.archetype;
                if (!unitCountByArchetype[archetype.type]) {
                    unitCountByArchetype[archetype.type] = 0;
                }
                unitCountByArchetype[archetype.type]++;
            }
            return unitCountByArchetype;
        };
        Front.prototype.getUnitsByLocation = function () {
            var byLocation = {};
            for (var i = 0; i < this.units.length; i++) {
                var star = this.units[i].fleet.location;
                if (!byLocation[star.id]) {
                    byLocation[star.id] = [];
                }
                byLocation[star.id].push(this.units[i]);
            }
            return byLocation;
        };
        Front.prototype.moveFleets = function (afterMoveCallback) {
            if (this.units.length < 1) {
                afterMoveCallback();
                return;
            }
            else {
                var moveRoutine = this.objective.template.moveRoutineFN;
                moveRoutine(this, afterMoveCallback);
            }
        };
        Front.prototype.hasUnit = function (unit) {
            return this.units.indexOf(unit) !== -1;
        };
        Front.prototype.scoreUnitFit = function (unit) {
            var template = this.objective.template;
            var score = 1;
            if (this.hasUnit(unit)) {
                score += 0.2;
                if (this.hasMustered) {
                    score += 0.3;
                }
                this.removeUnit(unit);
            }
            score *= this.objective.priority;
            score *= template.unitFitFN(unit, this);
            score *= template.unitDesireFN(this);
            return score;
        };
        Front.prototype.getNewUnitArchetypeScores = function () {
            var countByArchetype = this.getUnitCountByArchetype();
            var totalUnits = this.units.length;
            var idealWeights = this.objective.template.preferredUnitComposition;
            var scores = {};
            for (var unitType in idealWeights) {
                var archetypeCount = countByArchetype[unitType] || 0;
                scores[unitType] = totalUnits * idealWeights[unitType] - archetypeCount;
            }
            return scores;
        };
        return Front;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Front;
});
define("src/mapai/DiplomacyAI", ["require", "exports"], function (require, exports) {
    "use strict";
    var DiplomacyAI = (function () {
        function DiplomacyAI(mapEvaluator, objectivesAI, game, personality) {
            this.game = game;
            this.player = mapEvaluator.player;
            this.diplomacyStatus = this.player.diplomacyStatus;
            this.mapEvaluator = mapEvaluator;
            this.objectivesAI = objectivesAI;
            this.personality = personality;
        }
        DiplomacyAI.prototype.setAttitudes = function () {
            var diplomacyEvaluations = this.mapEvaluator.getDiplomacyEvaluations(this.game.turnNumber);
            for (var playerId in diplomacyEvaluations) {
                this.diplomacyStatus.processAttitudeModifiersForPlayer(this.diplomacyStatus.metPlayers[playerId], diplomacyEvaluations[playerId]);
            }
        };
        DiplomacyAI.prototype.resolveDiplomaticObjectives = function (afterAllDoneCallback) {
            var objectives = this.objectivesAI.getObjectivesWithTemplateProperty("diplomacyRoutineFN");
            var adjustments = this.objectivesAI.getAdjustmentsForTemplateProperty("diplomacyRoutineAdjustments");
            this.resolveNextObjective(objectives, adjustments, afterAllDoneCallback);
        };
        DiplomacyAI.prototype.resolveNextObjective = function (objectives, adjustments, afterAllDoneCallback) {
            var objective = objectives.pop();
            if (!objective) {
                afterAllDoneCallback();
                return;
            }
            var boundResolveNextFN = this.resolveNextObjective.bind(this, objectives, adjustments, afterAllDoneCallback);
            objective.template.diplomacyRoutineFN(objective, this, adjustments, boundResolveNextFN);
        };
        return DiplomacyAI;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = DiplomacyAI;
});
define("src/mapai/Objective", ["require", "exports", "src/idGenerators"], function (require, exports, idGenerators_5) {
    "use strict";
    var Objective = (function () {
        function Objective(template, priority, target, targetPlayer) {
            this.isOngoing = false;
            this.id = idGenerators_5.default.objective++;
            this.template = template;
            this.type = this.template.key;
            this.priority = priority;
            this.target = target;
            this.targetPlayer = targetPlayer;
        }
        Object.defineProperty(Objective.prototype, "priority", {
            get: function () {
                return this.isOngoing ? this._basePriority * 1.25 : this._basePriority;
            },
            set: function (priority) {
                this._basePriority = priority;
            },
            enumerable: true,
            configurable: true
        });
        Objective.prototype.getUnitsDesired = function (mapEvaluator) {
            return this.template.unitsToFillObjectiveFN(mapEvaluator, this);
        };
        return Objective;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Objective;
});
define("src/mapai/ObjectivesAI", ["require", "exports", "src/App"], function (require, exports, App_15) {
    "use strict";
    var ObjectivesAI = (function () {
        function ObjectivesAI(mapEvaluator, grandStrategyAI) {
            this.objectivesByType = {};
            this.objectives = [];
            this.requests = [];
            this.mapEvaluator = mapEvaluator;
            this.map = mapEvaluator.map;
            this.player = mapEvaluator.player;
            this.grandStrategyAI = grandStrategyAI;
        }
        ObjectivesAI.prototype.clearObjectives = function () {
            this.objectives = [];
        };
        ObjectivesAI.prototype.setAllDiplomaticObjectives = function () {
            this.clearObjectives();
            this.setAllObjectivesWithTemplateProperty("diplomacyRoutineFN");
        };
        ObjectivesAI.prototype.setAllEconomicObjectives = function () {
            this.clearObjectives();
            this.setAllObjectivesWithTemplateProperty("economyRoutineFN");
        };
        ObjectivesAI.prototype.setAllMoveObjectives = function () {
            this.clearObjectives();
            this.setAllObjectivesWithTemplateProperty("moveRoutineFN");
        };
        ObjectivesAI.prototype.setAllObjectivesWithTemplateProperty = function (propKey) {
            var objectiveTemplates = App_15.default.moduleData.Templates.Objectives;
            for (var key in objectiveTemplates) {
                var template = objectiveTemplates[key];
                if (template[propKey]) {
                    this.setObjectivesOfType(objectiveTemplates[key]);
                }
            }
        };
        ObjectivesAI.prototype.getNewObjectivesOfType = function (objectiveTemplate) {
            var objectiveType = objectiveTemplate.key;
            var byTarget = this.getObjectivesByTarget(objectiveType, true);
            var newObjectives = objectiveTemplate.creatorFunction(this.grandStrategyAI, this.mapEvaluator, this);
            var finalObjectives = [];
            for (var i = 0; i < newObjectives.length; i++) {
                var newObjective = newObjectives[i];
                if (newObjective.priority < 0.04) {
                    continue;
                }
                var keyString = newObjective.target ? newObjective.target.id : "noTarget";
                var oldObjective = byTarget[keyString];
                if (oldObjective) {
                    oldObjective.priority = newObjective.priority;
                    finalObjectives.push(oldObjective);
                }
                else {
                    finalObjectives.push(newObjective);
                }
            }
            return finalObjectives;
        };
        ObjectivesAI.prototype.setObjectivesOfType = function (objectiveTemplate) {
            var newObjectives = this.getNewObjectivesOfType(objectiveTemplate);
            this.objectivesByType[objectiveTemplate.key] = newObjectives;
            this.objectives = this.objectives.concat(newObjectives);
        };
        ObjectivesAI.prototype.getObjectivesByTarget = function (objectiveType, markAsOngoing) {
            var objectivesByTarget = {};
            if (!this.objectivesByType[objectiveType]) {
                return objectivesByTarget;
            }
            for (var i = 0; i < this.objectivesByType[objectiveType].length; i++) {
                var objective = this.objectivesByType[objectiveType][i];
                if (markAsOngoing)
                    objective.isOngoing = true;
                var keyString = objective.target ? objective.target.id : "noTarget";
                objectivesByTarget[keyString] = objective;
            }
            return objectivesByTarget;
        };
        ObjectivesAI.prototype.getObjectivesWithTemplateProperty = function (propKey) {
            return this.objectives.filter(function (objective) {
                return Boolean(objective.template[propKey]);
            });
        };
        ObjectivesAI.prototype.getAdjustmentsForTemplateProperty = function (propKey) {
            var withAdjustment = this.getObjectivesWithTemplateProperty(propKey);
            var adjustments;
            for (var i = 0; i < withAdjustment.length; i++) {
                for (var j = 0; j < withAdjustment[i].template[propKey].length; j++) {
                    var adjustment = withAdjustment[i].template[propKey][j];
                    if (!adjustments[adjustment.target.id]) {
                        adjustments[adjustment.target.id] =
                            {
                                target: adjustment.target,
                                multiplier: 1
                            };
                    }
                    adjustments[adjustment.target.id].multiplier += adjustment.multiplier;
                }
            }
            return adjustments;
        };
        return ObjectivesAI;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ObjectivesAI;
});
define("src/mapai/FrontsAI", ["require", "exports", "src/mapai/Front"], function (require, exports, Front_1) {
    "use strict";
    var FrontsAI = (function () {
        function FrontsAI(mapEvaluator, objectivesAI, personality) {
            this.fronts = [];
            this.frontsRequestingUnits = [];
            this.frontsToMove = [];
            this.mapEvaluator = mapEvaluator;
            this.map = mapEvaluator.map;
            this.player = mapEvaluator.player;
            this.objectivesAI = objectivesAI;
            this.personality = personality;
        }
        FrontsAI.prototype.getUnitScoresForFront = function (units, front) {
            var scores = [];
            for (var i = 0; i < units.length; i++) {
                scores.push({
                    unit: units[i],
                    score: front.scoreUnitFit(units[i]),
                    front: front
                });
            }
            return scores;
        };
        FrontsAI.prototype.assignUnits = function () {
            var units = this.player.getAllUnits();
            var allUnitScores = [];
            var unitScoresByFront = {};
            var recalculateScoresForFront = function (front) {
                var frontScores = unitScoresByFront[front.id];
                for (var i = 0; i < frontScores.length; i++) {
                    frontScores[i].score = front.scoreUnitFit(frontScores[i].unit);
                }
            };
            var removeUnit = function (unit) {
                for (var frontId in unitScoresByFront) {
                    unitScoresByFront[frontId] = unitScoresByFront[frontId].filter(function (score) {
                        return score.unit !== unit;
                    });
                }
            };
            var sortByScoreFN = function (a, b) {
                return a.score - b.score;
            };
            for (var i = 0; i < this.fronts.length; i++) {
                var frontScores = this.getUnitScoresForFront(units, this.fronts[i]);
                unitScoresByFront[this.fronts[i].id] = frontScores;
                allUnitScores = allUnitScores.concat(frontScores);
            }
            var alreadyAdded = {};
            while (allUnitScores.length > 0) {
                allUnitScores.sort(sortByScoreFN);
                var bestScore = allUnitScores.pop();
                if (alreadyAdded[bestScore.unit.id]) {
                    continue;
                }
                bestScore.front.addUnit(bestScore.unit);
                removeUnit(bestScore.unit);
                alreadyAdded[bestScore.unit.id] = true;
                recalculateScoresForFront(bestScore.front);
            }
        };
        FrontsAI.prototype.getFrontWithId = function (id) {
            for (var i = 0; i < this.fronts.length; i++) {
                if (this.fronts[i].id === id) {
                    return this.fronts[i];
                }
            }
            return null;
        };
        FrontsAI.prototype.createFront = function (objective) {
            var musterLocation = objective.target ?
                this.player.getNearestOwnedStarTo(objective.target) :
                null;
            var unitsDesired = objective.getUnitsDesired(this.mapEvaluator);
            var front = new Front_1.default({
                id: objective.id,
                objective: objective,
                minUnitsDesired: unitsDesired.min,
                idealUnitsDesired: unitsDesired.ideal,
                targetLocation: objective.target,
                musterLocation: musterLocation
            });
            return front;
        };
        FrontsAI.prototype.removeInactiveFronts = function () {
            for (var i = this.fronts.length - 1; i >= 0; i--) {
                var front = this.fronts[i];
                var hasActiveObjective = false;
                for (var j = 0; j < this.objectivesAI.objectives.length; j++) {
                    var objective = this.objectivesAI.objectives[j];
                    if (objective.id === front.id) {
                        hasActiveObjective = true;
                        break;
                    }
                }
                if (!hasActiveObjective) {
                    this.fronts.splice(i, 1);
                }
            }
        };
        FrontsAI.prototype.formFronts = function () {
            this.removeInactiveFronts();
            for (var i = 0; i < this.objectivesAI.objectives.length; i++) {
                var objective = this.objectivesAI.objectives[i];
                if (!objective.template.moveRoutineFN) {
                    continue;
                }
                if (!this.getFrontWithId(objective.id)) {
                    var front = this.createFront(objective);
                    this.fronts.push(front);
                }
            }
        };
        FrontsAI.prototype.organizeFleets = function () {
            for (var i = 0; i < this.fronts.length; i++) {
                this.fronts[i].organizeFleets();
            }
        };
        FrontsAI.prototype.setFrontsToMove = function () {
            this.frontsToMove = this.fronts.slice(0);
            this.frontsToMove.sort(function (a, b) {
                return a.objective.template.movePriority - b.objective.template.movePriority;
            });
        };
        FrontsAI.prototype.moveFleets = function (afterMovingAllCallback) {
            var front = this.frontsToMove.pop();
            if (!front) {
                afterMovingAllCallback();
                return;
            }
            front.moveFleets(this.moveFleets.bind(this, afterMovingAllCallback));
        };
        FrontsAI.prototype.setUnitRequests = function () {
            this.frontsRequestingUnits = [];
            for (var i = 0; i < this.fronts.length; i++) {
                var front = this.fronts[i];
                if (front.units.length < front.idealUnitsDesired) {
                    this.frontsRequestingUnits.push(front);
                }
            }
        };
        return FrontsAI;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = FrontsAI;
});
define("src/mapai/EconomyAI", ["require", "exports", "src/utility"], function (require, exports, utility_15) {
    "use strict";
    var EconomyAI = (function () {
        function EconomyAI(props) {
            this.objectivesAI = props.objectivesAI;
            this.frontsAI = props.frontsAI;
            this.mapEvaluator = props.mapEvaluator;
            this.player = props.mapEvaluator.player;
            this.personality = props.personality;
        }
        EconomyAI.prototype.resolveEconomicObjectives = function () {
            var objectives = this.objectivesAI.getObjectivesWithTemplateProperty("economyRoutineFN");
            var adjustments = this.objectivesAI.getAdjustmentsForTemplateProperty("economyRoutineAdjustments");
            for (var i = 0; i < objectives.length; i++) {
                var objective = objectives[i];
                objective.template.economyRoutineFN(objective, this, adjustments);
            }
        };
        EconomyAI.prototype.satisfyAllRequests = function () {
            var allRequests = this.frontsAI.frontsRequestingUnits;
            allRequests.sort(function (a, b) {
                return b.objective.priority - a.objective.priority;
            });
            for (var i = 0; i < allRequests.length; i++) {
                var request = allRequests[i];
                if (request.targetLocation) {
                    this.satisfyFrontRequest(request);
                }
                else {
                }
            }
        };
        EconomyAI.prototype.satisfyFrontRequest = function (front) {
            var player = this.player;
            var starQualifierFN = function (star) {
                return star.owner === player && star.manufactory && !star.manufactory.queueIsFull();
            };
            var star = front.musterLocation.getNearestStarForQualifier(starQualifierFN);
            if (!star) {
                return;
            }
            var manufactory = star.manufactory;
            var archetypeScores = front.getNewUnitArchetypeScores();
            var buildableUnitTypesByArchetype = {};
            var buildableUnitTypes = player.getGloballyBuildableUnits().concat(manufactory.getLocalUnitTypes().manufacturable);
            for (var i = 0; i < buildableUnitTypes.length; i++) {
                var archetype = buildableUnitTypes[i].archetype;
                if (!buildableUnitTypesByArchetype[archetype.type]) {
                    buildableUnitTypesByArchetype[archetype.type] = [];
                }
                if (!archetypeScores[archetype.type]) {
                    archetypeScores[archetype.type] = 0;
                }
                buildableUnitTypesByArchetype[archetype.type].push(buildableUnitTypes[i]);
            }
            var sortedScores = utility_15.getObjectKeysSortedByValue(archetypeScores, "desc");
            var unitType;
            for (var i = 0; i < sortedScores.length; i++) {
                if (buildableUnitTypesByArchetype[sortedScores[i]]) {
                    unitType = utility_15.getRandomArrayItem(buildableUnitTypesByArchetype[sortedScores[i]]);
                    if (this.player.money < unitType.buildCost) {
                        return;
                    }
                    else {
                        break;
                    }
                }
            }
            if (!unitType)
                debugger;
            manufactory.addThingToQueue(unitType, "unit");
        };
        return EconomyAI;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = EconomyAI;
});
define("src/mapai/AIController", ["require", "exports", "src/mapai/MapEvaluator", "src/mapai/GrandStrategyAI", "src/mapai/EconomyAI", "src/mapai/FrontsAI", "src/mapai/ObjectivesAI", "src/mapai/DiplomacyAI", "src/utility"], function (require, exports, MapEvaluator_1, GrandStrategyAI_1, EconomyAI_1, FrontsAI_1, ObjectivesAI_1, DiplomacyAI_1, utility_16) {
    "use strict";
    var AIController = (function () {
        function AIController(player, game, personality) {
            this.personality = personality || utility_16.makeRandomPersonality();
            this.player = player;
            this.game = game;
            this.map = game.galaxyMap;
            this.mapEvaluator = new MapEvaluator_1.default(this.map, this.player, this.game);
            this.grandStrategyAI = new GrandStrategyAI_1.default(this.personality, this.mapEvaluator);
            this.objectivesAI = new ObjectivesAI_1.default(this.mapEvaluator, this.grandStrategyAI);
            this.frontsAI = new FrontsAI_1.default(this.mapEvaluator, this.objectivesAI, this.personality);
            this.economyAI = new EconomyAI_1.default({
                objectivesAI: this.objectivesAI,
                frontsAI: this.frontsAI,
                mapEvaluator: this.mapEvaluator,
                personality: this.personality
            });
            this.diplomacyAI = new DiplomacyAI_1.default(this.mapEvaluator, this.objectivesAI, this.game, this.personality);
        }
        AIController.prototype.processTurn = function (afterFinishedCallback) {
            this.mapEvaluator.processTurnStart();
            this.grandStrategyAI.setDesires();
            this.diplomacyAI.setAttitudes();
            this.objectivesAI.setAllDiplomaticObjectives();
            this.diplomacyAI.resolveDiplomaticObjectives(this.processTurnAfterDiplomaticObjectives.bind(this, afterFinishedCallback));
        };
        AIController.prototype.processTurnAfterDiplomaticObjectives = function (afterFinishedCallback) {
            this.objectivesAI.setAllEconomicObjectives();
            this.economyAI.resolveEconomicObjectives();
            this.objectivesAI.setAllMoveObjectives();
            this.frontsAI.formFronts();
            this.frontsAI.assignUnits();
            this.frontsAI.setUnitRequests();
            this.economyAI.satisfyAllRequests();
            this.frontsAI.organizeFleets();
            this.frontsAI.setFrontsToMove();
            this.frontsAI.moveFleets(this.finishMovingFleets.bind(this, afterFinishedCallback));
        };
        AIController.prototype.finishMovingFleets = function (afterFinishedCallback) {
            this.frontsAI.organizeFleets();
            if (afterFinishedCallback) {
                afterFinishedCallback();
            }
        };
        return AIController;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AIController;
});
define("src/Player", ["require", "exports", "src/idGenerators", "src/App", "src/utility", "src/Flag", "src/BattleSimulator", "src/BattlePrep", "src/DiplomacyStatus", "src/PlayerTechnology", "src/eventManager", "src/colorGeneration", "src/options", "src/mapai/AIController"], function (require, exports, idGenerators_6, App_16, utility_17, Flag_2, BattleSimulator_1, BattlePrep_1, DiplomacyStatus_1, PlayerTechnology_1, eventManager_9, colorGeneration_1, options_2, AIController_1) {
    "use strict";
    var Player = (function () {
        function Player(isAI, id) {
            this.units = {};
            this.resources = {};
            this.fleets = [];
            this.items = [];
            this.isAI = false;
            this.isIndependent = false;
            this.controlledLocations = [];
            this.visionIsDirty = true;
            this.visibleStars = {};
            this.revealedStars = {};
            this.detectedStars = {};
            this.identifiedUnits = {};
            this.tempOverflowedResearchAmount = 0;
            this.listeners = {};
            this.id = isFinite(id) ? id : idGenerators_6.default.player++;
            this.name = "Player " + this.id;
            this.isAI = isAI;
            this.diplomacyStatus = new DiplomacyStatus_1.default(this);
            this.money = 1000;
        }
        Object.defineProperty(Player.prototype, "money", {
            get: function () {
                return this._money;
            },
            set: function (amount) {
                this._money = amount;
                if (!this.isAI) {
                    eventManager_9.default.dispatchEvent("playerMoneyUpdated");
                }
            },
            enumerable: true,
            configurable: true
        });
        Player.prototype.destroy = function () {
            this.diplomacyStatus.destroy();
            this.diplomacyStatus = null;
            this.AIController = null;
            for (var key in this.listeners) {
                eventManager_9.default.removeEventListener(key, this.listeners[key]);
            }
        };
        Player.prototype.die = function () {
            for (var i = 0; i < this.fleets.length; i++) {
                this.fleets[i].deleteFleet(false);
            }
            eventManager_9.default.dispatchEvent("makePlayerDiedNotification", {
                deadPlayerName: this.name
            });
            console.log(this.name + " died");
        };
        Player.prototype.initTechnologies = function (savedData) {
            this.playerTechnology = new PlayerTechnology_1.default(this.getResearchSpeed.bind(this), savedData);
            this.listeners["builtBuildingWithEffect_research"] = eventManager_9.default.addEventListener("builtBuildingWithEffect_research", this.playerTechnology.capTechnologyPrioritiesToMaxNeeded.bind(this.playerTechnology));
        };
        Player.prototype.makeColorScheme = function () {
            var scheme = colorGeneration_1.generateColorScheme(this.color);
            this.color = scheme.main;
            this.secondaryColor = scheme.secondary;
        };
        Player.prototype.setupAI = function (game) {
            this.AIController = new AIController_1.default(this, game, this.personality);
        };
        Player.prototype.makeRandomFlag = function (seed) {
            if (!this.color || !this.secondaryColor)
                this.makeColorScheme();
            this.flag = new Flag_2.default({
                width: 46,
                mainColor: this.color,
                secondaryColor: this.secondaryColor
            });
            this.flag.generateRandom(seed);
        };
        Player.prototype.addUnit = function (unit) {
            this.units[unit.id] = unit;
        };
        Player.prototype.removeUnit = function (unit) {
            this.units[unit.id] = null;
            delete this.units[unit.id];
        };
        Player.prototype.getAllUnits = function () {
            var allUnits = [];
            for (var unitId in this.units) {
                allUnits.push(this.units[unitId]);
            }
            return allUnits;
        };
        Player.prototype.forEachUnit = function (operator) {
            for (var unitId in this.units) {
                operator(this.units[unitId]);
            }
        };
        Player.prototype.getFleetIndex = function (fleet) {
            return this.fleets.indexOf(fleet);
        };
        Player.prototype.addFleet = function (fleet) {
            if (this.getFleetIndex(fleet) >= 0) {
                return;
            }
            this.fleets.push(fleet);
            this.visionIsDirty = true;
        };
        Player.prototype.removeFleet = function (fleet) {
            var fleetIndex = this.getFleetIndex(fleet);
            if (fleetIndex < 0)
                return;
            this.fleets.splice(fleetIndex, 1);
            this.visionIsDirty = true;
        };
        Player.prototype.getFleetsWithPositions = function () {
            var positions = [];
            for (var i = 0; i < this.fleets.length; i++) {
                var fleet = this.fleets[i];
                positions.push({
                    position: fleet.location,
                    data: fleet
                });
            }
            return positions;
        };
        Player.prototype.hasStar = function (star) {
            return (this.controlledLocations.indexOf(star) >= 0);
        };
        Player.prototype.addStar = function (star) {
            if (this.hasStar(star))
                return false;
            star.owner = this;
            this.controlledLocations.push(star);
            this.visionIsDirty = true;
        };
        Player.prototype.removeStar = function (star) {
            var index = this.controlledLocations.indexOf(star);
            if (index < 0)
                return false;
            star.owner = null;
            this.controlledLocations.splice(index, 1);
            this.visionIsDirty = true;
            if (this.controlledLocations.length === 0) {
                App_16.default.game.killPlayer(this);
            }
        };
        Player.prototype.getIncome = function () {
            var income = 0;
            for (var i = 0; i < this.controlledLocations.length; i++) {
                income += this.controlledLocations[i].getIncome();
            }
            return income;
        };
        Player.prototype.addResource = function (resource, amount) {
            if (!this.resources[resource.type]) {
                this.resources[resource.type] = 0;
            }
            this.resources[resource.type] += amount;
        };
        Player.prototype.getResourceIncome = function () {
            var incomeByResource = {};
            for (var i = 0; i < this.controlledLocations.length; i++) {
                var star = this.controlledLocations[i];
                var starIncome = star.getResourceIncome();
                if (!starIncome)
                    continue;
                if (!incomeByResource[starIncome.resource.type]) {
                    incomeByResource[starIncome.resource.type] =
                        {
                            resource: starIncome.resource,
                            amount: 0
                        };
                }
                incomeByResource[starIncome.resource.type].amount += starIncome.amount;
            }
            return incomeByResource;
        };
        Player.prototype.getNeighboringStars = function () {
            var stars = {};
            for (var i = 0; i < this.controlledLocations.length; i++) {
                var currentOwned = this.controlledLocations[i];
                var frontier = currentOwned.getLinkedInRange(1).all;
                for (var j = 0; j < frontier.length; j++) {
                    if (stars[frontier[j].id]) {
                        continue;
                    }
                    else if (frontier[j].owner.id === this.id) {
                        continue;
                    }
                    else {
                        stars[frontier[j].id] = frontier[j];
                    }
                }
            }
            var allStars = [];
            for (var id in stars) {
                allStars.push(stars[id]);
            }
            return allStars;
        };
        Player.prototype.updateVisionInStar = function (star) {
            if (this.diplomacyStatus.getUnMetPlayerCount() > 0) {
                this.meetPlayersInStarByVisibility(star, "visible");
            }
        };
        Player.prototype.updateDetectionInStar = function (star) {
            if (this.diplomacyStatus.getUnMetPlayerCount() > 0) {
                this.meetPlayersInStarByVisibility(star, "detected");
            }
            var unitsToIdentify = star.getAllUnits();
            for (var i = 0; i < unitsToIdentify.length; i++) {
                this.identifyUnit(unitsToIdentify[i]);
            }
        };
        Player.prototype.updateAllVisibilityInStar = function (star) {
            if (this.starIsVisible(star)) {
                this.updateVisionInStar(star);
            }
            if (this.starIsDetected(star)) {
                this.updateDetectionInStar(star);
            }
        };
        Player.prototype.meetPlayersInStarByVisibility = function (star, visibility) {
            var presentPlayersByVisibility = star.getPresentPlayersByVisibility();
            for (var playerId in presentPlayersByVisibility[visibility]) {
                var player = presentPlayersByVisibility[visibility][playerId];
                if (!player.isIndependent && !this.diplomacyStatus.metPlayers[playerId] && !this.isIndependent) {
                    this.diplomacyStatus.meetPlayer(player);
                }
            }
        };
        Player.prototype.updateVisibleStars = function () {
            var previousVisibleStars = utility_17.extendObject(this.visibleStars);
            var previousDetectedStars = utility_17.extendObject(this.detectedStars);
            var newVisibleStars = [];
            var newDetectedStars = [];
            var visibilityHasChanged = false;
            var detectionHasChanged = false;
            this.visibleStars = {};
            this.detectedStars = {};
            var allVisible = [];
            var allDetected = [];
            for (var i = 0; i < this.controlledLocations.length; i++) {
                allVisible = allVisible.concat(this.controlledLocations[i].getVision());
                allDetected = allDetected.concat(this.controlledLocations[i].getDetection());
            }
            for (var i = 0; i < this.fleets.length; i++) {
                allVisible = allVisible.concat(this.fleets[i].getVision());
                allDetected = allDetected.concat(this.fleets[i].getDetection());
            }
            for (var i = 0; i < allVisible.length; i++) {
                var star = allVisible[i];
                if (!this.visibleStars[star.id]) {
                    this.visibleStars[star.id] = star;
                    if (!previousVisibleStars[star.id]) {
                        visibilityHasChanged = true;
                        newVisibleStars.push(star);
                    }
                    if (!this.revealedStars[star.id]) {
                        this.revealedStars[star.id] = star;
                    }
                }
            }
            for (var i = 0; i < allDetected.length; i++) {
                var star = allDetected[i];
                if (!this.detectedStars[star.id]) {
                    this.detectedStars[star.id] = star;
                    if (!previousDetectedStars[star.id]) {
                        detectionHasChanged = true;
                        newDetectedStars.push(star);
                    }
                }
            }
            this.visionIsDirty = false;
            if (!visibilityHasChanged) {
                visibilityHasChanged = (Object.keys(this.visibleStars).length !==
                    Object.keys(previousVisibleStars).length);
            }
            if (!visibilityHasChanged && !detectionHasChanged) {
                detectionHasChanged = (Object.keys(this.detectedStars).length !==
                    Object.keys(previousDetectedStars).length);
            }
            for (var i = 0; i < newVisibleStars.length; i++) {
                this.updateVisionInStar(newVisibleStars[i]);
            }
            for (var i = 0; i < newDetectedStars.length; i++) {
                this.updateDetectionInStar(newDetectedStars[i]);
            }
            if (visibilityHasChanged && !this.isAI) {
                eventManager_9.default.dispatchEvent("renderMap");
            }
            if (detectionHasChanged && !this.isAI) {
                eventManager_9.default.dispatchEvent("renderLayer", "fleets");
            }
        };
        Player.prototype.getVisibleStars = function () {
            if (!this.isAI && options_2.default.debugMode) {
                return this.controlledLocations[0].getLinkedInRange(9999).all;
            }
            if (this.visionIsDirty)
                this.updateVisibleStars();
            var visible = [];
            for (var id in this.visibleStars) {
                var star = this.visibleStars[id];
                visible.push(star);
            }
            return visible;
        };
        Player.prototype.getRevealedStars = function () {
            if (!this.isAI && options_2.default.debugMode) {
                return this.controlledLocations[0].getLinkedInRange(9999).all;
            }
            if (this.visionIsDirty)
                this.updateVisibleStars();
            var toReturn = [];
            for (var id in this.revealedStars) {
                toReturn.push(this.revealedStars[id]);
            }
            return toReturn;
        };
        Player.prototype.getRevealedButNotVisibleStars = function () {
            if (this.visionIsDirty)
                this.updateVisibleStars();
            var toReturn = [];
            for (var id in this.revealedStars) {
                if (!this.visibleStars[id]) {
                    toReturn.push(this.revealedStars[id]);
                }
            }
            return toReturn;
        };
        Player.prototype.getDetectedStars = function () {
            if (!this.isAI && options_2.default.debugMode) {
                return this.controlledLocations[0].getLinkedInRange(9999).all;
            }
            if (this.visionIsDirty)
                this.updateVisibleStars();
            var toReturn = [];
            for (var id in this.detectedStars) {
                toReturn.push(this.detectedStars[id]);
            }
            return toReturn;
        };
        Player.prototype.starIsVisible = function (star) {
            if (!this.isAI && options_2.default.debugMode)
                return true;
            if (this.visionIsDirty)
                this.updateVisibleStars();
            return Boolean(this.visibleStars[star.id]);
        };
        Player.prototype.starIsRevealed = function (star) {
            if (!this.isAI && options_2.default.debugMode)
                return true;
            if (this.visionIsDirty)
                this.updateVisibleStars();
            return Boolean(this.revealedStars[star.id]);
        };
        Player.prototype.starIsDetected = function (star) {
            if (!this.isAI && options_2.default.debugMode)
                return true;
            if (this.visionIsDirty)
                this.updateVisibleStars();
            return Boolean(this.detectedStars[star.id]);
        };
        Player.prototype.getLinksToUnRevealedStars = function () {
            if (this.visionIsDirty)
                this.updateVisibleStars();
            var linksBySourceStarId = {};
            for (var starId in this.revealedStars) {
                var star = this.revealedStars[starId];
                var links = star.getAllLinks();
                for (var i = 0; i < links.length; i++) {
                    var linkedStar = links[i];
                    if (!this.revealedStars[linkedStar.id]) {
                        if (!linksBySourceStarId[star.id]) {
                            linksBySourceStarId[star.id] = [linkedStar];
                        }
                        else {
                            linksBySourceStarId[star.id].push(linkedStar);
                        }
                    }
                }
            }
            return linksBySourceStarId;
        };
        Player.prototype.identifyUnit = function (unit) {
            if (!this.identifiedUnits[unit.id]) {
                this.identifiedUnits[unit.id] = unit;
            }
        };
        Player.prototype.unitIsIdentified = function (unit) {
            if (options_2.default.debugMode && !this.isAI) {
                return true;
            }
            else
                return Boolean(this.identifiedUnits[unit.id]) || Boolean(this.units[unit.id]);
        };
        Player.prototype.fleetIsFullyIdentified = function (fleet) {
            if (options_2.default.debugMode && !this.isAI) {
                return true;
            }
            for (var i = 0; i < fleet.units.length; i++) {
                if (!this.identifiedUnits[fleet.units[i].id]) {
                    return false;
                }
            }
            return true;
        };
        Player.prototype.addItem = function (item) {
            this.items.push(item);
        };
        Player.prototype.removeItem = function (item) {
            var index = this.items.indexOf(item);
            if (index === -1) {
                throw new Error("Player " + this.name + " has no item " + item.id);
            }
            this.items.splice(index, 1);
        };
        Player.prototype.getNearestOwnedStarTo = function (star) {
            var self = this;
            var isOwnedByThisFN = function (star) {
                return star.owner === self;
            };
            return star.getNearestStarForQualifier(isOwnedByThisFN);
        };
        Player.prototype.attackTarget = function (location, target, battleFinishCallback) {
            var battleData = {
                location: location,
                building: target.building,
                attacker: {
                    player: this,
                    units: location.getAllUnitsOfPlayer(this)
                },
                defender: {
                    player: target.enemy,
                    units: target.units
                }
            };
            var battlePrep = new BattlePrep_1.default(battleData);
            if (battlePrep.humanPlayer) {
                App_16.default.reactUI.battlePrep = battlePrep;
                if (battleFinishCallback) {
                    battlePrep.afterBattleFinishCallbacks.push(battleFinishCallback);
                }
                App_16.default.reactUI.switchScene("battlePrep");
            }
            else {
                var battle = battlePrep.makeBattle();
                battle.afterFinishCallbacks.push(battleFinishCallback);
                var simulator = new BattleSimulator_1.default(battle);
                simulator.simulateBattle();
                simulator.finishBattle();
            }
        };
        Player.prototype.getResearchSpeed = function () {
            var research = 0;
            research += App_16.default.moduleData.ruleSet.research.baseResearchSpeed;
            for (var i = 0; i < this.controlledLocations.length; i++) {
                research += this.controlledLocations[i].getResearchPoints();
            }
            return research;
        };
        Player.prototype.getAllManufactories = function () {
            var manufactories = [];
            for (var i = 0; i < this.controlledLocations.length; i++) {
                if (this.controlledLocations[i].manufactory) {
                    manufactories.push(this.controlledLocations[i].manufactory);
                }
            }
            return manufactories;
        };
        Player.prototype.meetsTechnologyRequirements = function (requirements) {
            for (var i = 0; i < requirements.length; i++) {
                var requirement = requirements[i];
                if (this.playerTechnology.technologies[requirement.technology.key].level < requirement.level) {
                    return false;
                }
            }
            return true;
        };
        Player.prototype.getGloballyBuildableUnits = function () {
            var templates = [];
            var typesAlreadyAddedChecked = {};
            var unitsToAdd = App_16.default.moduleData.Templates.UnitFamilies["basic"].associatedTemplates.slice(0);
            if (!this.isAI && options_2.default.debugMode) {
                unitsToAdd = unitsToAdd.concat(App_16.default.moduleData.Templates.UnitFamilies["debug"].associatedTemplates);
            }
            for (var i = 0; i < unitsToAdd.length; i++) {
                var template = unitsToAdd[i];
                if (typesAlreadyAddedChecked[template.type])
                    continue;
                else if (template.technologyRequirements && !this.meetsTechnologyRequirements(template.technologyRequirements)) {
                    typesAlreadyAddedChecked[template.type] = true;
                    continue;
                }
                else {
                    typesAlreadyAddedChecked[template.type] = true;
                    templates.push(template);
                }
            }
            return templates;
        };
        Player.prototype.getGloballyBuildableItems = function () {
            var itemTypes = [];
            for (var key in App_16.default.moduleData.Templates.Items) {
                itemTypes.push(App_16.default.moduleData.Templates.Items[key]);
            }
            return itemTypes;
        };
        Player.prototype.getManufacturingCapacityFor = function (template, type) {
            var totalCapacity = 0;
            var capacityByStar = [];
            var isGloballyBuildable;
            switch (type) {
                case "item":
                    {
                        var globallyBuildableItems = this.getGloballyBuildableItems();
                        isGloballyBuildable = globallyBuildableItems.indexOf(template) !== -1;
                    }
                case "unit":
                    {
                        var globallyBuildableUnits = this.getGloballyBuildableUnits();
                        isGloballyBuildable = globallyBuildableUnits.indexOf(template) !== -1;
                    }
            }
            var manufactories = this.getAllManufactories();
            for (var i = 0; i < manufactories.length; i++) {
                var manufactory = manufactories[i];
                var isBuildable = !manufactory.queueIsFull() &&
                    (isGloballyBuildable || manufactory.canManufactureThing(template, type));
                if (isBuildable) {
                    var capacity = manufactory.capacity - manufactory.buildQueue.length;
                    totalCapacity += capacity;
                    capacityByStar.push({
                        star: manufactory.star,
                        capacity: capacity
                    });
                }
            }
            return totalCapacity;
        };
        Player.prototype.serialize = function () {
            var unitIds = [];
            for (var id in this.units) {
                unitIds.push(this.units[id].id);
            }
            var revealedStarIds = [];
            for (var id in this.revealedStars) {
                revealedStarIds.push(this.revealedStars[id].id);
            }
            var identifiedUnitIds = [];
            for (var id in this.identifiedUnits) {
                identifiedUnitIds.push(this.identifiedUnits[id].id);
            }
            var data = {
                id: this.id,
                name: this.name,
                color: this.color.serialize(),
                colorAlpha: this.colorAlpha,
                secondaryColor: this.secondaryColor.serialize(),
                isIndependent: this.isIndependent,
                isAI: this.isAI,
                resources: utility_17.extendObject(this.resources),
                diplomacyStatus: this.diplomacyStatus.serialize(),
                fleets: this.fleets.map(function (fleet) { return fleet.serialize(); }),
                money: this.money,
                controlledLocationIds: this.controlledLocations.map(function (star) { return star.id; }),
                items: this.items.map(function (item) { return item.serialize(); }),
                unitIds: unitIds,
                revealedStarIds: revealedStarIds,
                identifiedUnitIds: identifiedUnitIds
            };
            if (this.playerTechnology) {
                data.researchByTechnology = this.playerTechnology.serialize();
            }
            if (this.flag) {
                data.flag = this.flag.serialize();
            }
            if (this.isAI && this.AIController) {
                data.personality = utility_17.extendObject(this.AIController.personality);
            }
            return data;
        };
        return Player;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Player;
});
define("src/BattlePrep", ["require", "exports", "src/App", "src/Battle"], function (require, exports, App_17, Battle_1) {
    "use strict";
    var BattlePrep = (function () {
        function BattlePrep(battleData) {
            this.alreadyPlaced = {};
            this.minDefendersInNeutralTerritory = 1;
            this.afterBattleFinishCallbacks = [];
            this.attacker = battleData.attacker.player;
            this.attackerUnits = battleData.attacker.units;
            this.defender = battleData.defender.player;
            this.defenderUnits = battleData.defender.units;
            this.battleData = battleData;
            this.resetBattleStats();
            this.triggerPassiveSkills();
            this.makeAIFormations();
            this.setupPlayer();
        }
        BattlePrep.prototype.resetBattleStats = function () {
            var star = this.battleData.location;
            var allUnits = star.getAllUnitsOfPlayer(this.attacker).concat(star.getAllUnitsOfPlayer(this.defender));
            for (var i = 0; i < allUnits.length; i++) {
                allUnits[i].resetBattleStats();
            }
        };
        BattlePrep.prototype.triggerPassiveSkills = function () {
            var star = this.battleData.location;
            var allUnits = star.getAllUnitsOfPlayer(this.attacker).concat(star.getAllUnitsOfPlayer(this.defender));
            for (var i = 0; i < allUnits.length; i++) {
                var unit = allUnits[i];
                var passiveSkillsByPhase = unit.getPassiveSkillsByPhase();
                if (passiveSkillsByPhase.inBattlePrep) {
                    for (var j = 0; j < passiveSkillsByPhase.inBattlePrep.length; j++) {
                        var skill = passiveSkillsByPhase.inBattlePrep[j];
                        for (var k = 0; k < skill.inBattlePrep.length; k++) {
                            skill.inBattlePrep[k](unit, this);
                        }
                    }
                }
            }
        };
        BattlePrep.prototype.makeEmptyFormation = function () {
            var formation = [];
            for (var i = 0; i < App_17.default.moduleData.ruleSet.battle.rowsPerFormation; i++) {
                var row = [];
                for (var j = 0; j < App_17.default.moduleData.ruleSet.battle.cellsPerRow; j++) {
                    row.push(null);
                }
                formation.push(row);
            }
            return formation;
        };
        BattlePrep.prototype.makeAIFormations = function () {
            if (this.attacker.isAI) {
                this.attackerFormation = this.makeAutoFormation(this.battleData.attacker.units, this.battleData.defender.units, this.attacker);
            }
            if (this.defender.isAI) {
                this.defenderFormation = this.makeAutoFormation(this.battleData.defender.units, this.battleData.attacker.units, this.defender);
            }
        };
        BattlePrep.prototype.setupPlayer = function () {
            if (!this.attacker.isAI) {
                this.availableUnits = this.battleData.attacker.units;
                this.enemyUnits = this.battleData.defender.units;
                this.attackerFormation = this.makeEmptyFormation();
                this.playerFormation = this.attackerFormation;
                this.enemyFormation = this.defenderFormation;
                this.humanPlayer = this.attacker;
                this.enemyPlayer = this.defender;
            }
            else if (!this.defender.isAI) {
                this.availableUnits = this.battleData.defender.units;
                this.enemyUnits = this.battleData.attacker.units;
                this.defenderFormation = this.makeEmptyFormation();
                this.playerFormation = this.defenderFormation;
                this.enemyFormation = this.attackerFormation;
                this.humanPlayer = this.defender;
                this.enemyPlayer = this.attacker;
            }
        };
        BattlePrep.prototype.makeAutoFormation = function (units, enemyUnits, player) {
            var self = this;
            var maxUnitsPerSide = App_17.default.moduleData.ruleSet.battle.maxUnitsPerSide;
            var maxUnitsPerRow = App_17.default.moduleData.ruleSet.battle.maxUnitsPerRow;
            var formation = this.makeEmptyFormation();
            var unitsToPlace = units.filter(function (unit) {
                return unit.canActThisTurn();
            });
            var placedInFront = 0;
            var placedInBack = 0;
            var totalPlaced = 0;
            var unitsPlacedByArchetype = {};
            var getUnitScoreFN = function (unit, row) {
                var score = unit.getStrengthEvaluation();
                var archetype = unit.template.archetype;
                var rowModifier = archetype.rowScores[row];
                if (archetype.scoreMultiplierForRowFN) {
                    var rowUnits = row === "ROW_FRONT" ? formation[1] : formation[0];
                    var scoutedUnits = player.starIsDetected(self.battleData.location) ? enemyUnits : null;
                    rowModifier = archetype.scoreMultiplierForRowFN(row, rowUnits, scoutedUnits);
                }
                var idealMaxUnits = Math.ceil(maxUnitsPerSide / archetype.idealWeightInBattle);
                var unitsPlaced = unitsPlacedByArchetype[archetype.type] || 0;
                var overMax = Math.max(0, unitsPlaced - idealMaxUnits);
                score *= 1 - overMax * 0.15;
                score *= rowModifier;
                return ({
                    unit: unit,
                    score: score,
                    row: row
                });
            };
            while (unitsToPlace.length > 0 && totalPlaced < maxUnitsPerSide) {
                var positionScores = [];
                for (var i = 0; i < unitsToPlace.length; i++) {
                    var unit = unitsToPlace[i];
                    if (placedInFront < maxUnitsPerRow) {
                        positionScores.push(getUnitScoreFN(unit, "ROW_FRONT"));
                    }
                    if (placedInBack < maxUnitsPerRow) {
                        positionScores.push(getUnitScoreFN(unit, "ROW_BACK"));
                    }
                }
                positionScores.sort(function (a, b) {
                    return (b.score - a.score);
                });
                var topScore = positionScores[0];
                if (topScore.row === "ROW_FRONT") {
                    placedInFront++;
                    formation[1][placedInFront - 1] = topScore.unit;
                }
                else {
                    placedInBack++;
                    formation[0][placedInBack - 1] = topScore.unit;
                }
                totalPlaced++;
                if (!unitsPlacedByArchetype[topScore.unit.template.archetype.type]) {
                    unitsPlacedByArchetype[topScore.unit.template.archetype.type] = 0;
                }
                unitsPlacedByArchetype[topScore.unit.template.archetype.type]++;
                unitsToPlace.splice(unitsToPlace.indexOf(topScore.unit), 1);
            }
            return formation;
        };
        BattlePrep.prototype.getUnitPosition = function (unit) {
            return this.alreadyPlaced[unit.id];
        };
        BattlePrep.prototype.getUnitAtPosition = function (position) {
            return this.playerFormation[position[0]][position[1]];
        };
        BattlePrep.prototype.clearPlayerFormation = function () {
            this.alreadyPlaced = {};
            this.playerFormation = this.makeEmptyFormation();
        };
        BattlePrep.prototype.setupPlayerFormation = function (formation) {
            for (var i = 0; i < formation.length; i++) {
                for (var j = 0; j < formation[i].length; j++) {
                    if (formation[i][j]) {
                        this.setUnit(formation[i][j], [i, j]);
                    }
                }
            }
        };
        BattlePrep.prototype.setUnit = function (unit, position) {
            this.removeUnit(unit);
            if (!position) {
                return;
            }
            var oldUnitInPosition = this.getUnitAtPosition(position);
            if (oldUnitInPosition) {
                this.removeUnit(oldUnitInPosition);
            }
            this.playerFormation[position[0]][position[1]] = unit;
            this.alreadyPlaced[unit.id] = position;
        };
        BattlePrep.prototype.swapUnits = function (unit1, unit2) {
            if (unit1 === unit2)
                return;
            var new1Pos = this.getUnitPosition(unit2);
            var new2Pos = this.getUnitPosition(unit1);
            this.setUnit(unit1, new1Pos);
            this.setUnit(unit2, new2Pos);
        };
        BattlePrep.prototype.removeUnit = function (unit) {
            var currentPosition = this.getUnitPosition(unit);
            if (!currentPosition)
                return;
            this.playerFormation[currentPosition[0]][currentPosition[1]] = null;
            this.alreadyPlaced[unit.id] = null;
            delete this.alreadyPlaced[unit.id];
        };
        BattlePrep.prototype.humanFormationIsValid = function () {
            var unitsPlaced = 0;
            this.forEachUnitInFormation(this.playerFormation, function (unit) {
                if (unit)
                    unitsPlaced++;
            });
            var minRequiredUnits = 0;
            if (!this.attacker.isAI) {
                minRequiredUnits = 1;
            }
            else if (!this.battleData.building) {
                minRequiredUnits = this.minDefendersInNeutralTerritory;
            }
            minRequiredUnits = Math.min(minRequiredUnits, this.availableUnits.length);
            return unitsPlaced >= minRequiredUnits;
        };
        BattlePrep.prototype.forEachUnitInFormation = function (formation, operator) {
            for (var i = 0; i < formation.length; i++) {
                for (var j = 0; j < formation[i].length; j++) {
                    operator(formation[i][j]);
                }
            }
        };
        BattlePrep.prototype.makeBattle = function () {
            var side1Formation = this.playerFormation || this.attackerFormation;
            var side2Formation = this.enemyFormation || this.defenderFormation;
            var side1Player = this.humanPlayer || this.attacker;
            var side2Player = this.enemyPlayer || this.defender;
            var battle = new Battle_1.default({
                battleData: this.battleData,
                side1: side1Formation,
                side2: side2Formation.reverse(),
                side1Player: side1Player,
                side2Player: side2Player
            });
            battle.afterFinishCallbacks = battle.afterFinishCallbacks.concat(this.afterBattleFinishCallbacks);
            battle.init();
            return battle;
        };
        return BattlePrep;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BattlePrep;
});
define("src/DamageType", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/AbilityUpgradeData", ["require", "exports"], function (require, exports) {
    "use strict";
});
define("src/Unit", ["require", "exports", "src/idGenerators", "src/App", "src/utility", "src/Item", "src/Fleet"], function (require, exports, idGenerators_7, App_18, utility_18, Item_3, Fleet_4) {
    "use strict";
    var Unit = (function () {
        function Unit(template, id, data) {
            this.abilities = [];
            this.passiveSkills = [];
            this.items = {
                low: null,
                mid: null,
                high: null
            };
            this.passiveSkillsByPhase = {};
            this.passiveSkillsByPhaseAreDirty = true;
            this.uiDisplayIsDirty = true;
            this.id = isFinite(id) ? id : idGenerators_7.default.unit++;
            this.template = template;
            this.isSquadron = template.isSquadron;
            if (data) {
                this.makeFromData(data);
            }
            else {
                this.setCulture();
                this.setInitialValues();
            }
            this.displayFlags =
                {
                    isAnnihilated: false
                };
        }
        Object.defineProperty(Unit.prototype, "attributes", {
            get: function () {
                if (this.attributesAreDirty || !this.cachedAttributes) {
                    this.updateCachedAttributes();
                }
                return this.cachedAttributes;
            },
            enumerable: true,
            configurable: true
        });
        Unit.prototype.makeFromData = function (data) {
            this.name = data.name;
            this.maxHealth = data.maxHealth;
            this.currentHealth = data.currentHealth;
            this.currentMovePoints = data.currentMovePoints;
            this.maxMovePoints = data.maxMovePoints;
            this.timesActedThisTurn = data.timesActedThisTurn;
            this.baseAttributes = utility_18.extendObject(data.baseAttributes);
            this.cachedAttributes = utility_18.extendObject(this.baseAttributes);
            this.abilities = data.abilityTemplateTypes.map(function (key) {
                var template = App_18.default.moduleData.Templates.Abilities[key];
                if (!template) {
                    throw new Error("Couldn't find ability " + key);
                }
                return template;
            });
            this.passiveSkills = data.passiveSkillTemplateTypes.map(function (key) {
                var template = App_18.default.moduleData.Templates.PassiveSkills[key];
                if (!template) {
                    throw new Error("Couldn't find passive skill " + key);
                }
                return template;
            });
            this.experienceForCurrentLevel = data.experienceForCurrentLevel;
            this.level = data.level;
            this.battleStats =
                {
                    moveDelay: data.battleStats.moveDelay,
                    side: data.battleStats.side,
                    position: data.battleStats.position,
                    currentActionPoints: data.battleStats.currentActionPoints,
                    guardAmount: data.battleStats.guardAmount,
                    guardCoverage: data.battleStats.guardCoverage,
                    captureChance: data.battleStats.captureChance,
                    statusEffects: data.battleStats.statusEffects,
                    lastHealthBeforeReceivingDamage: this.currentHealth,
                    queuedAction: !data.battleStats.queuedAction ? null :
                        {
                            ability: App_18.default.moduleData.Templates.Abilities[data.battleStats.queuedAction.abilityTemplateKey],
                            targetId: data.battleStats.queuedAction.targetId,
                            turnsPrepared: data.battleStats.queuedAction.turnsPrepared,
                            timesInterrupted: data.battleStats.queuedAction.timesInterrupted
                        },
                    isAnnihilated: data.battleStats.isAnnihilated
                };
            var items = {};
            ["low", "mid", "high"].forEach(function (slot) {
                if (data.items[slot]) {
                    var item = data.items[slot];
                    if (!item)
                        return;
                    items[slot] = new Item_3.default(App_18.default.moduleData.Templates.Items[item.templateType], item.id);
                }
            });
            this.items =
                {
                    low: null,
                    mid: null,
                    high: null
                };
            for (var slot in items) {
                this.addItem(items[slot]);
            }
            if (data.portraitKey) {
                this.portrait = utility_18.findItemWithKey(App_18.default.moduleData.Templates.Cultures, data.portraitKey, "portraits");
            }
        };
        Unit.prototype.setInitialValues = function () {
            this.setBaseHealth();
            this.setAttributes();
            this.resetBattleStats();
            this.maxMovePoints = this.template.maxMovePoints;
            this.resetMovePoints();
            this.setInitialAbilities();
            this.setInitialPassiveSkills();
            this.level = 1;
            this.experienceForCurrentLevel = 0;
            this.timesActedThisTurn = 0;
        };
        Unit.prototype.setBaseHealth = function (multiplier) {
            if (multiplier === void 0) { multiplier = 1; }
            var min = 200 * this.template.maxHealth * multiplier;
            var max = 300 * this.template.maxHealth * multiplier;
            this.maxHealth = utility_18.randInt(min, max);
            this.currentHealth = this.maxHealth;
        };
        Unit.prototype.setAttributes = function (baseSkill, variance) {
            if (baseSkill === void 0) { baseSkill = 1; }
            if (variance === void 0) { variance = 1; }
            var template = this.template;
            var attributes = {
                attack: 1,
                defence: 1,
                intelligence: 1,
                speed: 1,
                maxActionPoints: utility_18.randInt(3, 5)
            };
            for (var attribute in template.attributeLevels) {
                var attributeLevel = template.attributeLevels[attribute];
                var min = Math.max(3 * baseSkill * attributeLevel, 1);
                var max = Math.max(5 * baseSkill * attributeLevel + variance, 1);
                attributes[attribute] = utility_18.randInt(min, max);
                if (attributes[attribute] > 9)
                    attributes[attribute] = 9;
            }
            this.baseAttributes = utility_18.extendObject(attributes);
            this.cachedAttributes = attributes;
            this.attributesAreDirty = true;
        };
        Unit.prototype.setCulture = function () {
            var templateCultures = this.template.cultures;
            var nameGeneratorFN;
            var nameGeneratorCandidateCultures = templateCultures.filter(function (cultureTemplate) {
                return Boolean(cultureTemplate.nameGenerator);
            });
            if (nameGeneratorCandidateCultures.length > 0) {
                nameGeneratorFN = utility_18.getRandomArrayItem(nameGeneratorCandidateCultures).nameGenerator;
            }
            else {
                nameGeneratorFN = utility_18.defaultNameGenerator;
            }
            this.name = nameGeneratorFN(this);
            var portraitCandidateCultures = templateCultures.filter(function (cultureTemplate) {
                return Boolean(cultureTemplate.portraits);
            });
            if (portraitCandidateCultures.length === 0) {
                portraitCandidateCultures = utility_18.getAllPropertiesWithKey(App_18.default.moduleData.Templates.Cultures, "portraits");
                if (portraitCandidateCultures.length === 0) {
                    console.warn("No culture has portraits specified");
                    return;
                }
            }
            var portraitCandidateCulturesWithWeights = portraitCandidateCultures.map(function (culture) {
                return ({
                    weight: Object.keys(culture.portraits).length,
                    culture: culture
                });
            });
            var portraitCulture = utility_18.getRandomArrayItemWithWeights(portraitCandidateCulturesWithWeights).culture;
            this.portrait = utility_18.getRandomProperty(portraitCulture.portraits);
        };
        Unit.prototype.getBaseMoveDelay = function () {
            return 30 - this.attributes.speed;
        };
        Unit.prototype.resetMovePoints = function () {
            this.currentMovePoints = this.maxMovePoints;
        };
        Unit.prototype.resetBattleStats = function () {
            this.battleStats =
                {
                    moveDelay: this.getBaseMoveDelay(),
                    currentActionPoints: this.attributes.maxActionPoints,
                    side: null,
                    position: null,
                    guardAmount: 0,
                    guardCoverage: null,
                    captureChance: App_18.default.moduleData.ruleSet.battle.baseUnitCaptureChance,
                    statusEffects: [],
                    lastHealthBeforeReceivingDamage: this.currentHealth,
                    queuedAction: null,
                    isAnnihilated: false
                };
            this.displayFlags =
                {
                    isAnnihilated: false
                };
        };
        Unit.prototype.setBattlePosition = function (battle, side, position) {
            this.battleStats.side = side;
            this.battleStats.position = position;
        };
        Unit.prototype.addStrength = function (amount) {
            this.currentHealth += Math.round(amount);
            if (this.currentHealth > this.maxHealth) {
                this.currentHealth = this.maxHealth;
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.removeStrength = function (amount) {
            this.currentHealth -= Math.round(amount);
            this.currentHealth = utility_18.clamp(this.currentHealth, 0, this.maxHealth);
            if (amount > 0) {
                this.removeGuard(40);
            }
            if (this.currentHealth === 0) {
                this.battleStats.isAnnihilated = true;
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.removeActionPoints = function (amount) {
            this.battleStats.currentActionPoints -= amount;
            if (this.battleStats.currentActionPoints < 0) {
                this.battleStats.currentActionPoints = 0;
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.addMoveDelay = function (amount) {
            this.battleStats.moveDelay += amount;
        };
        Unit.prototype.updateStatusEffects = function () {
            for (var i = 0; i < this.battleStats.statusEffects.length; i++) {
                this.battleStats.statusEffects[i].processTurnEnd();
                if (this.battleStats.statusEffects[i].duration === 0) {
                    this.removeStatusEffect(this.battleStats.statusEffects[i]);
                }
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.setQueuedAction = function (ability, target) {
            this.battleStats.queuedAction =
                {
                    ability: ability,
                    targetId: target.id,
                    turnsPrepared: 0,
                    timesInterrupted: 0
                };
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.interruptQueuedAction = function (interruptStrength) {
            var action = this.battleStats.queuedAction;
            if (!action)
                return;
            action.timesInterrupted += interruptStrength;
            if (action.timesInterrupted >= action.ability.preparation.interruptsNeeded) {
                this.clearQueuedAction();
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.updateQueuedAction = function () {
            var action = this.battleStats.queuedAction;
            if (!action)
                return;
            action.turnsPrepared++;
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.isReadyToUseQueuedAction = function () {
            var action = this.battleStats.queuedAction;
            return (action && action.turnsPrepared >= action.ability.preparation.turnsToPrep);
        };
        Unit.prototype.clearQueuedAction = function () {
            this.battleStats.queuedAction = null;
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.isTargetable = function () {
            return this.isActiveInBattle();
        };
        Unit.prototype.isActiveInBattle = function () {
            return this.currentHealth > 0 && !this.battleStats.isAnnihilated;
        };
        Unit.prototype.addItem = function (item) {
            var itemSlot = item.template.slot;
            if (this.items[itemSlot])
                return false;
            if (item.unit) {
                item.unit.removeItem(item);
            }
            this.items[itemSlot] = item;
            item.unit = this;
            if (item.template.attributes) {
                this.attributesAreDirty = true;
            }
            if (item.template.passiveSkill) {
                this.passiveSkillsByPhaseAreDirty = true;
            }
        };
        Unit.prototype.removeItem = function (item) {
            var itemSlot = item.template.slot;
            if (this.items[itemSlot] === item) {
                this.items[itemSlot] = null;
                item.unit = null;
                if (item.template.attributes) {
                    this.attributesAreDirty = true;
                }
                if (item.template.passiveSkill) {
                    this.passiveSkillsByPhaseAreDirty = true;
                }
                return true;
            }
            return false;
        };
        Unit.prototype.destroyAllItems = function () {
            for (var slot in this.items) {
                var item = this.items[slot];
                if (item) {
                    this.fleet.player.removeItem(item);
                }
            }
        };
        Unit.prototype.getAttributesWithItems = function () {
            var attributes = utility_18.extendObject(this.baseAttributes);
            for (var itemSlot in this.items) {
                if (this.items[itemSlot]) {
                    var item = this.items[itemSlot];
                    for (var attribute in item.template.attributes) {
                        attributes[attribute] = utility_18.clamp(attributes[attribute] + item.template.attributes[attribute], 1, 9);
                    }
                }
            }
            return attributes;
        };
        Unit.prototype.addStatusEffect = function (statusEffect) {
            if (this.battleStats.statusEffects.indexOf(statusEffect) !== -1) {
                throw new Error("Tried to add duplicate status effect to unit " + this.name);
            }
            else if (statusEffect.duration === 0) {
                console.warn("Tried to add status effect", statusEffect, "with 0 duration");
                return;
            }
            this.battleStats.statusEffects.push(statusEffect);
            if (statusEffect.template.attributes) {
                this.attributesAreDirty = true;
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.removeStatusEffect = function (statusEffect) {
            var index = this.battleStats.statusEffects.indexOf(statusEffect);
            if (index === -1) {
                throw new Error("Tried to remove status effect not active on unit " + this.name);
            }
            this.battleStats.statusEffects.splice(index, 1);
            if (statusEffect.template.attributes) {
                this.attributesAreDirty = true;
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.getTotalStatusEffectAttributeAdjustments = function () {
            if (!this.battleStats || !this.battleStats.statusEffects) {
                return null;
            }
            var adjustments = {};
            for (var i = 0; i < this.battleStats.statusEffects.length; i++) {
                var statusEffect = this.battleStats.statusEffects[i];
                if (!statusEffect.template.attributes)
                    continue;
                for (var attribute in statusEffect.template.attributes) {
                    adjustments[attribute] = {};
                    for (var type in statusEffect.template.attributes[attribute]) {
                        if (!adjustments[attribute][type]) {
                            adjustments[attribute][type] = 0;
                        }
                        adjustments[attribute][type] += statusEffect.template.attributes[attribute][type];
                    }
                }
            }
            return adjustments;
        };
        Unit.prototype.getAttributesWithEffects = function () {
            var withItems = this.getAttributesWithItems();
            var adjustments = this.getTotalStatusEffectAttributeAdjustments();
            for (var attribute in adjustments) {
                if (adjustments[attribute].flat) {
                    withItems[attribute] += adjustments[attribute].flat;
                }
                if (adjustments[attribute].multiplier) {
                    withItems[attribute] *= 1 + adjustments[attribute].multiplier;
                }
                withItems[attribute] = utility_18.clamp(withItems[attribute], -5, 20);
            }
            return withItems;
        };
        Unit.prototype.updateCachedAttributes = function () {
            this.cachedAttributes = this.getAttributesWithEffects();
        };
        Unit.prototype.removeItemAtSlot = function (slot) {
            if (this.items[slot]) {
                this.removeItem(this.items[slot]);
                return true;
            }
            return false;
        };
        Unit.prototype.setInitialAbilities = function () {
            this.abilities = utility_18.getItemsFromWeightedProbabilities(this.template.possibleAbilities);
        };
        Unit.prototype.setInitialPassiveSkills = function () {
            if (this.template.possiblePassiveSkills) {
                this.passiveSkills = utility_18.getItemsFromWeightedProbabilities(this.template.possiblePassiveSkills);
            }
        };
        Unit.prototype.getItemAbilities = function () {
            var itemAbilities = [];
            for (var slot in this.items) {
                if (!this.items[slot] || !this.items[slot].template.ability)
                    continue;
                itemAbilities.push(this.items[slot].template.ability);
            }
            return itemAbilities;
        };
        Unit.prototype.getAllAbilities = function () {
            return this.abilities.concat(this.getItemAbilities());
        };
        Unit.prototype.getItemPassiveSkills = function () {
            var itemPassiveSkills = [];
            for (var slot in this.items) {
                if (!this.items[slot] || !this.items[slot].template.passiveSkill)
                    continue;
                itemPassiveSkills.push(this.items[slot].template.passiveSkill);
            }
            return itemPassiveSkills;
        };
        Unit.prototype.getAllPassiveSkills = function () {
            var allSkills = [];
            allSkills = allSkills.concat(this.passiveSkills);
            allSkills = allSkills.concat(this.getItemPassiveSkills());
            return allSkills;
        };
        Unit.prototype.updatePassiveSkillsByPhase = function () {
            var updatedSkills = {};
            var allSkills = this.getAllPassiveSkills();
            for (var i = 0; i < allSkills.length; i++) {
                var skill = allSkills[i];
                ["atBattleStart", "atTurnStart", "inBattlePrep"].forEach(function (phase) {
                    if (skill[phase]) {
                        if (!updatedSkills[phase]) {
                            updatedSkills[phase] = [];
                        }
                        if (updatedSkills[phase].indexOf(skill) === -1) {
                            updatedSkills[phase].push(skill);
                        }
                    }
                });
            }
            this.passiveSkillsByPhase = updatedSkills;
            this.passiveSkillsByPhaseAreDirty = false;
        };
        Unit.prototype.getPassiveSkillsByPhase = function () {
            if (this.passiveSkillsByPhaseAreDirty) {
                this.updatePassiveSkillsByPhase();
            }
            return this.passiveSkillsByPhase;
        };
        Unit.prototype.receiveDamage = function (amount, damageType) {
            var damageReduction = this.getReducedDamageFactor(damageType);
            var adjustedDamage = amount * damageReduction;
            this.battleStats.lastHealthBeforeReceivingDamage = this.currentHealth;
            this.removeStrength(adjustedDamage);
        };
        Unit.prototype.getAdjustedTroopSize = function () {
            var balancedHealth = this.currentHealth + this.battleStats.lastHealthBeforeReceivingDamage / 3;
            this.battleStats.lastHealthBeforeReceivingDamage = this.currentHealth;
            var currentHealth = this.isSquadron ?
                balancedHealth :
                Math.min(this.maxHealth, balancedHealth + this.maxHealth * 0.2);
            if (currentHealth <= 500) {
                return currentHealth;
            }
            else if (currentHealth <= 2000) {
                return currentHealth / 2 + 250;
            }
            else {
                return currentHealth / 4 + 750;
            }
        };
        Unit.prototype.getAttackDamageIncrease = function (damageType) {
            var attackStat, attackFactor;
            switch (damageType) {
                case 0:
                    {
                        attackStat = this.attributes.attack;
                        attackFactor = 0.1;
                        break;
                    }
                case 1:
                    {
                        attackStat = this.attributes.intelligence;
                        attackFactor = 0.1;
                        break;
                    }
            }
            var troopSize = this.getAdjustedTroopSize() / 4;
            return (1 + attackStat * attackFactor) * troopSize;
        };
        Unit.prototype.getReducedDamageFactor = function (damageType) {
            var defensiveStat, defenceFactor;
            var finalDamageMultiplier = 1;
            switch (damageType) {
                case 0:
                    {
                        defensiveStat = this.attributes.defence;
                        defenceFactor = 0.045;
                        var guardAmount = Math.min(this.battleStats.guardAmount, 100);
                        finalDamageMultiplier = 1 - guardAmount / 200;
                        break;
                    }
                case 1:
                    {
                        defensiveStat = this.attributes.intelligence;
                        defenceFactor = 0.045;
                        break;
                    }
            }
            var damageReduction = defensiveStat * defenceFactor;
            var finalDamageFactor = (1 - damageReduction) * finalDamageMultiplier;
            return finalDamageFactor;
        };
        Unit.prototype.addToFleet = function (fleet) {
            this.fleet = fleet;
        };
        Unit.prototype.removeFromFleet = function () {
            this.fleet = null;
        };
        Unit.prototype.removeFromPlayer = function () {
            var player = this.fleet.player;
            this.destroyAllItems();
            player.removeUnit(this);
            this.fleet.removeUnit(this);
            if (this.front) {
                this.front.removeUnit(this);
            }
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.transferToPlayer = function (newPlayer) {
            var oldPlayer = this.fleet.player;
            var location = this.fleet.location;
            this.removeFromPlayer();
            newPlayer.addUnit(this);
            var newFleet = new Fleet_4.default(newPlayer, [this], location);
        };
        Unit.prototype.removeGuard = function (amount) {
            this.battleStats.guardAmount -= amount;
            if (this.battleStats.guardAmount < 0)
                this.removeAllGuard();
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.addGuard = function (amount, coverage) {
            this.battleStats.guardAmount += amount;
            this.battleStats.guardCoverage = coverage;
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.removeAllGuard = function () {
            this.battleStats.guardAmount = 0;
            this.battleStats.guardCoverage = null;
            this.uiDisplayIsDirty = true;
        };
        Unit.prototype.getCounterAttackStrength = function () {
            return 1;
        };
        Unit.prototype.canActThisTurn = function () {
            return this.timesActedThisTurn < 1 || this.fleet.player.isIndependent;
        };
        Unit.prototype.isStealthy = function () {
            return this.template.isStealthy;
        };
        Unit.prototype.getVisionRange = function () {
            return this.template.visionRange;
        };
        Unit.prototype.getDetectionRange = function () {
            return this.template.detectionRange;
        };
        Unit.prototype.heal = function () {
            var location = this.fleet.location;
            var baseHealFactor = 0.05;
            var healingFactor = baseHealFactor + location.getHealingFactor(this.fleet.player);
            var healAmount = this.maxHealth * healingFactor;
            this.addStrength(healAmount);
        };
        Unit.prototype.getStrengthEvaluation = function () {
            return this.currentHealth;
        };
        Unit.prototype.getTotalCost = function () {
            var totalCost = 0;
            totalCost += this.template.buildCost;
            for (var slot in this.items) {
                if (this.items[slot]) {
                    totalCost += this.items[slot].template.buildCost;
                }
            }
            return totalCost;
        };
        Unit.prototype.getTurnsToReachStar = function (star) {
            var currentLocation = this.fleet.location;
            var distance = currentLocation.getDistanceToStar(star);
            if (distance <= this.currentMovePoints) {
                if (this.currentMovePoints === 0) {
                    return 0;
                }
                else {
                    return distance / this.currentMovePoints;
                }
            }
            distance -= this.currentMovePoints;
            return distance / this.maxMovePoints;
        };
        Unit.prototype.getExperienceToNextLevel = function () {
            return (4 + this.level) * 10;
        };
        Unit.prototype.addExperience = function (amount) {
            this.experienceForCurrentLevel += Math.round(amount);
        };
        Unit.prototype.canLevelUp = function () {
            return this.experienceForCurrentLevel >= this.getExperienceToNextLevel();
        };
        Unit.prototype.handleLevelUp = function () {
            this.experienceForCurrentLevel -= this.getExperienceToNextLevel();
            this.level++;
        };
        Unit.prototype.hasAbility = function (ability, allAbilities) {
            for (var i = 0; i < allAbilities.length; i++) {
                if (allAbilities[i].type === ability.type) {
                    return true;
                }
            }
            return false;
        };
        Unit.prototype.getLearnableAbilities = function (allAbilities) {
            var abilities = [];
            if (!this.template.learnableAbilities)
                return abilities;
            for (var i = 0; i < this.template.learnableAbilities.length; i++) {
                var learnableItem = this.template.learnableAbilities[i];
                if (Array.isArray(learnableItem)) {
                    var hasAbilityFromGroup = false;
                    for (var j = 0; j < learnableItem.length; j++) {
                        if (this.hasAbility(learnableItem[j], allAbilities)) {
                            hasAbilityFromGroup = true;
                            break;
                        }
                    }
                    if (!hasAbilityFromGroup) {
                        abilities = abilities.concat(learnableItem);
                    }
                }
                else if (!this.hasAbility(learnableItem, allAbilities)) {
                    abilities.push(learnableItem);
                }
            }
            return abilities;
        };
        Unit.prototype.canUpgradeIntoAbility = function (ability, allAbilities) {
            if (ability.onlyAllowExplicitUpgrade) {
                if (!this.template.specialAbilityUpgrades || this.template.specialAbilityUpgrades.indexOf(ability) === -1) {
                    return false;
                }
            }
            if (this.hasAbility(ability, allAbilities)) {
                return false;
            }
            return true;
        };
        Unit.prototype.getAbilityUpgradeData = function () {
            var upgradeData = {};
            var allAbilities = this.getAllAbilities();
            allAbilities = allAbilities.concat(this.getAllPassiveSkills());
            var templates = App_18.default.moduleData.Templates;
            for (var i = 0; i < allAbilities.length; i++) {
                var parentAbility = allAbilities[i];
                if (!parentAbility.canUpgradeInto)
                    continue;
                for (var j = 0; j < parentAbility.canUpgradeInto.length; j++) {
                    var childAbilityType = parentAbility.canUpgradeInto[j];
                    var childAbility = templates.Abilities[childAbilityType] || templates.PassiveSkills[childAbilityType];
                    if (!childAbility)
                        throw new Error("Invalid ability upgrade " + childAbilityType);
                    if (this.canUpgradeIntoAbility(childAbility, allAbilities)) {
                        if (!upgradeData[parentAbility.type]) {
                            upgradeData[parentAbility.type] =
                                {
                                    base: parentAbility,
                                    possibleUpgrades: []
                                };
                        }
                        upgradeData[parentAbility.type].possibleUpgrades.push(childAbility);
                    }
                }
            }
            var learnable = this.getLearnableAbilities(allAbilities);
            if (learnable.length > 0) {
                upgradeData["learnable"] =
                    {
                        base: null,
                        possibleUpgrades: learnable
                    };
            }
            return upgradeData;
        };
        Unit.prototype.upgradeAbility = function (source, newAbility) {
            var newAbilityIsPassiveSkill = !newAbility.mainEffect;
            if (source) {
                var sourceIsPassiveSkill = !source.mainEffect;
                if (sourceIsPassiveSkill) {
                    this.passiveSkills.splice(this.passiveSkills.indexOf(source), 1);
                }
                else {
                    var castedSource = source;
                    this.abilities.splice(this.abilities.indexOf(castedSource), 1);
                }
            }
            if (newAbilityIsPassiveSkill) {
                this.passiveSkills.push(newAbility);
            }
            else {
                var castedNewAbility = newAbility;
                this.abilities.push(castedNewAbility);
            }
        };
        Unit.prototype.drawBattleScene = function (params) {
            this.template.unitDrawingFN(this, params);
        };
        Unit.prototype.serialize = function (includeItems, includeFluff) {
            if (includeItems === void 0) { includeItems = true; }
            if (includeFluff === void 0) { includeFluff = true; }
            var itemsSaveData = {};
            if (includeItems) {
                for (var slot in this.items) {
                    if (this.items[slot]) {
                        itemsSaveData[slot] = this.items[slot].serialize();
                    }
                }
            }
            var battleStatsSavedData = {
                moveDelay: this.battleStats.moveDelay,
                side: this.battleStats.side,
                position: this.battleStats.position,
                currentActionPoints: this.battleStats.currentActionPoints,
                guardAmount: this.battleStats.guardAmount,
                guardCoverage: this.battleStats.guardCoverage,
                captureChance: this.battleStats.captureChance,
                statusEffects: this.battleStats.statusEffects.map(function (statusEffect) {
                    return statusEffect.clone();
                }),
                queuedAction: !this.battleStats.queuedAction ? null :
                    {
                        abilityTemplateKey: this.battleStats.queuedAction.ability.type,
                        targetId: this.battleStats.queuedAction.targetId,
                        turnsPrepared: this.battleStats.queuedAction.turnsPrepared,
                        timesInterrupted: this.battleStats.queuedAction.timesInterrupted
                    },
                isAnnihilated: this.battleStats.isAnnihilated
            };
            var data = {
                templateType: this.template.type,
                id: this.id,
                name: this.name,
                maxHealth: this.maxHealth,
                currentHealth: this.currentHealth,
                currentMovePoints: this.currentMovePoints,
                maxMovePoints: this.maxMovePoints,
                timesActedThisTurn: this.timesActedThisTurn,
                baseAttributes: utility_18.extendObject(this.baseAttributes),
                abilityTemplateTypes: this.abilities.map(function (ability) {
                    return ability.type;
                }),
                passiveSkillTemplateTypes: this.passiveSkills.map(function (passiveSkill) {
                    return passiveSkill.type;
                }),
                experienceForCurrentLevel: this.experienceForCurrentLevel,
                level: this.level,
                items: itemsSaveData,
                battleStats: battleStatsSavedData
            };
            if (this.fleet) {
                data.fleetId = this.fleet.id;
            }
            if (includeFluff) {
                data.portraitKey = this.portrait.key;
            }
            return data;
        };
        Unit.prototype.makeVirtualClone = function () {
            var data = this.serialize(true, false);
            var clone = new Unit(this.template, this.id, data);
            return clone;
        };
        return Unit;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Unit;
});
define("src/Star", ["require", "exports", "src/idGenerators", "src/App", "src/eventManager", "src/Manufactory", "src/pathfinding"], function (require, exports, idGenerators_8, App_19, eventManager_10, Manufactory_2, pathFinding_2) {
    "use strict";
    var Star = (function () {
        function Star(x, y, id) {
            this.linksTo = [];
            this.linksFrom = [];
            this.mapGenData = {};
            this.fleets = {};
            this.buildings = {};
            this.buildingsEffectIsDirty = true;
            this.indexedNeighborsInRange = {};
            this.indexedDistanceToStar = {};
            this.buildableUnitTypes = [];
            this.id = isFinite(id) ? id : idGenerators_8.default.star++;
            this.name = "Star " + this.id;
            this.x = x;
            this.y = y;
        }
        Star.prototype.addBuilding = function (building) {
            if (!this.buildings[building.template.category]) {
                this.buildings[building.template.category] = [];
            }
            var buildings = this.buildings[building.template.category];
            if (buildings.indexOf(building) >= 0) {
                throw new Error("Already has building");
            }
            buildings.push(building);
            this.buildingsEffectIsDirty = true;
            if (building.template.category === "defence") {
                this.sortDefenceBuildings();
                eventManager_10.default.dispatchEvent("renderLayer", "nonFillerStars", this);
            }
            if (building.template.category === "vision") {
                this.owner.updateVisibleStars();
            }
            if (this.owner === App_19.default.humanPlayer) {
                for (var key in building.template.effect) {
                    eventManager_10.default.dispatchEvent("builtBuildingWithEffect_" + key);
                }
                eventManager_10.default.dispatchEvent("humanPlayerBuiltBuilding");
            }
        };
        Star.prototype.removeBuilding = function (building) {
            if (!this.buildings[building.template.category] ||
                this.buildings[building.template.category].indexOf(building) < 0) {
                throw new Error("Location doesn't have building");
            }
            var buildings = this.buildings[building.template.category];
            this.buildings[building.template.category].splice(buildings.indexOf(building), 1);
            this.buildingsEffectIsDirty = true;
        };
        Star.prototype.sortDefenceBuildings = function () {
            this.buildings["defence"].sort(function (a, b) {
                if (a.template.maxPerType === 1) {
                    return -1;
                }
                else if (b.template.maxPerType === 1) {
                    return 1;
                }
                if (a.upgradeLevel !== b.upgradeLevel) {
                    return b.upgradeLevel - a.upgradeLevel;
                }
                return a.id - b.id;
            });
        };
        Star.prototype.getSecondaryController = function () {
            if (!this.buildings["defence"])
                return null;
            var defenceBuildings = this.buildings["defence"];
            for (var i = 0; i < defenceBuildings.length; i++) {
                if (defenceBuildings[i].controller !== this.owner) {
                    return defenceBuildings[i].controller;
                }
            }
            return null;
        };
        Star.prototype.updateController = function () {
            if (!this.buildings["defence"])
                return;
            var oldOwner = this.owner;
            var newOwner = this.buildings["defence"][0].controller;
            if (oldOwner) {
                if (oldOwner === newOwner)
                    return;
                oldOwner.removeStar(this);
            }
            newOwner.addStar(this);
            if (this.manufactory) {
                this.manufactory.handleOwnerChange();
            }
            eventManager_10.default.dispatchEvent("renderLayer", "nonFillerStars", this);
            eventManager_10.default.dispatchEvent("renderLayer", "starOwners", this);
            eventManager_10.default.dispatchEvent("renderLayer", "ownerBorders", this);
        };
        Star.prototype.updateBuildingsEffect = function () {
            var effect = {};
            for (var category in this.buildings) {
                for (var i = 0; i < this.buildings[category].length; i++) {
                    var building = this.buildings[category][i];
                    building.getEffect(effect);
                }
            }
            this.buildingsEffect = effect;
            this.buildingsEffectIsDirty = false;
        };
        Star.prototype.getBuildingsEffect = function () {
            if (this.buildingsEffectIsDirty) {
                this.updateBuildingsEffect();
            }
            return this.buildingsEffect;
        };
        Star.prototype.getEffectWithBuildingsEffect = function (base, effectType) {
            var effect = base;
            var buildingsEffect = this.getBuildingsEffect()[effectType];
            if (isFinite(buildingsEffect)) {
                return effect + buildingsEffect;
            }
            else if (buildingsEffect) {
                effect += (buildingsEffect.flat || 0);
                effect *= (isFinite(buildingsEffect.multiplier) ? 1 + buildingsEffect.multiplier : 1);
            }
            return effect;
        };
        Star.prototype.getIncome = function () {
            return this.getEffectWithBuildingsEffect(this.baseIncome, "income");
        };
        Star.prototype.getResourceIncome = function () {
            if (!this.resource)
                return null;
            return ({
                resource: this.resource,
                amount: this.getEffectWithBuildingsEffect(0, "resourceIncome")
            });
        };
        Star.prototype.getResearchPoints = function () {
            return this.getEffectWithBuildingsEffect(0, "research");
        };
        Star.prototype.getAllBuildings = function () {
            var buildings = [];
            for (var category in this.buildings) {
                buildings = buildings.concat(this.buildings[category]);
            }
            return buildings;
        };
        Star.prototype.getBuildingsForPlayer = function (player) {
            var allBuildings = this.getAllBuildings();
            return allBuildings.filter(function (building) {
                return building.controller.id === player.id;
            });
        };
        Star.prototype.getBuildingsByFamily = function (buildingTemplate) {
            var propToCheck = buildingTemplate.family ? "family" : "type";
            var categoryBuildings = this.buildings[buildingTemplate.category];
            var buildings = [];
            if (categoryBuildings) {
                for (var i = 0; i < categoryBuildings.length; i++) {
                    if (categoryBuildings[i].template[propToCheck] === buildingTemplate[propToCheck]) {
                        buildings.push(categoryBuildings[i]);
                    }
                }
            }
            return buildings;
        };
        Star.prototype.getBuildableBuildings = function () {
            var canBuild = [];
            for (var buildingType in App_19.default.moduleData.Templates.Buildings) {
                var template = App_19.default.moduleData.Templates.Buildings[buildingType];
                var alreadyBuilt;
                if (template.category === "mine" && !this.resource) {
                    continue;
                }
                alreadyBuilt = this.getBuildingsByFamily(template);
                if (alreadyBuilt.length < template.maxPerType && !template.upgradeOnly) {
                    canBuild.push(template);
                }
            }
            return canBuild;
        };
        Star.prototype.getBuildingUpgrades = function () {
            var allUpgrades = {};
            var self = this;
            var ownerBuildings = this.getBuildingsForPlayer(this.owner);
            for (var i = 0; i < ownerBuildings.length; i++) {
                var building = ownerBuildings[i];
                var upgrades = building.getPossibleUpgrades();
                upgrades = upgrades.filter(function (upgradeData) {
                    var parent = upgradeData.parentBuilding.template;
                    var template = upgradeData.template;
                    if (parent.type === template.type) {
                        return true;
                    }
                    else {
                        var isSameFamily = (template.family && parent.family === template.family);
                        var maxAllowed = template.maxPerType;
                        if (isSameFamily) {
                            maxAllowed += 1;
                        }
                        var alreadyBuilt = self.getBuildingsByFamily(template);
                        return alreadyBuilt.length < maxAllowed;
                    }
                });
                if (upgrades.length > 0) {
                    allUpgrades[building.id] = upgrades;
                }
            }
            return allUpgrades;
        };
        Star.prototype.getAllFleets = function () {
            var allFleets = [];
            for (var playerId in this.fleets) {
                allFleets = allFleets.concat(this.fleets[playerId]);
            }
            return allFleets;
        };
        Star.prototype.getFleetIndex = function (fleet) {
            if (!this.fleets[fleet.player.id])
                return -1;
            return this.fleets[fleet.player.id].indexOf(fleet);
        };
        Star.prototype.hasFleet = function (fleet) {
            return this.getFleetIndex(fleet) >= 0;
        };
        Star.prototype.addFleet = function (fleet) {
            if (!this.fleets[fleet.player.id]) {
                this.fleets[fleet.player.id] = [];
            }
            if (this.hasFleet(fleet))
                return false;
            this.fleets[fleet.player.id].push(fleet);
        };
        Star.prototype.addFleets = function (fleets) {
            for (var i = 0; i < fleets.length; i++) {
                this.addFleet(fleets[i]);
            }
        };
        Star.prototype.removeFleet = function (fleet) {
            var fleetIndex = this.getFleetIndex(fleet);
            if (fleetIndex < 0)
                return false;
            this.fleets[fleet.player.id].splice(fleetIndex, 1);
            if (this.fleets[fleet.player.id].length === 0) {
                delete this.fleets[fleet.player.id];
            }
        };
        Star.prototype.removeFleets = function (fleets) {
            for (var i = 0; i < fleets.length; i++) {
                this.removeFleet(fleets[i]);
            }
        };
        Star.prototype.getAllUnitsOfPlayer = function (player) {
            var allUnits = [];
            var fleets = this.fleets[player.id];
            if (!fleets)
                return [];
            for (var i = 0; i < fleets.length; i++) {
                allUnits = allUnits.concat(fleets[i].units);
            }
            return allUnits;
        };
        Star.prototype.getAllUnits = function () {
            var allUnits = [];
            for (var playerId in this.fleets) {
                var fleets = this.fleets[playerId];
                allUnits = allUnits.concat(this.getAllUnitsOfPlayer(fleets[0].player));
            }
            return allUnits;
        };
        Star.prototype.getIndependentUnits = function () {
            var units = [];
            for (var playerId in this.fleets) {
                var player = this.fleets[playerId][0].player;
                if (player.isIndependent) {
                    units = units.concat(this.getAllUnitsOfPlayer(player));
                }
            }
            return units;
        };
        Star.prototype.getTargetsForPlayer = function (player) {
            var buildingTarget = this.getFirstEnemyDefenceBuilding(player);
            var buildingController = buildingTarget ? buildingTarget.controller : null;
            var fleetOwners = this.getEnemyFleetOwners(player, buildingController);
            var diplomacyStatus = player.diplomacyStatus;
            var targets = [];
            if (buildingTarget &&
                (player === this.owner ||
                    diplomacyStatus.canAttackBuildingOfPlayer(buildingTarget.controller))) {
                targets.push({
                    type: "building",
                    enemy: buildingTarget.controller,
                    building: buildingTarget,
                    units: this.getAllUnitsOfPlayer(buildingTarget.controller)
                });
            }
            for (var i = 0; i < fleetOwners.length; i++) {
                if (diplomacyStatus.canAttackFleetOfPlayer(fleetOwners[i])) {
                    targets.push({
                        type: "fleet",
                        enemy: fleetOwners[i],
                        building: null,
                        units: this.getAllUnitsOfPlayer(fleetOwners[i])
                    });
                }
            }
            return targets;
        };
        Star.prototype.getFirstEnemyDefenceBuilding = function (player) {
            if (!this.buildings["defence"])
                return null;
            var defenceBuildings = this.buildings["defence"].slice(0);
            if (this.owner === player)
                defenceBuildings = defenceBuildings.reverse();
            for (var i = defenceBuildings.length - 1; i >= 0; i--) {
                if (defenceBuildings[i].controller.id !== player.id) {
                    return defenceBuildings[i];
                }
            }
            return null;
        };
        Star.prototype.getEnemyFleetOwners = function (player, excludedTarget) {
            var fleetOwners = [];
            for (var playerId in this.fleets) {
                var intPlayerId = parseInt(playerId);
                if (intPlayerId == player.id)
                    continue;
                else if (excludedTarget && intPlayerId == excludedTarget.id)
                    continue;
                else if (this.fleets[playerId].length < 1)
                    continue;
                fleetOwners.push(this.fleets[playerId][0].player);
            }
            return fleetOwners;
        };
        Star.prototype.setPosition = function (x, y) {
            this.x = x;
            this.y = y;
        };
        Star.prototype.setResource = function (resource) {
            this.resource = resource;
        };
        Star.prototype.hasLink = function (linkTo) {
            return this.linksTo.indexOf(linkTo) >= 0 || this.linksFrom.indexOf(linkTo) >= 0;
        };
        Star.prototype.addLink = function (linkTo) {
            if (this.hasLink(linkTo))
                return;
            this.linksTo.push(linkTo);
            linkTo.linksFrom.push(this);
        };
        Star.prototype.removeLink = function (linkTo, removeOpposite) {
            if (removeOpposite === void 0) { removeOpposite = true; }
            if (!this.hasLink(linkTo)) {
                throw new Error("Tried to remove nonexistant link between stars: " + this.id + " <-> " + linkTo.id);
            }
            var toIndex = this.linksTo.indexOf(linkTo);
            if (toIndex >= 0) {
                this.linksTo.splice(toIndex, 1);
            }
            else {
                this.linksFrom.splice(this.linksFrom.indexOf(linkTo), 1);
            }
            if (removeOpposite) {
                linkTo.removeLink(this, false);
            }
        };
        Star.prototype.getAllLinks = function () {
            return this.linksTo.concat(this.linksFrom);
        };
        Star.prototype.getEdgeWith = function (neighbor) {
            for (var i = 0; i < this.voronoiCell.halfedges.length; i++) {
                var edge = this.voronoiCell.halfedges[i].edge;
                if ((edge.lSite && edge.lSite === neighbor) ||
                    (edge.rSite && edge.rSite === neighbor)) {
                    return edge;
                }
            }
            return null;
        };
        Star.prototype.getSharedNeighborsWith = function (neighbor) {
            var ownNeighbors = this.getNeighbors();
            var neighborNeighbors = neighbor.getNeighbors();
            var sharedNeighbors = [];
            for (var i = 0; i < ownNeighbors.length; i++) {
                var star = ownNeighbors[i];
                if (star !== neighbor && neighborNeighbors.indexOf(star) !== -1) {
                    sharedNeighbors.push(star);
                }
            }
            return sharedNeighbors;
        };
        Star.prototype.getNeighbors = function () {
            var neighbors = [];
            for (var i = 0; i < this.voronoiCell.halfedges.length; i++) {
                var edge = this.voronoiCell.halfedges[i].edge;
                if (edge.lSite !== null && edge.lSite.id !== this.id) {
                    neighbors.push(edge.lSite);
                }
                else if (edge.rSite !== null && edge.rSite.id !== this.id) {
                    neighbors.push(edge.rSite);
                }
            }
            return neighbors;
        };
        Star.prototype.getLinkedInRange = function (range) {
            if (this.indexedNeighborsInRange[range]) {
                return this.indexedNeighborsInRange[range];
            }
            var visited = {};
            var visitedByRange = {};
            if (range >= 0) {
                visited[this.id] = this;
            }
            var current = [];
            var frontier = [this];
            for (var i = 0; i < range; i++) {
                current = frontier.slice(0);
                if (current.length <= 0)
                    break;
                frontier = [];
                visitedByRange[i + 1] = [];
                for (var j = 0; j < current.length; j++) {
                    var neighbors = current[j].getAllLinks();
                    for (var k = 0; k < neighbors.length; k++) {
                        if (visited[neighbors[k].id])
                            continue;
                        visited[neighbors[k].id] = neighbors[k];
                        visitedByRange[i + 1].push(neighbors[k]);
                        frontier.push(neighbors[k]);
                        this.indexedDistanceToStar[neighbors[k].id] = i;
                    }
                }
            }
            var allVisited = [];
            for (var id in visited) {
                allVisited.push(visited[id]);
            }
            this.indexedNeighborsInRange[range] =
                {
                    all: allVisited,
                    byRange: visitedByRange
                };
            return ({
                all: allVisited,
                byRange: visitedByRange
            });
        };
        Star.prototype.getIslandForQualifier = function (qualifier, earlyReturnSize) {
            var visited = {};
            var connected = {};
            var sizeFound = 1;
            var initialStar = this;
            var frontier = [initialStar];
            visited[initialStar.id] = true;
            while (frontier.length > 0) {
                var current = frontier.pop();
                connected[current.id] = current;
                var neighbors = current.getLinkedInRange(1).all;
                for (var i = 0; i < neighbors.length; i++) {
                    var neighbor = neighbors[i];
                    if (visited[neighbor.id])
                        continue;
                    visited[neighbor.id] = true;
                    if (qualifier(current, neighbor)) {
                        sizeFound++;
                        frontier.push(neighbor);
                    }
                }
                if (earlyReturnSize && sizeFound >= earlyReturnSize) {
                    for (var i = 0; i < frontier.length; i++) {
                        connected[frontier[i].id] = frontier[i];
                    }
                    break;
                }
            }
            var island = [];
            for (var starId in connected) {
                island.push(connected[starId]);
            }
            return island;
        };
        Star.prototype.getNearestStarForQualifier = function (qualifier) {
            if (qualifier(this))
                return this;
            var visited = {};
            var frontier = [this];
            visited[this.id] = true;
            while (frontier.length > 0) {
                var current = frontier.shift();
                var neighbors = current.getLinkedInRange(1).all;
                for (var i = 0; i < neighbors.length; i++) {
                    var neighbor = neighbors[i];
                    if (visited[neighbor.id])
                        continue;
                    visited[neighbor.id] = true;
                    if (qualifier(neighbor)) {
                        return neighbor;
                    }
                    else {
                        frontier.push(neighbor);
                    }
                }
            }
            return null;
        };
        Star.prototype.getDistanceToStar = function (target) {
            if (!App_19.default.game) {
                var a = pathFinding_2.aStar(this, target);
                return a.cost[target.id];
            }
            else if (!this.indexedDistanceToStar[target.id]) {
                var a = pathFinding_2.aStar(this, target);
                if (!a) {
                    this.indexedDistanceToStar[target.id] = -1;
                }
                else {
                    for (var id in a.cost) {
                        this.indexedDistanceToStar[id] = a.cost[id];
                    }
                }
            }
            return this.indexedDistanceToStar[target.id];
        };
        Star.prototype.getVisionRange = function () {
            return this.getEffectWithBuildingsEffect(1, "vision");
        };
        Star.prototype.getVision = function () {
            return this.getLinkedInRange(this.getVisionRange()).all;
        };
        Star.prototype.getDetectionRange = function () {
            return this.getEffectWithBuildingsEffect(0, "detection");
        };
        Star.prototype.getDetection = function () {
            return this.getLinkedInRange(this.getDetectionRange()).all;
        };
        Star.prototype.getHealingFactor = function (player) {
            var factor = 0;
            if (player === this.owner) {
                factor += 0.15;
            }
            return factor;
        };
        Star.prototype.getPresentPlayersByVisibility = function () {
            var byVisibilityAndId = {
                visible: {},
                detected: {},
                all: {}
            };
            var allPlayers = [];
            byVisibilityAndId.visible[this.owner.id] = this.owner;
            var secondaryController = this.getSecondaryController();
            if (secondaryController) {
                byVisibilityAndId.visible[secondaryController.id] = secondaryController;
            }
            for (var playerId in this.fleets) {
                var fleets = this.fleets[playerId];
                for (var i = 0; i < fleets.length; i++) {
                    var fleetPlayer = fleets[i].player;
                    if (byVisibilityAndId.detected[fleetPlayer.id] && byVisibilityAndId.visible[fleetPlayer.id]) {
                        break;
                    }
                    byVisibilityAndId.all[fleetPlayer.id] = fleetPlayer;
                    if (fleets[i].isStealthy) {
                        byVisibilityAndId.detected[fleetPlayer.id] = fleetPlayer;
                    }
                    else {
                        byVisibilityAndId.visible[fleetPlayer.id] = fleetPlayer;
                    }
                }
            }
            return byVisibilityAndId;
        };
        Star.prototype.getSeed = function () {
            if (!this.seed) {
                var bgString = "";
                bgString += Math.round(this.x);
                bgString += Math.round(this.y);
                bgString += new Date().getTime();
                this.seed = bgString;
            }
            return this.seed;
        };
        Star.prototype.buildManufactory = function () {
            this.manufactory = new Manufactory_2.default(this);
        };
        Star.prototype.serialize = function () {
            var buildings = {};
            for (var category in this.buildings) {
                buildings[category] = [];
                for (var i = 0; i < this.buildings[category].length; i++) {
                    buildings[category].push(this.buildings[category][i].serialize());
                }
            }
            var data = {
                id: this.id,
                x: this.basisX,
                y: this.basisY,
                baseIncome: this.baseIncome,
                name: this.name,
                ownerId: this.owner ? this.owner.id : null,
                linksToIds: this.linksTo.map(function (star) { return star.id; }),
                linksFromIds: this.linksFrom.map(function (star) { return star.id; }),
                seed: this.seed,
                buildableUnitTypes: this.buildableUnitTypes.map(function (template) {
                    return template.type;
                }),
                buildings: buildings,
            };
            if (this.resource) {
                data.resourceType = this.resource.type;
            }
            if (this.manufactory) {
                data.manufactory = this.manufactory.serialize();
            }
            return data;
        };
        return Star;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Star;
});
define("src/MapVoronoiInfo", ["require", "exports"], function (require, exports) {
    "use strict";
    var MapVoronoiInfo = (function () {
        function MapVoronoiInfo() {
            this.nonFillerLines = {};
        }
        MapVoronoiInfo.prototype.getNonFillerVoronoiLines = function (visibleStars) {
            if (!this.diagram)
                return [];
            var indexString = "";
            if (!visibleStars)
                indexString = "all";
            else {
                var ids = visibleStars.map(function (star) { return star.id; });
                ids = ids.sort();
                indexString = ids.join();
            }
            if (!this.nonFillerLines[indexString] ||
                this.nonFillerLines[indexString].length <= 0) {
                this.nonFillerLines[indexString] =
                    this.diagram.edges.filter(function (edge) {
                        var adjacentSites = [edge.lSite, edge.rSite];
                        var adjacentFillerSites = 0;
                        var maxAllowedFillerSites = 2;
                        for (var i = 0; i < adjacentSites.length; i++) {
                            var site = adjacentSites[i];
                            if (!site) {
                                maxAllowedFillerSites--;
                                if (adjacentFillerSites >= maxAllowedFillerSites) {
                                    return false;
                                }
                                continue;
                            }
                            ;
                            if (visibleStars && visibleStars.indexOf(site) < 0) {
                                maxAllowedFillerSites--;
                                if (adjacentFillerSites >= maxAllowedFillerSites) {
                                    return false;
                                }
                                continue;
                            }
                            ;
                            if (!isFinite(site.id)) {
                                adjacentFillerSites++;
                                if (adjacentFillerSites >= maxAllowedFillerSites) {
                                    return false;
                                }
                            }
                            ;
                        }
                        return true;
                    });
            }
            return this.nonFillerLines[indexString];
        };
        MapVoronoiInfo.prototype.getStarAtPoint = function (point) {
            var items = this.treeMap.retrieve(point);
            for (var i = 0; i < items.length; i++) {
                var cell = items[i].cell;
                if (cell.pointIntersection(point.x, point.y) > -1) {
                    return cell.site;
                }
            }
            return null;
        };
        return MapVoronoiInfo;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapVoronoiInfo;
});
define("src/mapgencore/Triangle", ["require", "exports"], function (require, exports) {
    "use strict";
    var Triangle = (function () {
        function Triangle(a, b, c) {
            this.a = a;
            this.b = b;
            this.c = c;
        }
        Triangle.prototype.getPoints = function () {
            return [this.a, this.b, this.c];
        };
        Triangle.prototype.calculateCircumCircle = function (tolerance) {
            if (tolerance === void 0) { tolerance = 0.00001; }
            var pA = this.a;
            var pB = this.b;
            var pC = this.c;
            var m1, m2;
            var mx1, mx2;
            var my1, my2;
            var cX, cY;
            if (Math.abs(pB.y - pA.y) < tolerance) {
                m2 = -(pC.x - pB.x) / (pC.y - pB.y);
                mx2 = (pB.x + pC.x) * 0.5;
                my2 = (pB.y + pC.y) * 0.5;
                cX = (pB.x + pA.x) * 0.5;
                cY = m2 * (cX - mx2) + my2;
            }
            else {
                m1 = -(pB.x - pA.x) / (pB.y - pA.y);
                mx1 = (pA.x + pB.x) * 0.5;
                my1 = (pA.y + pB.y) * 0.5;
                if (Math.abs(pC.y - pB.y) < tolerance) {
                    cX = (pC.x + pB.x) * 0.5;
                    cY = m1 * (cX - mx1) + my1;
                }
                else {
                    m2 = -(pC.x - pB.x) / (pC.y - pB.y);
                    mx2 = (pB.x + pC.x) * 0.5;
                    my2 = (pB.y + pC.y) * 0.5;
                    cX = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);
                    cY = m1 * (cX - mx1) + my1;
                }
            }
            this.circumCenterX = cX;
            this.circumCenterY = cY;
            mx1 = pB.x - cX;
            my1 = pB.y - cY;
            this.circumRadius = Math.sqrt(mx1 * mx1 + my1 * my1);
        };
        Triangle.prototype.circumCircleContainsPoint = function (point) {
            this.calculateCircumCircle();
            var x = point.x - this.circumCenterX;
            var y = point.y - this.circumCenterY;
            var contains = x * x + y * y <= this.circumRadius * this.circumRadius;
            return (contains);
        };
        Triangle.prototype.getEdges = function () {
            var edges = [
                [this.a, this.b],
                [this.b, this.c],
                [this.c, this.a]
            ];
            return edges;
        };
        Triangle.prototype.getAmountOfSharedVerticesWith = function (toCheckAgainst) {
            var ownPoints = this.getPoints();
            var otherPoints = toCheckAgainst.getPoints();
            var shared = 0;
            for (var i = 0; i < ownPoints.length; i++) {
                if (otherPoints.indexOf(ownPoints[i]) >= 0) {
                    shared++;
                }
            }
            return shared;
        };
        return Triangle;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Triangle;
});
define("src/mapgencore/voronoi", ["require", "exports"], function (require, exports) {
    "use strict";
    function makeVoronoi(points, width, height) {
        var boundingBox = {
            xl: 0,
            xr: width,
            yt: 0,
            yb: height
        };
        var voronoi = new Voronoi();
        var diagram = voronoi.compute(points, boundingBox);
        for (var i = 0; i < diagram.cells.length; i++) {
            var cell = diagram.cells[i];
            cell.site.voronoiCell = cell;
            cell.vertices = getVerticesFromCell(cell);
        }
        return diagram;
    }
    exports.makeVoronoi = makeVoronoi;
    function relaxVoronoi(diagram, dampeningFunction) {
        for (var i = 0; i < diagram.cells.length; i++) {
            var cell = diagram.cells[i];
            var point = cell.site;
            var centroid = getPolygonCentroid(cell.vertices);
            if (dampeningFunction) {
                var dampeningValue = dampeningFunction(point);
                var xDelta = (centroid.x - point.x) * dampeningValue;
                var yDelta = (centroid.y - point.y) * dampeningValue;
                point.setPosition(point.x + xDelta, point.y + yDelta);
            }
            else {
                point.setPosition(centroid.x, centroid.y);
            }
        }
    }
    exports.relaxVoronoi = relaxVoronoi;
    function getPolygonCentroid(vertices) {
        var signedArea = 0;
        var x = 0;
        var y = 0;
        var x0;
        var y0;
        var x1;
        var y1;
        var a;
        var i = 0;
        for (i = 0; i < vertices.length - 1; i++) {
            x0 = vertices[i].x;
            y0 = vertices[i].y;
            x1 = vertices[i + 1].x;
            y1 = vertices[i + 1].y;
            a = x0 * y1 - x1 * y0;
            signedArea += a;
            x += (x0 + x1) * a;
            y += (y0 + y1) * a;
        }
        x0 = vertices[i].x;
        y0 = vertices[i].y;
        x1 = vertices[0].x;
        y1 = vertices[0].y;
        a = x0 * y1 - x1 * y0;
        signedArea += a;
        x += (x0 + x1) * a;
        y += (y0 + y1) * a;
        signedArea *= 0.5;
        x /= (6.0 * signedArea);
        y /= (6.0 * signedArea);
        return ({
            x: x,
            y: y
        });
    }
    function getVerticesFromCell(cell) {
        var vertices = [];
        for (var i = 0; i < cell.halfedges.length; i++) {
            vertices.push(cell.halfedges[i].getStartpoint());
        }
        return vertices;
    }
});
define("src/mapgencore/MapGenResult", ["require", "exports", "src/MapVoronoiInfo", "src/GalaxyMap", "src/options", "src/mapgencore/voronoi"], function (require, exports, MapVoronoiInfo_1, GalaxyMap_1, options_3, voronoi_1) {
    "use strict";
    var MapGenResult = (function () {
        function MapGenResult(props) {
            this.stars = props.stars;
            this.fillerPoints = props.fillerPoints;
            this.width = props.width;
            this.height = props.height;
            this.seed = props.seed;
            this.independents = props.independents;
        }
        MapGenResult.prototype.getAllPoints = function () {
            return this.fillerPoints.concat(this.stars);
        };
        MapGenResult.prototype.makeMap = function () {
            this.voronoiInfo = this.makeVoronoiInfo();
            this.clearMapGenData();
            var map = new GalaxyMap_1.default(this);
            return map;
        };
        MapGenResult.prototype.makeVoronoiInfo = function () {
            var voronoiInfo = new MapVoronoiInfo_1.default();
            voronoiInfo.diagram = voronoi_1.makeVoronoi(this.getAllPoints(), this.width, this.height);
            voronoiInfo.treeMap = this.makeVoronoiTreeMap();
            voronoiInfo.bounds =
                {
                    x1: 0,
                    x2: this.width,
                    y1: 0,
                    y2: this.height
                };
            for (var i = 0; i < this.stars.length; i++) {
                var star = this.stars[i];
                star.basisX = star.x;
                star.basisY = star.y;
            }
            voronoi_1.relaxVoronoi(voronoiInfo.diagram, function (point) {
                var castedPoint = point;
                return isFinite(castedPoint.id) ? 1 : 0;
            });
            return voronoiInfo;
        };
        MapGenResult.prototype.makeVoronoiTreeMap = function () {
            var treeMap = new QuadTree({
                x: 0,
                y: 0,
                width: this.width,
                height: this.height
            });
            for (var i = 0; i < this.stars.length; i++) {
                var cell = this.stars[i].voronoiCell;
                var bbox = cell.getBbox();
                bbox.cell = cell;
                treeMap.insert(bbox);
            }
            return treeMap;
        };
        MapGenResult.prototype.clearMapGenData = function () {
            if (options_3.default.debugMode) {
                console.log("Skipped cleaning map gen data due to debug mode being enabled");
                return;
            }
            for (var i = 0; i < this.stars.length; i++) {
                this.stars[i].mapGenData = null;
                delete this.stars[i].mapGenData;
                delete this.stars[i].voronoiId;
            }
        };
        return MapGenResult;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapGenResult;
});
define("src/GalaxyMap", ["require", "exports"], function (require, exports) {
    "use strict";
    var GalaxyMap = (function () {
        function GalaxyMap(mapGen) {
            this.width = mapGen.width;
            this.height = mapGen.height;
            this.seed = mapGen.seed;
            this.stars = mapGen.stars;
            this.fillerPoints = mapGen.fillerPoints;
            this.independents = mapGen.independents;
            this.voronoi = mapGen.voronoiInfo;
        }
        GalaxyMap.prototype.getIncomeBounds = function () {
            var min, max;
            for (var i = 0; i < this.stars.length; i++) {
                var star = this.stars[i];
                var income = star.getIncome();
                if (!min)
                    min = max = income;
                else {
                    if (income < min)
                        min = income;
                    else if (income > max)
                        max = income;
                }
            }
            return ({
                min: min,
                max: max
            });
        };
        GalaxyMap.prototype.serialize = function () {
            var data = {
                stars: this.stars.map(function (star) {
                    return star.serialize();
                }),
                fillerPoints: this.fillerPoints.map(function (fillerPoint) {
                    return fillerPoint.serialize();
                }),
                width: this.width,
                height: this.height,
                seed: this.seed
            };
            return data;
        };
        return GalaxyMap;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = GalaxyMap;
});
define("src/MapRendererLayer", ["require", "exports"], function (require, exports) {
    "use strict";
    var MapRendererLayer = (function () {
        function MapRendererLayer(template) {
            this.isDirty = true;
            this.template = template;
            this.container = new PIXI.Container();
            this.container.interactiveChildren = template.interactive;
            this.alpha = template.alpha || 1;
        }
        Object.defineProperty(MapRendererLayer.prototype, "alpha", {
            get: function () {
                return this._alpha;
            },
            set: function (newAlpha) {
                this._alpha = newAlpha;
                this.container.alpha = newAlpha;
            },
            enumerable: true,
            configurable: true
        });
        MapRendererLayer.prototype.resetAlpha = function () {
            this.alpha = this.template.alpha || 1;
        };
        MapRendererLayer.prototype.draw = function (map, mapRenderer) {
            if (!this.isDirty)
                return;
            this.container.removeChildren();
            this.container.addChild(this.template.drawingFunction.call(mapRenderer, map));
            this.isDirty = false;
        };
        return MapRendererLayer;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapRendererLayer;
});
define("src/MapRendererMapMode", ["require", "exports"], function (require, exports) {
    "use strict";
    var MapRendererMapMode = (function () {
        function MapRendererMapMode(template) {
            this.layers = [];
            this.activeLayers = {};
            this.template = template;
            this.displayName = template.displayName;
        }
        MapRendererMapMode.prototype.addLayer = function (layer, isActive) {
            if (isActive === void 0) { isActive = true; }
            if (this.hasLayer(layer)) {
                throw new Error("Tried to add duplicate layer " + layer.template.key);
            }
            this.layers.push(layer);
            this.activeLayers[layer.template.key] = isActive;
        };
        MapRendererMapMode.prototype.getLayerIndex = function (layer) {
            for (var i = 0; i < this.layers.length; i++) {
                if (this.layers[i] === layer)
                    return i;
            }
            return -1;
        };
        MapRendererMapMode.prototype.hasLayer = function (layer) {
            return this.getLayerIndex(layer) !== -1;
        };
        MapRendererMapMode.prototype.getLayerIndexInContainer = function (layer) {
            var index = -1;
            for (var i = 0; i < this.layers.length; i++) {
                if (this.activeLayers[this.layers[i].template.key]) {
                    index++;
                }
                if (this.layers[i] === layer)
                    return index;
            }
            throw new Error("Map mode doesn't have layer " + layer.template.key);
        };
        MapRendererMapMode.prototype.toggleLayer = function (layer) {
            this.activeLayers[layer.template.key] = !this.activeLayers[layer.template.key];
            if (!this.hasLayer(layer)) {
                this.addLayer(layer);
            }
        };
        MapRendererMapMode.prototype.setLayerIndex = function (layer, newIndex) {
            var prevIndex = this.getLayerIndex(layer);
            var spliced = this.layers.splice(prevIndex, 1)[0];
            this.layers.splice(newIndex, 0, spliced);
        };
        MapRendererMapMode.prototype.insertLayerNextToLayer = function (toInsert, target, position) {
            var indexAdjust = (position === "top" ? -1 : 0);
            var newIndex = this.getLayerIndex(target) + indexAdjust;
            this.setLayerIndex(toInsert, newIndex);
        };
        MapRendererMapMode.prototype.getActiveLayers = function () {
            var self = this;
            return (this.layers.filter(function (layer) {
                return self.activeLayers[layer.template.key];
            }));
        };
        MapRendererMapMode.prototype.resetLayers = function () {
            var layersByKey = {};
            var newLayers = [];
            var newActive = {};
            var layersInTemplate = [];
            var layersNotInTemplate = [];
            for (var i = 0; i < this.layers.length; i++) {
                var layer = this.layers[i];
                layersByKey[layer.template.key] = layer;
            }
            for (var i = 0; i < this.template.layers.length; i++) {
                var layerTemplate = this.template.layers[i];
                var layer = layersByKey[layerTemplate.key];
                newLayers.push(layer);
                newActive[layerTemplate.key] = true;
                delete layersByKey[layerTemplate.key];
            }
            for (var key in layersByKey) {
                var layer = layersByKey[key];
                newLayers.push(layer);
                newActive[key] = false;
            }
            this.layers = newLayers;
            this.activeLayers = newActive;
            for (var i = 0; i < this.layers.length; i++) {
                this.layers[i].resetAlpha();
            }
        };
        return MapRendererMapMode;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapRendererMapMode;
});
define("src/shaders/Occupation", ["require", "exports"], function (require, exports) {
    "use strict";
    var Occupation = (function (_super) {
        __extends(Occupation, _super);
        function Occupation(initialUniformValues) {
            var uniforms = Occupation.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        Occupation.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                angle: { type: "1f", value: initialValues.angle },
                offset: { type: "2fv", value: initialValues.offset },
                scale: { type: "1f", value: initialValues.scale },
                stripeColor: { type: "4fv", value: initialValues.stripeColor },
                stripeSize: { type: "1f", value: initialValues.stripeSize },
            });
        };
        Occupation.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return Occupation;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Occupation;
    var sourceLines = [
        "precision mediump float;",
        "",
        "varying vec2 vTextureCoord;",
        "uniform sampler2D uSampler;",
        "",
        "uniform vec2 offset;",
        "uniform float scale;",
        "uniform float angle;",
        "uniform vec4 stripeColor;",
        "uniform float stripeSize;",
        "",
        "void main()",
        "{",
        "  vec4 color = texture2D(uSampler, vTextureCoord);",
        "",
        "  vec2 pos = gl_FragCoord.xy + offset;",
        "",
        "  vec2 q;",
        "  q.x = cos(angle) * pos.x - sin(angle) * pos.y;",
        "  q.y = sin(angle) * pos.x + cos(angle) * pos.y;",
        "",
        "  q /= scale;",
        "",
        "  float stripeIntensity = sin(q.x) / 2.0 + 0.5;",
        "  stripeIntensity = step(stripeIntensity, stripeSize);",
        "",
        "  gl_FragColor = color + stripeColor * stripeIntensity;",
        "}",
    ];
});
define("src/MapRenderer", ["require", "exports", "src/App", "src/MapRendererLayer", "src/MapRendererMapMode", "src/eventManager", "src/options", "src/shaders/Occupation"], function (require, exports, App_20, MapRendererLayer_1, MapRendererMapMode_1, eventManager_11, options_4, Occupation_1) {
    "use strict";
    var MapRenderer = (function () {
        function MapRenderer(map, player) {
            this.occupationShaders = {};
            this.layers = {};
            this.mapModes = {};
            this.fowSpriteCache = {};
            this.fleetTextTextureCache = {};
            this.isDirty = true;
            this.preventRender = false;
            this.listeners = {};
            this.container = new PIXI.Container();
            this.galaxyMap = map;
            this.player = player;
        }
        MapRenderer.prototype.destroy = function () {
            this.preventRender = true;
            this.container.renderable = false;
            for (var name_2 in this.listeners) {
                eventManager_11.default.removeEventListener(name_2, this.listeners[name_2]);
            }
            this.container.removeChildren();
            this.parent.removeChild(this.container);
            this.player = null;
            this.container = null;
            this.parent = null;
            this.occupationShaders = null;
            for (var starId in this.fowSpriteCache) {
                var sprite = this.fowSpriteCache[starId];
                sprite.renderable = false;
                sprite.texture.destroy(true);
                this.fowSpriteCache[starId] = null;
            }
            for (var fleetSize in this.fleetTextTextureCache) {
                var texture = this.fleetTextTextureCache[fleetSize];
                texture.destroy(true);
            }
        };
        MapRenderer.prototype.init = function () {
            this.makeFowSprite();
            this.initLayers();
            this.initMapModes();
            this.addEventListeners();
        };
        MapRenderer.prototype.addEventListeners = function () {
            var self = this;
            this.listeners["renderMap"] =
                eventManager_11.default.addEventListener("renderMap", this.setAllLayersAsDirty.bind(this));
            this.listeners["renderLayer"] =
                eventManager_11.default.addEventListener("renderLayer", function (layerName, star) {
                    var passesStarVisibilityCheck = true;
                    if (star) {
                        switch (layerName) {
                            case "fleets":
                                {
                                    passesStarVisibilityCheck = self.player.starIsVisible(star);
                                    break;
                                }
                            default:
                                {
                                    passesStarVisibilityCheck = self.player.starIsRevealed(star);
                                    break;
                                }
                        }
                    }
                    if (passesStarVisibilityCheck || options_4.default.debugMode) {
                        self.setLayerAsDirty(layerName);
                    }
                });
            var boundUpdateOffsets = this.updateShaderOffsets.bind(this);
            var boundUpdateZoom = this.updateShaderZoom.bind(this);
            this.listeners["registerOnMoveCallback"] =
                eventManager_11.default.addEventListener("registerOnMoveCallback", function (callbacks) {
                    callbacks.push(boundUpdateOffsets);
                });
            this.listeners["registerOnZoomCallback"] =
                eventManager_11.default.addEventListener("registerOnZoomCallback", function (callbacks) {
                    callbacks.push(boundUpdateZoom);
                });
        };
        MapRenderer.prototype.setPlayer = function (player) {
            this.player = player;
            this.setAllLayersAsDirty();
        };
        MapRenderer.prototype.updateShaderOffsets = function (x, y) {
            for (var owner in this.occupationShaders) {
                for (var occupier in this.occupationShaders[owner]) {
                    var shader = this.occupationShaders[owner][occupier];
                    shader.uniforms.offset.value = [-x, y];
                }
            }
        };
        MapRenderer.prototype.updateShaderZoom = function (zoom) {
            for (var owner in this.occupationShaders) {
                for (var occupier in this.occupationShaders[owner]) {
                    var shader = this.occupationShaders[owner][occupier];
                    shader.uniforms.zoom.value = zoom;
                }
            }
        };
        MapRenderer.prototype.makeFowSprite = function () {
            if (!this.fowTilingSprite) {
                var fowTexture = PIXI.Texture.fromFrame("modules/defaultmapmodes/img/fowTexture.png");
                var w = this.galaxyMap.width;
                var h = this.galaxyMap.height;
                this.fowTilingSprite = new PIXI.extras.TilingSprite(fowTexture, w, h);
            }
        };
        MapRenderer.prototype.getFowSpriteForStar = function (star) {
            if (!this.fowSpriteCache[star.id] ||
                Object.keys(this.fowSpriteCache).length < 4) {
                var poly = new PIXI.Polygon(star.voronoiCell.vertices);
                var gfx = new PIXI.Graphics();
                gfx.isMask = true;
                gfx.beginFill(0);
                gfx.drawShape(poly);
                gfx.endFill();
                this.fowTilingSprite.removeChildren();
                this.fowTilingSprite.mask = gfx;
                this.fowTilingSprite.addChild(gfx);
                var bounds = this.fowTilingSprite.getBounds();
                var rendered = this.fowTilingSprite.generateTexture(App_20.default.renderer.renderer, PIXI.SCALE_MODES.DEFAULT, 1, bounds);
                var sprite = new PIXI.Sprite(rendered);
                this.fowSpriteCache[star.id] = sprite;
                this.fowTilingSprite.mask = null;
            }
            return this.fowSpriteCache[star.id];
        };
        MapRenderer.prototype.getOccupationShader = function (owner, occupier) {
            if (!this.occupationShaders[owner.id]) {
                this.occupationShaders[owner.id] = {};
            }
            if (!this.occupationShaders[owner.id][occupier.id]) {
                this.occupationShaders[owner.id][occupier.id] = new Occupation_1.default({
                    stripeColor: occupier.color.getRGBA(1.0),
                    stripeSize: 0.5,
                    offset: [0.0, 0.0],
                    angle: 0.25 * Math.PI,
                    scale: 8.0
                });
            }
            return this.occupationShaders[owner.id][occupier.id];
        };
        MapRenderer.prototype.getFleetTextTexture = function (fleet) {
            var fleetSize = fleet.units.length;
            if (!this.fleetTextTextureCache[fleetSize]) {
                var text = new PIXI.Text("" + fleetSize, {
                    fill: "#FFFFFF",
                    stroke: "#000000",
                    strokeThickness: 3
                });
                text.getBounds();
                this.fleetTextTextureCache[fleetSize] = text.generateTexture(App_20.default.renderer.renderer);
                window.setTimeout(function () {
                    text.texture.destroy(true);
                }, 0);
            }
            return this.fleetTextTextureCache[fleetSize];
        };
        MapRenderer.prototype.initLayers = function () {
            for (var layerKey in App_20.default.moduleData.Templates.MapRendererLayers) {
                var template = App_20.default.moduleData.Templates.MapRendererLayers[layerKey];
                var layer = new MapRendererLayer_1.default(template);
                this.layers[layerKey] = layer;
            }
        };
        MapRenderer.prototype.initMapModes = function () {
            var buildMapMode = function (mapModeKey, template) {
                var alreadyAdded = {};
                var mapMode = new MapRendererMapMode_1.default(template);
                for (var i = 0; i < template.layers.length; i++) {
                    var layer = template.layers[i];
                    mapMode.addLayer(this.layers[layer.key], true);
                    alreadyAdded[layer.key] = true;
                }
                for (var layerKey in this.layers) {
                    if (!alreadyAdded[layerKey]) {
                        mapMode.addLayer(this.layers[layerKey], false);
                        alreadyAdded[layerKey] = true;
                    }
                }
                this.mapModes[mapModeKey] = mapMode;
            }.bind(this);
            for (var mapModeKey in App_20.default.moduleData.Templates.MapRendererMapModes) {
                var template = App_20.default.moduleData.Templates.MapRendererMapModes[mapModeKey];
                buildMapMode(mapModeKey, template);
            }
        };
        MapRenderer.prototype.setParent = function (newParent) {
            var oldParent = this.parent;
            if (oldParent) {
                oldParent.removeChild(this.container);
            }
            this.parent = newParent;
            newParent.addChild(this.container);
        };
        MapRenderer.prototype.resetContainer = function () {
            this.container.removeChildren();
        };
        MapRenderer.prototype.setLayerAsDirty = function (layerName) {
            var layer = this.layers[layerName];
            layer.isDirty = true;
            this.isDirty = true;
            this.render();
        };
        MapRenderer.prototype.setAllLayersAsDirty = function () {
            for (var i = 0; i < this.currentMapMode.layers.length; i++) {
                this.currentMapMode.layers[i].isDirty = true;
            }
            this.isDirty = true;
            this.render();
        };
        MapRenderer.prototype.updateMapModeLayers = function (updatedLayers) {
            for (var i = 0; i < updatedLayers.length; i++) {
                var layer = updatedLayers[i];
                var childIndex = this.container.getChildIndex(layer.container);
                var mapModeLayerIndex = this.currentMapMode.getLayerIndexInContainer(layer);
                if (childIndex === -1) {
                    this.container.addChildAt(layer.container, mapModeLayerIndex);
                }
                else {
                    this.container.removeChildAt(mapModeLayerIndex + 1);
                }
                this.setLayerAsDirty(layer.template.key);
            }
        };
        MapRenderer.prototype.resetMapModeLayersPosition = function () {
            this.resetContainer();
            var layerData = this.currentMapMode.getActiveLayers();
            for (var i = 0; i < layerData.length; i++) {
                var layer = layerData[i];
                this.container.addChild(layer.container);
            }
        };
        MapRenderer.prototype.setMapModeByKey = function (key) {
            this.setMapMode(this.mapModes[key]);
        };
        MapRenderer.prototype.setMapMode = function (newMapMode) {
            if (!this.mapModes[newMapMode.template.key]) {
                throw new Error("Invalid mapmode " + newMapMode.template.key);
            }
            if (this.currentMapMode && this.currentMapMode === newMapMode) {
                return;
            }
            this.currentMapMode = newMapMode;
            this.resetContainer();
            var layerData = this.currentMapMode.getActiveLayers();
            for (var i = 0; i < layerData.length; i++) {
                var layer = layerData[i];
                this.container.addChild(layer.container);
            }
            this.setAllLayersAsDirty();
        };
        MapRenderer.prototype.render = function () {
            if (this.preventRender || !this.isDirty)
                return;
            var layerData = this.currentMapMode.getActiveLayers();
            for (var i = 0; i < layerData.length; i++) {
                var layer = layerData[i];
                layer.draw(this.galaxyMap, this);
            }
            this.isDirty = false;
        };
        return MapRenderer;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapRenderer;
});
define("src/ModuleData", ["require", "exports", "src/RuleSet", "src/utility"], function (require, exports, RuleSet_1, utility_19) {
    "use strict";
    var ModuleData = (function () {
        function ModuleData() {
            this.subModuleFiles = [];
            this.Templates = {
                Abilities: {},
                AttitudeModifiers: {},
                BattleSFX: {},
                Buildings: {},
                Cultures: {},
                EffectActions: {},
                Items: {},
                MapGen: {},
                MapRendererLayers: {},
                MapRendererMapModes: {},
                Notifications: {},
                Objectives: {},
                PassiveSkills: {},
                Personalities: {},
                Resources: {},
                StatusEffects: {},
                SubEmblems: {},
                Technologies: {},
                UnitArchetypes: {},
                UnitFamilies: {},
                Units: {}
            };
            this.ruleSet = utility_19.extendObject(RuleSet_1.defaultRuleSet);
        }
        ModuleData.prototype.copyTemplates = function (source, category) {
            if (!this.Templates[category]) {
                console.warn("Tried to copy templates in invalid category \"" + category +
                    "\". Category must be one of: " + Object.keys(this.Templates).join(", "));
                return;
            }
            for (var templateType in source) {
                if (this.Templates[category][templateType]) {
                    console.warn("Duplicate template identifier for " + templateType + " in " + category);
                    continue;
                }
                this.Templates[category][templateType] = source[templateType];
            }
        };
        ModuleData.prototype.copyAllTemplates = function (source) {
            for (var category in this.Templates) {
                if (source[category]) {
                    this.copyTemplates(source[category], category);
                }
            }
        };
        ModuleData.prototype.addSubModule = function (moduleFile) {
            this.subModuleFiles.push(moduleFile);
        };
        ModuleData.prototype.getDefaultMap = function () {
            if (this.defaultMap)
                return this.defaultMap;
            else if (Object.keys(this.Templates.MapGen).length > 0) {
                return utility_19.getRandomProperty(this.Templates.MapGen);
            }
            else
                throw new Error("Module has no maps registered");
        };
        return ModuleData;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ModuleData;
});
define("src/ModuleLoader", ["require", "exports", "src/ModuleData", "src/utility"], function (require, exports, ModuleData_1, utility_20) {
    "use strict";
    var ModuleLoader = (function () {
        function ModuleLoader() {
            this.moduleFiles = {};
            this.hasLoaded = {};
            this.moduleLoadStart = {};
            this.moduleData = new ModuleData_1.default();
        }
        ModuleLoader.prototype.addModuleFile = function (moduleFile) {
            if (this.moduleFiles[moduleFile.key]) {
                throw new Error("Duplicate module key " + moduleFile.key);
            }
            this.moduleFiles[moduleFile.key] = moduleFile;
            this.hasLoaded[moduleFile.key] = false;
        };
        ModuleLoader.prototype.loadModuleFile = function (moduleFile, afterLoaded) {
            if (!this.moduleFiles[moduleFile.key]) {
                this.addModuleFile(moduleFile);
            }
            if (moduleFile.ruleSet) {
                this.copyRuleSet(moduleFile.ruleSet);
            }
            this.moduleLoadStart[moduleFile.key] = Date.now();
            if (moduleFile.loadAssets) {
                moduleFile.loadAssets(this.finishLoadingModuleFile.bind(this, moduleFile, afterLoaded));
            }
            else {
                this.finishLoadingModuleFile(moduleFile, afterLoaded);
            }
        };
        ModuleLoader.prototype.loadAll = function (afterLoaded) {
            var boundCheckAll = function () {
                if (this.hasFinishedLoading()) {
                    afterLoaded();
                }
            }.bind(this);
            for (var index in this.moduleFiles) {
                this.loadModuleFile(this.moduleFiles[index], boundCheckAll);
            }
        };
        ModuleLoader.prototype.hasFinishedLoading = function () {
            for (var index in this.hasLoaded) {
                if (!this.hasLoaded[index]) {
                    return false;
                }
            }
            return true;
        };
        ModuleLoader.prototype.finishLoadingModuleFile = function (moduleFile, afterLoaded) {
            this.hasLoaded[moduleFile.key] = true;
            this.constructModuleFile(moduleFile);
            var loadTime = Date.now() - this.moduleLoadStart[moduleFile.key];
            console.log("Module '" + moduleFile.key + "' finished loading in " + loadTime + "ms");
            afterLoaded();
        };
        ModuleLoader.prototype.constructModuleFile = function (moduleFile) {
            if (moduleFile.constructModule) {
                moduleFile.constructModule(this.moduleData);
            }
            this.moduleData.addSubModule(moduleFile);
        };
        ModuleLoader.prototype.copyRuleSet = function (toCopy) {
            this.moduleData.ruleSet = utility_20.deepMerge(this.moduleData.ruleSet, toCopy);
        };
        return ModuleLoader;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ModuleLoader;
});
define("src/RectangleSelect", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_12) {
    "use strict";
    var RectangleSelect = (function () {
        function RectangleSelect(parentContainer) {
            this.parentContainer = parentContainer;
            this.graphics = new PIXI.Graphics();
            parentContainer.addChild(this.graphics);
            this.addEventListeners();
        }
        RectangleSelect.prototype.destroy = function () {
            this.parentContainer = null;
            this.graphics = null;
            this.toSelectFrom = null;
            this.getSelectionTargetsFN = null;
        };
        RectangleSelect.prototype.addEventListeners = function () {
            var self = this;
            eventManager_12.default.dispatchEvent("setRectangleSelectTargetFN", this);
        };
        RectangleSelect.prototype.startSelection = function (point) {
            this.selecting = true;
            this.start = point;
            this.current = point;
        };
        RectangleSelect.prototype.moveSelection = function (point) {
            this.current = point;
            this.drawSelectionRectangle();
        };
        RectangleSelect.prototype.endSelection = function (point) {
            if (Math.abs(this.start.x - this.current.x) < 10 || Math.abs(this.start.y - this.current.y) < 10) {
                this.clearSelection();
                return;
            }
            this.setSelectionTargets();
            var inSelection = this.getAllInSelection();
            eventManager_12.default.dispatchEvent("selectFleets", inSelection);
            this.clearSelection();
        };
        RectangleSelect.prototype.clearSelection = function () {
            this.selecting = false;
            this.graphics.clear();
            this.start = null;
            this.current = null;
        };
        RectangleSelect.prototype.drawSelectionRectangle = function () {
            if (!this.current)
                return;
            var gfx = this.graphics;
            var bounds = this.getBounds();
            gfx.clear();
            gfx.lineStyle(1, 0xFFFFFF, 1);
            gfx.beginFill(0x000000, 0);
            gfx.drawRect(bounds.x1, bounds.y1, bounds.width, bounds.height);
            gfx.endFill();
        };
        RectangleSelect.prototype.setSelectionTargets = function () {
            if (!this.getSelectionTargetsFN)
                return;
            this.toSelectFrom = this.getSelectionTargetsFN();
        };
        RectangleSelect.prototype.getBounds = function () {
            var x1 = Math.min(this.start.x, this.current.x);
            var x2 = Math.max(this.start.x, this.current.x);
            var y1 = Math.min(this.start.y, this.current.y);
            var y2 = Math.max(this.start.y, this.current.y);
            return ({
                x1: x1,
                x2: x2,
                y1: y1,
                y2: y2,
                width: x2 - x1,
                height: y2 - y1
            });
        };
        RectangleSelect.prototype.getAllInSelection = function () {
            var toReturn = [];
            for (var i = 0; i < this.toSelectFrom.length; i++) {
                if (this.selectionContains(this.toSelectFrom[i].position)) {
                    toReturn.push(this.toSelectFrom[i].data);
                }
            }
            return toReturn;
        };
        RectangleSelect.prototype.selectionContains = function (point) {
            var x = point.x;
            var y = point.y;
            var bounds = this.getBounds();
            return ((x >= bounds.x1 && x <= bounds.x2) &&
                (y >= bounds.y1 && y <= bounds.y2));
        };
        return RectangleSelect;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = RectangleSelect;
});
define("src/PlayerControl", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_13) {
    "use strict";
    var PlayerControl = (function () {
        function PlayerControl(player) {
            this.selectedFleets = [];
            this.inspectedFleets = [];
            this.currentlyReorganizing = [];
            this.lastSelectedFleetsIds = {};
            this.preventingGhost = false;
            this.listeners = {};
            this.player = player;
            this.addEventListeners();
        }
        PlayerControl.prototype.destroy = function () {
            this.removeEventListeners();
            this.player = null;
            this.selectedFleets = null;
            this.currentlyReorganizing = null;
            this.currentAttackTargets = null;
            this.selectedStar = null;
        };
        PlayerControl.prototype.removeEventListener = function (name) {
            eventManager_13.default.removeEventListener(name, this.listeners[name]);
        };
        PlayerControl.prototype.removeEventListeners = function () {
            for (var name_3 in this.listeners) {
                this.removeEventListener(name_3);
            }
        };
        PlayerControl.prototype.addEventListener = function (name, handler) {
            this.listeners[name] = handler;
            eventManager_13.default.addEventListener(name, handler);
        };
        PlayerControl.prototype.addEventListeners = function () {
            var self = this;
            this.addEventListener("updateSelection", function () {
                self.updateSelection();
            });
            this.addEventListener("selectFleets", function (fleets) {
                self.selectFleets(fleets);
            });
            this.addEventListener("deselectFleet", function (fleet) {
                self.deselectFleet(fleet);
            });
            this.addEventListener("mergeFleets", function () {
                self.mergeFleets();
            });
            this.addEventListener("splitFleet", function (fleet) {
                self.splitFleet(fleet);
            });
            this.addEventListener("startReorganizingFleets", function (fleets) {
                self.startReorganizingFleets(fleets);
            });
            this.addEventListener("endReorganizingFleets", function () {
                self.endReorganizingFleets();
            });
            this.addEventListener("starClick", function (star) {
                self.selectStar(star);
            });
            this.addEventListener("moveFleets", function (star) {
                self.moveFleets(star);
            });
            this.addEventListener("setRectangleSelectTargetFN", function (rectangleSelect) {
                rectangleSelect.getSelectionTargetsFN =
                    self.player.getFleetsWithPositions.bind(self.player);
            });
            this.addEventListener("attackTarget", function (target) {
                self.attackTarget(target);
            });
        };
        PlayerControl.prototype.preventGhost = function (delay) {
            this.preventingGhost = true;
            var self = this;
            var timeout = window.setTimeout(function () {
                self.preventingGhost = false;
                window.clearTimeout(timeout);
            }, delay);
        };
        PlayerControl.prototype.clearSelection = function () {
            this.selectedFleets = [];
            this.inspectedFleets = [];
            this.selectedStar = null;
        };
        PlayerControl.prototype.updateSelection = function (endReorganizingFleets) {
            if (endReorganizingFleets === void 0) { endReorganizingFleets = true; }
            if (endReorganizingFleets)
                this.endReorganizingFleets();
            this.currentAttackTargets = this.getCurrentAttackTargets();
            eventManager_13.default.dispatchEvent("playerControlUpdated", null);
            eventManager_13.default.dispatchEvent("clearPossibleActions", null);
        };
        PlayerControl.prototype.areAllFleetsInSameLocation = function () {
            if (this.selectedFleets.length <= 0)
                return false;
            for (var i = 1; i < this.selectedFleets.length; i++) {
                if (this.selectedFleets[i].location !== this.selectedFleets[i - 1].location) {
                    return false;
                }
            }
            return true;
        };
        PlayerControl.prototype.selectFleets = function (fleets) {
            if (fleets.length < 1) {
                this.clearSelection();
                this.updateSelection();
                return;
            }
            var playerFleets = [];
            var otherFleets = [];
            for (var i = 0; i < fleets.length; i++) {
                if (fleets[i].player === this.player) {
                    playerFleets.push(fleets[i]);
                }
                else {
                    otherFleets.push(fleets[i]);
                }
            }
            if (playerFleets.length > 0) {
                this.selectPlayerFleets(playerFleets);
            }
            else {
                this.selectOtherFleets(otherFleets);
            }
            this.updateSelection();
            this.preventGhost(15);
        };
        PlayerControl.prototype.selectPlayerFleets = function (fleets) {
            this.clearSelection();
            for (var i = 0; i < fleets.length; i++) {
                if (fleets[i].units.length < 1) {
                    if (this.currentlyReorganizing.indexOf(fleets[i]) >= 0)
                        continue;
                    fleets[i].deleteFleet();
                    fleets.splice(i, 1);
                }
            }
            var oldFleets = this.selectedFleets.slice(0);
            this.selectedFleets = fleets;
        };
        PlayerControl.prototype.selectOtherFleets = function (fleets) {
            this.inspectedFleets = fleets;
        };
        PlayerControl.prototype.deselectFleet = function (fleet) {
            var fleetsContainer = this.selectedFleets.length > 0 ? this.selectedFleets : this.inspectedFleets;
            var fleetIndex = fleetsContainer.indexOf(fleet);
            if (fleetIndex < 0)
                return;
            fleetsContainer.splice(fleetIndex, 1);
            if (fleetsContainer.length < 1) {
                this.selectedStar = fleet.location;
            }
            this.updateSelection();
        };
        PlayerControl.prototype.getMasterFleetForMerge = function (fleets) {
            return fleets[0];
        };
        PlayerControl.prototype.mergeFleetsOfSameType = function (fleets) {
            if (fleets.length === 0)
                return [];
            var master = this.getMasterFleetForMerge(fleets);
            fleets.splice(fleets.indexOf(master), 1);
            var slaves = fleets;
            for (var i = 0; i < slaves.length; i++) {
                slaves[i].mergeWith(master, i === slaves.length - 1);
            }
            return [master];
        };
        PlayerControl.prototype.mergeFleets = function () {
            var allFleets = this.selectedFleets;
            var normalFleets = [];
            var stealthyFleets = [];
            for (var i = 0; i < allFleets.length; i++) {
                if (allFleets[i].isStealthy) {
                    stealthyFleets.push(allFleets[i]);
                }
                else {
                    normalFleets.push(allFleets[i]);
                }
            }
            this.clearSelection();
            this.selectedFleets =
                this.mergeFleetsOfSameType(normalFleets).concat(this.mergeFleetsOfSameType(stealthyFleets));
            this.updateSelection();
        };
        PlayerControl.prototype.selectStar = function (star) {
            if (this.preventingGhost || this.selectedStar === star)
                return;
            this.clearSelection();
            this.selectedStar = star;
            this.updateSelection();
        };
        PlayerControl.prototype.moveFleets = function (star) {
            for (var i = 0; i < this.selectedFleets.length; i++) {
                this.selectedFleets[i].pathFind(star);
            }
        };
        PlayerControl.prototype.splitFleet = function (fleet) {
            if (fleet.units.length <= 0)
                return;
            this.endReorganizingFleets();
            var newFleet = fleet.split();
            this.currentlyReorganizing = [fleet, newFleet];
            this.selectedFleets = [fleet, newFleet];
            this.updateSelection(false);
        };
        PlayerControl.prototype.startReorganizingFleets = function (fleets) {
            if (fleets.length !== 2 ||
                fleets[0].location !== fleets[1].location ||
                this.selectedFleets.length !== 2 ||
                this.selectedFleets.indexOf(fleets[0]) < 0 ||
                this.selectedFleets.indexOf(fleets[1]) < 0) {
                throw new Error("cant reorganize fleets");
            }
            this.currentlyReorganizing = fleets;
            this.updateSelection(false);
        };
        PlayerControl.prototype.endReorganizingFleets = function () {
            for (var i = 0; i < this.currentlyReorganizing.length; i++) {
                var fleet = this.currentlyReorganizing[i];
                if (fleet.units.length <= 0) {
                    var selectedIndex = this.selectedFleets.indexOf(fleet);
                    if (selectedIndex >= 0) {
                        this.selectedFleets.splice(selectedIndex, 1);
                    }
                    fleet.deleteFleet();
                }
            }
            this.currentlyReorganizing = [];
        };
        PlayerControl.prototype.getCurrentAttackTargets = function () {
            if (this.selectedFleets.length < 1)
                return [];
            if (!this.areAllFleetsInSameLocation())
                return [];
            var location = this.selectedFleets[0].location;
            var possibleTargets = location.getTargetsForPlayer(this.player);
            return possibleTargets;
        };
        PlayerControl.prototype.attackTarget = function (target) {
            if (this.currentAttackTargets.indexOf(target) < 0) {
                throw new Error("Invalid attack target");
            }
            var currentLocation = this.selectedFleets[0].location;
            this.player.attackTarget(currentLocation, target);
        };
        return PlayerControl;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = PlayerControl;
});
define("src/Camera", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_14) {
    "use strict";
    var tempCameraId = 0;
    var Camera = (function () {
        function Camera(container, bound) {
            this.bounds = {};
            this.currZoom = 1;
            this.onMoveCallbacks = [];
            this.onZoomCallbacks = [];
            this.listeners = {};
            this.tempCameraId = tempCameraId++;
            this.container = container;
            this.bounds.min = bound;
            this.bounds.max = Number((1 - bound).toFixed(1));
            var screenElement = window.getComputedStyle(document.getElementById("pixi-container"), null);
            this.screenWidth = parseInt(screenElement.width);
            this.screenHeight = parseInt(screenElement.height);
            this.addEventListeners();
            this.setBounds();
        }
        Camera.prototype.destroy = function () {
            for (var name_4 in this.listeners) {
                eventManager_14.default.removeEventListener(name_4, this.listeners[name_4]);
            }
            this.onMoveCallbacks = [];
            this.onZoomCallbacks = [];
            window.removeEventListener("resize", this.resizeListener);
        };
        Camera.prototype.addEventListeners = function () {
            var self = this;
            this.resizeListener = function (e) {
                var container = document.getElementById("pixi-container");
                if (!container)
                    return;
                var style = window.getComputedStyle(container, null);
                self.screenWidth = parseInt(style.width);
                self.screenHeight = parseInt(style.height);
            };
            window.addEventListener("resize", this.resizeListener, false);
            this.listeners["setCameraToCenterOn"] =
                eventManager_14.default.addEventListener("setCameraToCenterOn", function (position) {
                    self.toCenterOn = position;
                });
            eventManager_14.default.dispatchEvent("registerOnMoveCallback", self.onMoveCallbacks);
            eventManager_14.default.dispatchEvent("registerOnZoomCallback", self.onZoomCallbacks);
        };
        Camera.prototype.setBounds = function () {
            var rect = this.container.getLocalBounds();
            this.width = this.screenWidth;
            this.height = this.screenHeight;
            this.bounds =
                {
                    xMin: (this.width * this.bounds.min) - rect.width * this.container.scale.x,
                    xMax: (this.width * this.bounds.max),
                    yMin: (this.height * this.bounds.min) - rect.height * this.container.scale.y,
                    yMax: (this.height * this.bounds.max),
                    min: this.bounds.min,
                    max: this.bounds.max
                };
        };
        Camera.prototype.startScroll = function (mousePos) {
            this.setBounds();
            this.startClick = mousePos;
            this.startPos = [this.container.position.x, this.container.position.y];
        };
        Camera.prototype.end = function () {
            this.startPos = undefined;
        };
        Camera.prototype.getDelta = function (currPos) {
            var x = this.startClick[0] - currPos[0];
            var y = this.startClick[1] - currPos[1];
            return [-x, -y];
        };
        Camera.prototype.move = function (currPos) {
            var delta = this.getDelta(currPos);
            this.container.position.x = this.startPos[0] + delta[0];
            this.container.position.y = this.startPos[1] + delta[1];
            this.clampEdges();
            this.onMove();
        };
        Camera.prototype.deltaMove = function (delta) {
            this.container.position.x += delta[0];
            this.container.position.y += delta[1];
            this.clampEdges();
            this.onMove();
        };
        Camera.prototype.onMove = function () {
            for (var i = 0; i < this.onMoveCallbacks.length; i++) {
                this.onMoveCallbacks[i](this.container.position.x, this.container.position.y);
            }
        };
        Camera.prototype.getScreenCenter = function () {
            return ({
                x: this.width / 2,
                y: this.height / 2
            });
        };
        Camera.prototype.getLocalPosition = function (position) {
            var pos = position;
            return this.container.worldTransform.apply(pos);
        };
        Camera.prototype.getCenterPosition = function () {
            var localOrigin = this.getLocalPosition(this.container.position);
            return ({
                x: this.container.position.x + this.width / 2 - localOrigin.x,
                y: this.container.position.y + this.height / 2 - localOrigin.y
            });
        };
        Camera.prototype.centerOnPosition = function (pos) {
            this.setBounds();
            var localPos = this.getLocalPosition(pos);
            var center = this.getScreenCenter();
            this.container.position.x += center.x - localPos.x;
            this.container.position.y += center.y - localPos.y;
            this.clampEdges();
            this.onMove();
        };
        Camera.prototype.zoom = function (zoomAmount) {
            if (zoomAmount > 1) {
            }
            var container = this.container;
            var oldZoom = this.currZoom;
            var zoomDelta = oldZoom - zoomAmount;
            var rect = container.getLocalBounds();
            var xRatio = 1 - ((container.x - this.screenWidth / 2) / rect.width / oldZoom + 1);
            var yRatio = 1 - ((container.y - this.screenHeight / 2) / rect.height / oldZoom + 1);
            var xDelta = rect.width * xRatio * zoomDelta;
            var yDelta = rect.height * yRatio * zoomDelta;
            container.position.x += xDelta;
            container.position.y += yDelta;
            container.scale.set(zoomAmount, zoomAmount);
            this.currZoom = zoomAmount;
            this.onMove();
            this.onZoom();
        };
        Camera.prototype.onZoom = function () {
            for (var i = 0; i < this.onZoomCallbacks.length; i++) {
                this.onZoomCallbacks[i](this.currZoom);
            }
        };
        Camera.prototype.deltaZoom = function (delta, scale) {
            if (delta === 0) {
                return;
            }
            var direction = delta < 0 ? "out" : "in";
            var adjDelta = 1 + Math.abs(delta) * scale;
            if (direction === "out") {
                this.zoom(this.currZoom / adjDelta);
            }
            else {
                this.zoom(this.currZoom * adjDelta);
            }
        };
        Camera.prototype.clampEdges = function () {
            var x = this.container.position.x;
            var y = this.container.position.y;
            if (x < this.bounds.xMin) {
                x = this.bounds.xMin;
            }
            else if (x > this.bounds.xMax) {
                x = this.bounds.xMax;
            }
            if (y < this.bounds.yMin) {
                y = this.bounds.yMin;
            }
            else if (y > this.bounds.yMax) {
                y = this.bounds.yMax;
            }
            this.container.position.set(x, y);
        };
        return Camera;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Camera;
});
define("src/MouseEventHandler", ["require", "exports", "src/App", "src/RectangleSelect", "src/eventManager"], function (require, exports, App_21, RectangleSelect_1, eventManager_15) {
    "use strict";
    var MouseEventHandler = (function () {
        function MouseEventHandler(renderer, camera) {
            this.preventingGhost = {};
            this.listeners = {};
            this.renderer = renderer;
            this.camera = camera;
            this.rectangleSelect = new RectangleSelect_1.default(renderer.layers["select"]);
            this.currentAction = undefined;
            window.oncontextmenu = function (event) {
                var eventTarget = event.target;
                if (eventTarget.localName !== "canvas")
                    return;
                event.preventDefault();
                event.stopPropagation();
            };
            this.addEventListeners();
        }
        MouseEventHandler.prototype.destroy = function () {
            for (var name_5 in this.listeners) {
                eventManager_15.default.removeEventListener(name_5, this.listeners[name_5]);
            }
            this.hoveredStar = null;
            this.rectangleSelect.destroy();
            this.rectangleSelect = null;
            this.renderer = null;
            this.camera = null;
        };
        MouseEventHandler.prototype.addEventListeners = function () {
            var self = this;
            var _canvas = document.getElementById("pixi-container");
            _canvas.addEventListener("DOMMouseScroll", function (e) {
                if (e.target.localName !== "canvas")
                    return;
                self.camera.deltaZoom(-e.detail, 0.05);
            });
            _canvas.addEventListener("mousewheel", function (e) {
                if (e.target.localName !== "canvas")
                    return;
                self.camera.deltaZoom(e.wheelDelta / 40, 0.05);
            });
            _canvas.addEventListener("mouseout", function (e) {
                if (e.target.localName !== "canvas")
                    return;
            });
            this.listeners["mouseDown"] = eventManager_15.default.addEventListener("mouseDown", function (e, star) {
                self.mouseDown(e, star);
            });
            this.listeners["mouseUp"] = eventManager_15.default.addEventListener("mouseUp", function (e) {
                self.mouseUp(e);
            });
            this.listeners["touchStart"] = eventManager_15.default.addEventListener("touchStart", function (e) {
                self.touchStart(e);
            });
            this.listeners["touchEnd"] = eventManager_15.default.addEventListener("touchEnd", function (e) {
                self.touchEnd(e);
            });
            this.listeners["hoverStar"] = eventManager_15.default.addEventListener("hoverStar", function (star) {
                self.setHoveredStar(star);
            });
            this.listeners["clearHover"] = eventManager_15.default.addEventListener("clearHover", function () {
                self.clearHoveredStar();
            });
        };
        MouseEventHandler.prototype.preventGhost = function (delay, type) {
            if (this.preventingGhost[type]) {
                window.clearTimeout(this.preventingGhost[type]);
            }
            var self = this;
            this.preventingGhost[type] = window.setTimeout(function () {
                self.preventingGhost[type] = null;
            }, delay);
        };
        MouseEventHandler.prototype.makeUITransparent = function () {
            if (!this.currentAction)
                return;
            var ui = document.getElementsByClassName("galaxy-map-ui")[0];
            if (ui) {
                ui.classList.add("prevent-pointer-events", "mouse-event-active-ui");
            }
        };
        MouseEventHandler.prototype.makeUIOpaque = function () {
            if (this.currentAction)
                return;
            var ui = document.getElementsByClassName("galaxy-map-ui")[0];
            if (ui) {
                ui.classList.remove("prevent-pointer-events", "mouse-event-active-ui");
            }
        };
        MouseEventHandler.prototype.cancelCurrentAction = function () {
            switch (this.currentAction) {
                case "select":
                    {
                        this.rectangleSelect.clearSelection();
                        this.currentAction = undefined;
                        this.makeUIOpaque();
                    }
            }
        };
        MouseEventHandler.prototype.mouseDown = function (event, star) {
            if (this.preventingGhost["mouseDown"])
                return;
            var originalEvent = event.data.originalEvent;
            if (originalEvent.ctrlKey ||
                originalEvent.metaKey ||
                originalEvent.button === 1) {
                this.startScroll(event);
            }
            else if (originalEvent.button === 0 ||
                !isFinite(originalEvent.button)) {
                this.cancelCurrentAction();
                this.startSelect(event);
            }
            else if (originalEvent.button === 2) {
                this.cancelCurrentAction();
                this.startFleetMove(event, star);
            }
            this.preventGhost(15, "mouseDown");
        };
        MouseEventHandler.prototype.touchStart = function (event, star) {
            if (App_21.default.playerControl.selectedFleets.length === 0) {
                this.startSelect(event);
            }
            else {
                this.startFleetMove(event, star);
            }
        };
        MouseEventHandler.prototype.touchEnd = function (event) {
            if (this.currentAction === "select") {
                this.endSelect(event);
            }
            if (this.currentAction === "fleetMove") {
                this.completeFleetMove();
            }
        };
        MouseEventHandler.prototype.mouseMove = function (event) {
            if (this.currentAction === "scroll") {
                this.scrollMove(event);
            }
            else if (this.currentAction === "zoom") {
                this.zoomMove(event);
            }
            else if (this.currentAction === "select") {
                this.dragSelect(event);
            }
        };
        MouseEventHandler.prototype.mouseUp = function (event) {
            if (this.currentAction === undefined)
                return;
            if (this.currentAction === "scroll") {
                this.endScroll(event);
                this.preventGhost(15, "mouseUp");
            }
            else if (this.currentAction === "zoom") {
                this.endZoom(event);
                this.preventGhost(15, "mouseUp");
            }
            else if (this.currentAction === "select") {
                if (!this.preventingGhost["mouseUp"])
                    this.endSelect(event);
            }
            else if (this.currentAction === "fleetMove") {
                if (!this.preventingGhost["mouseUp"])
                    this.completeFleetMove();
            }
        };
        MouseEventHandler.prototype.startScroll = function (event) {
            if (this.currentAction !== "scroll") {
                this.stashedAction = this.currentAction;
            }
            this.currentAction = "scroll";
            this.startPoint = [event.data.global.x, event.data.global.y];
            this.camera.startScroll(this.startPoint);
            this.makeUITransparent();
        };
        MouseEventHandler.prototype.scrollMove = function (event) {
            this.camera.move([event.data.global.x, event.data.global.y]);
        };
        MouseEventHandler.prototype.endScroll = function (event) {
            this.camera.end();
            this.startPoint = undefined;
            this.currentAction = this.stashedAction;
            this.stashedAction = undefined;
            this.makeUIOpaque();
        };
        MouseEventHandler.prototype.zoomMove = function (event) {
            var delta = event.data.global.x + this.currPoint[1] -
                this.currPoint[0] - event.data.global.y;
            this.camera.deltaZoom(delta, 0.005);
            this.currPoint = [event.data.global.x, event.data.global.y];
        };
        MouseEventHandler.prototype.endZoom = function (event) {
            this.startPoint = undefined;
            this.currentAction = this.stashedAction;
            this.stashedAction = undefined;
        };
        MouseEventHandler.prototype.startZoom = function (event) {
            if (this.currentAction !== "zoom") {
                this.stashedAction = this.currentAction;
            }
            this.currentAction = "zoom";
            this.startPoint = this.currPoint = [event.data.global.x, event.data.global.y];
        };
        MouseEventHandler.prototype.setHoveredStar = function (star) {
            this.preventGhost(30, "hover");
            if (star !== this.hoveredStar) {
                this.hoveredStar = star;
                this.setFleetMoveTarget(star);
            }
        };
        MouseEventHandler.prototype.clearHoveredStar = function () {
            var timeout = window.setTimeout(function () {
                if (!this.preventingGhost["hover"]) {
                    this.hoveredStar = null;
                    this.clearFleetMoveTarget();
                }
                window.clearTimeout(timeout);
            }.bind(this), 15);
        };
        MouseEventHandler.prototype.startFleetMove = function (event, star) {
            eventManager_15.default.dispatchEvent("startPotentialMove", star);
            this.currentAction = "fleetMove";
            this.makeUITransparent();
        };
        MouseEventHandler.prototype.setFleetMoveTarget = function (star) {
            if (this.currentAction !== "fleetMove")
                return;
            eventManager_15.default.dispatchEvent("setPotentialMoveTarget", star);
        };
        MouseEventHandler.prototype.completeFleetMove = function () {
            if (this.hoveredStar) {
                eventManager_15.default.dispatchEvent("moveFleets", this.hoveredStar);
            }
            eventManager_15.default.dispatchEvent("endPotentialMove");
            this.currentAction = undefined;
            this.makeUIOpaque();
        };
        MouseEventHandler.prototype.clearFleetMoveTarget = function () {
            if (this.currentAction !== "fleetMove")
                return;
            eventManager_15.default.dispatchEvent("clearPotentialMoveTarget");
        };
        MouseEventHandler.prototype.startSelect = function (event) {
            this.currentAction = "select";
            this.rectangleSelect.startSelection(event.data.getLocalPosition(this.renderer.layers["main"]));
            this.makeUITransparent();
        };
        MouseEventHandler.prototype.dragSelect = function (event) {
            this.rectangleSelect.moveSelection(event.data.getLocalPosition(this.renderer.layers["main"]));
        };
        MouseEventHandler.prototype.endSelect = function (event) {
            this.rectangleSelect.endSelection(event.data.getLocalPosition(this.renderer.layers["main"]));
            this.currentAction = undefined;
            this.makeUIOpaque();
        };
        return MouseEventHandler;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MouseEventHandler;
});
define("src/PathfindingArrow", ["require", "exports", "src/App", "src/Color", "src/eventManager"], function (require, exports, App_22, Color_3, eventManager_16) {
    "use strict";
    var PathfindingArrow = (function () {
        function PathfindingArrow(parentContainer) {
            this.selectedFleets = [];
            this.labelCache = {};
            this.listeners = {};
            this.curveStyles = {
                reachable: {
                    color: Color_3.default.fromHex(0xFFFFF0)
                },
                unreachable: {
                    color: Color_3.default.fromHex(0xFF0000)
                }
            };
            this.parentContainer = parentContainer;
            this.container = new PIXI.Container();
            this.parentContainer.addChild(this.container);
            this.addEventListeners();
        }
        PathfindingArrow.prototype.destroy = function () {
            this.active = false;
            this.removeEventListeners();
            this.parentContainer = null;
            this.container = null;
            this.currentTarget = null;
            window.clearTimeout(this.clearTargetTimeout);
            this.selectedFleets = null;
            this.labelCache = null;
        };
        PathfindingArrow.prototype.removeEventListener = function (name) {
            eventManager_16.default.removeEventListener(name, this.listeners[name]);
        };
        PathfindingArrow.prototype.removeEventListeners = function () {
            for (var name_6 in this.listeners) {
                this.removeEventListener(name_6);
            }
        };
        PathfindingArrow.prototype.addEventListener = function (name, handler) {
            this.listeners[name] = handler;
            eventManager_16.default.addEventListener(name, handler);
        };
        PathfindingArrow.prototype.addEventListeners = function () {
            var self = this;
            this.addEventListener("startPotentialMove", function (star) {
                self.startMove();
                if (star) {
                    self.setTarget(star);
                }
            });
            this.addEventListener("setPotentialMoveTarget", function (star) {
                self.setTarget(star);
            });
            this.addEventListener("clearPotentialMoveTarget", function () {
                self.clearTarget();
            });
            this.addEventListener("endPotentialMove", function () {
                self.endMove();
            });
        };
        PathfindingArrow.prototype.startMove = function () {
            var fleets = App_22.default.playerControl.selectedFleets;
            if (this.active || !fleets || fleets.length < 1) {
                return;
            }
            this.active = true;
            this.currentTarget = null;
            this.selectedFleets = fleets;
            this.clearArrows();
        };
        PathfindingArrow.prototype.setTarget = function (star) {
            if (!this.active) {
                return;
            }
            if (this.clearTargetTimeout) {
                window.clearTimeout(this.clearTargetTimeout);
            }
            this.currentTarget = star;
            window.setTimeout(this.drawAllCurrentCurves.bind(this), 10);
        };
        PathfindingArrow.prototype.clearTarget = function () {
            if (!this.active) {
                return;
            }
            var self = this;
            if (this.clearTargetTimeout) {
                window.clearTimeout(this.clearTargetTimeout);
            }
            this.clearTargetTimeout = window.setTimeout(function () {
                self.currentTarget = null;
                self.clearArrows();
                self.clearTargetTimeout = null;
            }, 10);
        };
        PathfindingArrow.prototype.endMove = function () {
            this.active = false;
            this.currentTarget = null;
            this.selectedFleets = [];
            this.clearArrows();
        };
        PathfindingArrow.prototype.clearArrows = function () {
            this.container.removeChildren();
        };
        PathfindingArrow.prototype.makeLabel = function (style, distance) {
            var textStyle;
            switch (style) {
                case "reachable":
                    {
                        textStyle =
                            {
                                fill: 0xFFFFF0
                            };
                        break;
                    }
                case "unreachable":
                    {
                        textStyle =
                            {
                                fill: 0xFF0000
                            };
                        break;
                    }
            }
            if (!this.labelCache[style]) {
                this.labelCache[style] = {};
            }
            this.labelCache[style][distance] = new PIXI.Text("" + distance, textStyle);
        };
        PathfindingArrow.prototype.getLabel = function (style, distance) {
            if (!this.labelCache[style] || !this.labelCache[style][distance]) {
                this.makeLabel(style, distance);
            }
            return this.labelCache[style][distance];
        };
        PathfindingArrow.prototype.getAllCurrentPaths = function () {
            var paths = [];
            for (var i = 0; i < this.selectedFleets.length; i++) {
                var fleet = this.selectedFleets[i];
                if (fleet.location.id === this.currentTarget.id)
                    continue;
                var path = fleet.getPathTo(this.currentTarget);
                paths.push({
                    fleet: fleet,
                    path: path
                });
            }
            return paths;
        };
        PathfindingArrow.prototype.getAllCurrentCurves = function () {
            var paths = this.getAllCurrentPaths();
            var curves = [];
            var totalPathsPerStar = {};
            var alreadyVisitedPathsPerStar = {};
            for (var i = 0; i < paths.length; i++) {
                for (var j = 0; j < paths[i].path.length; j++) {
                    var star = paths[i].path[j].star;
                    if (!totalPathsPerStar[star.id]) {
                        totalPathsPerStar[star.id] = 0;
                        alreadyVisitedPathsPerStar[star.id] = 0;
                    }
                    totalPathsPerStar[star.id]++;
                }
            }
            for (var i = 0; i < paths.length; i++) {
                var fleet = paths[i].fleet;
                var path = paths[i].path;
                var distance = path.length - 1;
                var currentMovePoints = fleet.getMinCurrentMovePoints();
                var canReach = currentMovePoints >= distance;
                var style = canReach ? "reachable" : "unreachable";
                var curvePoints = [];
                for (var j = path.length - 1; j >= 0; j--) {
                    var star = path[j].star;
                    var sourceStar = j < path.length - 1 ? path[j + 1].star : null;
                    if (totalPathsPerStar[star.id] > 1 && star !== this.currentTarget) {
                        var visits = ++alreadyVisitedPathsPerStar[star.id];
                        curvePoints.unshift(this.getTargetOffset(star, sourceStar, visits, totalPathsPerStar[star.id], 12));
                    }
                    else {
                        curvePoints.unshift(star);
                    }
                }
                var curveData = this.getCurveData(curvePoints);
                curves.push({
                    style: style,
                    curveData: curveData
                });
            }
            return curves;
        };
        PathfindingArrow.prototype.drawAllCurrentCurves = function () {
            this.clearArrows();
            var curves = this.getAllCurrentCurves();
            for (var i = 0; i < curves.length; i++) {
                var curve = this.drawCurve(curves[i].curveData, this.curveStyles[curves[i].style]);
                this.container.addChild(curve);
            }
        };
        PathfindingArrow.prototype.getCurveData = function (points) {
            var i6 = 1.0 / 6.0;
            var path = [];
            var abababa = [points[0]].concat(points);
            abababa.push(points[points.length - 1]);
            for (var i = 3, n = abababa.length; i < n; i++) {
                var p0 = abababa[i - 3];
                var p1 = abababa[i - 2];
                var p2 = abababa[i - 1];
                var p3 = abababa[i];
                path.push([
                    p2.x * i6 + p1.x - p0.x * i6,
                    p2.y * i6 + p1.y - p0.y * i6,
                    p3.x * -i6 + p2.x + p1.x * i6,
                    p3.y * -i6 + p2.y + p1.y * i6,
                    p2.x,
                    p2.y
                ]);
            }
            path[0][0] = points[0].x;
            path[0][1] = points[0].y;
            return path;
        };
        PathfindingArrow.prototype.drawCurve = function (points, style) {
            var gfx = new PIXI.Graphics();
            gfx.lineStyle(12, style.color.getHex(), 0.7);
            gfx.moveTo(points[0][0], points[0][1]);
            for (var i = 0; i < points.length; i++) {
                gfx.bezierCurveTo.apply(gfx, points[i]);
            }
            var curveShape = gfx.currentPath.shape;
            curveShape.closed = false;
            this.drawArrowHead(gfx, style.color.getHex());
            return gfx;
        };
        PathfindingArrow.prototype.drawArrowHead = function (gfx, color) {
            var curveShape = gfx.graphicsData[0].shape;
            var points = curveShape.points;
            var x1 = points[points.length - 12];
            var y1 = points[points.length - 11];
            var x2 = points[points.length - 2];
            var y2 = points[points.length - 1];
            var lineAngle = Math.atan2(y2 - y1, x2 - x1);
            var headLength = 30;
            var buttAngle = 27 * (Math.PI / 180);
            var hypotenuseLength = Math.abs(headLength / Math.cos(buttAngle));
            var angle1 = lineAngle + Math.PI + buttAngle;
            var topX = x2 + Math.cos(angle1) * hypotenuseLength;
            var topY = y2 + Math.sin(angle1) * hypotenuseLength;
            var angle2 = lineAngle + Math.PI - buttAngle;
            var botX = x2 + Math.cos(angle2) * hypotenuseLength;
            var botY = y2 + Math.sin(angle2) * hypotenuseLength;
            gfx.lineStyle(null);
            gfx.moveTo(x2, y2);
            gfx.beginFill(color, 0.7);
            gfx.lineTo(topX, topY);
            gfx.lineTo(botX, botY);
            gfx.lineTo(x2, y2);
            gfx.endFill();
            var buttMidX = x2 + Math.cos(lineAngle + Math.PI) * headLength;
            var buttMidY = y2 + Math.sin(lineAngle + Math.PI) * headLength;
            for (var i = points.length - 1; i >= 0; i -= 2) {
                var y = points[i];
                var x = points[i - 1];
                var distance = Math.sqrt(Math.pow(x2 - x, 2) + Math.pow(y2 - y, 2));
                if (distance >= headLength + 10) {
                    points.push(buttMidX);
                    points.push(buttMidY);
                    break;
                }
                else {
                    points.pop();
                    points.pop();
                }
            }
        };
        PathfindingArrow.prototype.getTargetOffset = function (target, sourcePoint, i, totalPaths, offsetPerOrbit) {
            var maxPerOrbit = 6;
            var currentOrbit = Math.ceil(i / maxPerOrbit);
            var isOuterOrbit = currentOrbit > Math.floor(totalPaths / maxPerOrbit);
            var pathsInCurrentOrbit = isOuterOrbit ? totalPaths % maxPerOrbit : maxPerOrbit;
            var positionInOrbit = (i - 1) % pathsInCurrentOrbit;
            var distance = currentOrbit * offsetPerOrbit;
            var angle = (Math.PI * 2 / pathsInCurrentOrbit) * positionInOrbit;
            if (sourcePoint) {
                var dx = sourcePoint.x - target.x;
                var dy = sourcePoint.y - target.y;
                var approachAngle = Math.atan2(dy, dx);
                angle += approachAngle;
            }
            var x = Math.sin(angle) * distance;
            var y = Math.cos(angle) * distance;
            return ({
                x: target.x + x,
                y: target.y - y
            });
        };
        return PathfindingArrow;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = PathfindingArrow;
});
define("src/Renderer", ["require", "exports", "src/App", "src/Camera", "src/MouseEventHandler", "src/PathfindingArrow"], function (require, exports, App_23, Camera_1, MouseEventHandler_1, PathfindingArrow_1) {
    "use strict";
    var Renderer = (function () {
        function Renderer(galaxyMap) {
            this.layers = {};
            this.activeRenderLoopId = 0;
            this.isPaused = false;
            this.forceFrame = false;
            this.backgroundIsDirty = true;
            this.isBattleBackground = false;
            PIXI.SCALE_MODES.DEFAULT = PIXI.SCALE_MODES.NEAREST;
            this.stage = new PIXI.Container();
            this.galaxyMap = galaxyMap;
        }
        Renderer.prototype.init = function () {
            this.initLayers();
            this.addEventListeners();
            this.activeRenderLoopId++;
            this.stage.renderable = true;
            this.resizeListener = this.resize.bind(this);
            window.addEventListener("resize", this.resizeListener, false);
        };
        Renderer.prototype.destroy = function () {
            this.stage.renderable = false;
            this.pause();
            if (this.pathfindingArrow) {
                this.pathfindingArrow.destroy();
                this.pathfindingArrow = null;
            }
            if (this.mouseEventHandler) {
                this.mouseEventHandler.destroy();
                this.mouseEventHandler = null;
            }
            if (this.camera) {
                this.camera.destroy();
                this.camera = null;
            }
            this.galaxyMap = null;
            if (this.renderer) {
                this.renderer.destroy(true);
                this.renderer = null;
            }
            this.stage.destroy(true);
            this.stage = null;
            this.pixiContainer = null;
            window.removeEventListener("resize", this.resizeListener);
        };
        Renderer.prototype.removeRendererView = function () {
            if (this.renderer && this.renderer.view.parentNode) {
                this.renderer.view.parentNode.removeChild(this.renderer.view);
            }
        };
        Renderer.prototype.bindRendererView = function (container) {
            this.pixiContainer = container;
            if (!this.renderer) {
                var containerStyle = window.getComputedStyle(this.pixiContainer);
                this.renderer = PIXI.autoDetectRenderer(parseInt(containerStyle.width), parseInt(containerStyle.height), {
                    autoResize: false,
                    antialias: true
                });
            }
            this.pixiContainer.appendChild(this.renderer.view);
            this.renderer.view.setAttribute("id", "pixi-canvas");
            this.resize();
            if (!this.isBattleBackground) {
                this.setupDefaultLayers();
                this.addCamera();
            }
            else {
                this.setupBackgroundLayers();
            }
        };
        Renderer.prototype.initLayers = function () {
            var _bgSprite = this.layers["bgSprite"] = new PIXI.Container();
            _bgSprite.interactiveChildren = false;
            var _main = this.layers["main"] = new PIXI.Container();
            var _map = this.layers["map"] = new PIXI.Container();
            var _bgFilter = this.layers["bgFilter"] = new PIXI.Container();
            _bgFilter.interactiveChildren = false;
            var _select = this.layers["select"] = new PIXI.Container();
            _select.interactiveChildren = false;
            _main.addChild(_map);
            _main.addChild(_select);
        };
        Renderer.prototype.setupDefaultLayers = function () {
            this.stage.removeChildren();
            this.stage.addChild(this.layers["bgSprite"]);
            this.stage.addChild(this.layers["main"]);
            this.renderOnce();
        };
        Renderer.prototype.setupBackgroundLayers = function () {
            this.stage.removeChildren();
            this.stage.addChild(this.layers["bgSprite"]);
            this.renderOnce();
        };
        Renderer.prototype.addCamera = function () {
            var oldToCenterOn;
            if (this.mouseEventHandler)
                this.mouseEventHandler.destroy();
            if (this.camera) {
                oldToCenterOn = this.camera.toCenterOn;
                this.camera.destroy();
            }
            this.camera = new Camera_1.default(this.layers["main"], 0.5);
            this.camera.toCenterOn = this.toCenterOn || oldToCenterOn;
            this.toCenterOn = null;
            this.mouseEventHandler = new MouseEventHandler_1.default(this, this.camera);
            this.pathfindingArrow = new PathfindingArrow_1.default(this.layers["select"]);
        };
        Renderer.prototype.addEventListeners = function () {
            var self = this;
            var main = this.stage;
            main.interactive = true;
            main.hitArea = new PIXI.Rectangle(-10000, -10000, 20000, 20000);
            var mainMouseDownFN = function (event) {
                if (event.target !== main)
                    return;
                self.mouseEventHandler.mouseDown(event);
            };
            var mainMouseMoveFN = function (event) {
                if (event.target !== main)
                    return;
                self.mouseEventHandler.mouseMove(event);
            };
            var mainMouseUpFN = function (event) {
                if (event.target !== main)
                    return;
                self.mouseEventHandler.mouseUp(event);
            };
            var mainMouseUpOutsideFN = function (event) {
                if (event.target !== main)
                    return;
                self.mouseEventHandler.mouseUp(event);
            };
            var mainListeners = {
                mousedown: mainMouseDownFN,
                rightdown: mainMouseDownFN,
                touchstart: mainMouseDownFN,
                mousemove: mainMouseMoveFN,
                touchmove: mainMouseMoveFN,
                mouseup: mainMouseUpFN,
                rightup: mainMouseUpFN,
                touchend: mainMouseUpFN,
                mouseupoutside: mainMouseUpOutsideFN,
                rightupoutside: mainMouseUpOutsideFN,
                touchendoutside: mainMouseUpOutsideFN,
            };
            for (var eventType in mainListeners) {
                main.on(eventType, mainListeners[eventType]);
            }
        };
        Renderer.prototype.resize = function () {
            if (this.renderer && document.body.contains(this.renderer.view)) {
                var w = this.pixiContainer.offsetWidth * window.devicePixelRatio;
                var h = this.pixiContainer.offsetHeight * window.devicePixelRatio;
                this.renderer.resize(w, h);
                this.layers["bgFilter"].filterArea = new PIXI.Rectangle(0, 0, w, h);
                this.backgroundIsDirty = true;
                if (this.isPaused) {
                    this.renderOnce();
                }
            }
        };
        Renderer.prototype.renderBackground = function () {
            var bgObject;
            if (this.isBattleBackground) {
                bgObject = this.renderBlurredBackground.apply(this, this.blurProps);
            }
            else {
                bgObject = App_23.default.moduleData.mapBackgroundDrawingFunction(this.galaxyMap.seed, this.renderer);
            }
            this.layers["bgSprite"].removeChildren();
            this.layers["bgSprite"].addChild(bgObject);
            this.backgroundIsDirty = false;
        };
        Renderer.prototype.renderBlurredBackground = function (x, y, width, height, seed) {
            var bg = App_23.default.moduleData.starBackgroundDrawingFunction(seed, this.renderer);
            var fg = App_23.default.moduleData.starBackgroundDrawingFunction(seed, this.renderer);
            var container = new PIXI.Container();
            container.addChild(bg);
            container.addChild(fg);
            var blurFilter = new PIXI.filters.BlurFilter();
            blurFilter.blur = 1;
            fg.filters = [blurFilter];
            fg.filterArea = new PIXI.Rectangle(x, y, width, height);
            var texture = container.generateTexture(this.renderer);
            var sprite = new PIXI.Sprite(texture);
            return sprite;
        };
        Renderer.prototype.renderOnce = function () {
            this.forceFrame = true;
            this.render();
        };
        Renderer.prototype.pause = function () {
            this.isPaused = true;
            this.forceFrame = false;
        };
        Renderer.prototype.resume = function () {
            this.isPaused = false;
            this.forceFrame = false;
            this.activeRenderLoopId = this.activeRenderLoopId++;
            this.render(this.activeRenderLoopId);
        };
        Renderer.prototype.render = function (renderLoopId) {
            if (!document.body.contains(this.pixiContainer)) {
                this.pause();
                return;
            }
            if (this.isPaused) {
                if (this.forceFrame) {
                    this.forceFrame = false;
                }
                else {
                    return;
                }
            }
            if (this.backgroundIsDirty) {
                this.renderBackground();
            }
            this.renderer.render(this.stage);
            if (this.activeRenderLoopId === renderLoopId) {
                window.requestAnimationFrame(this.render.bind(this, renderLoopId));
            }
        };
        return Renderer;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Renderer;
});
define("src/uicomponents/unitlist/abilitylist", ["require", "exports"], function (require, exports) {
    "use strict";
    var AbilityListComponent = (function (_super) {
        __extends(AbilityListComponent, _super);
        function AbilityListComponent(props) {
            _super.call(this, props);
            this.displayName = "AbilityList";
        }
        AbilityListComponent.prototype.render = function () {
            var abilities = this.props.abilities;
            var baseClassName = "unit-info-ability";
            if (abilities.length < 1)
                return null;
            var abilityElements = [];
            var addedAbilityTypes = {};
            abilities.sort(function (_a, _b) {
                if (_a.mainEffect && !_b.mainEffect)
                    return -1;
                else if (_b.mainEffect && !_a.mainEffect)
                    return 1;
                if (_a.type === "learnable")
                    return 1;
                else if (_b.type === "learnable")
                    return -1;
                var a = _a.displayName.toLowerCase();
                var b = _b.displayName.toLowerCase();
                if (a > b)
                    return 1;
                else if (a < b)
                    return -1;
                else
                    return 0;
            });
            for (var i = 0; i < abilities.length; i++) {
                var ability = abilities[i];
                if (ability.isHidden) {
                    continue;
                }
                if (!addedAbilityTypes[ability.type]) {
                    addedAbilityTypes[ability.type] = 0;
                }
                var className = "unit-info-ability";
                var isPassiveSkill = !ability.mainEffect;
                if (isPassiveSkill) {
                    className += " passive-skill";
                }
                else {
                    className += " active-skill";
                }
                if (addedAbilityTypes[ability.type] >= 1) {
                    className += " redundant-ability";
                }
                abilityElements.push(React.DOM.li({
                    className: className,
                    title: ability.description,
                    key: ability.type + addedAbilityTypes[ability.type],
                    onClick: (this.props.handleClick ? this.props.handleClick.bind(null, ability) : undefined)
                }, "[" + ability.displayName + "]"));
                addedAbilityTypes[ability.type]++;
            }
            return (React.DOM.ul({
                className: "ability-list"
            }, abilityElements));
        };
        return AbilityListComponent;
    }(React.Component));
    exports.AbilityListComponent = AbilityListComponent;
    var Factory = React.createFactory(AbilityListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/mixins/normalizeEvent", ["require", "exports"], function (require, exports) {
    "use strict";
    function normalizeMouseEvent(nativeEvent, reactEvent) {
        return ({
            wasTouchEvent: false,
            clientX: nativeEvent.clientX,
            clientY: nativeEvent.clientY,
            pageX: nativeEvent.pageX,
            pageY: nativeEvent.pageY,
            target: nativeEvent.target,
            button: nativeEvent.button,
            preventDefault: (reactEvent ?
                reactEvent.preventDefault.bind(reactEvent) :
                nativeEvent.preventDefault.bind(nativeEvent)),
            stopPropagation: (reactEvent ?
                reactEvent.stopPropagation.bind(reactEvent) :
                nativeEvent.stopPropagation.bind(nativeEvent)),
        });
    }
    function normalizeTouchEvent(nativeEvent, reactEvent) {
        var touch = nativeEvent.touches[0];
        return ({
            wasTouchEvent: true,
            clientX: touch.clientX,
            clientY: touch.clientY,
            pageX: touch.pageX,
            pageY: touch.pageY,
            target: touch.target,
            button: -1,
            preventDefault: (reactEvent ?
                reactEvent.preventDefault.bind(reactEvent) :
                nativeEvent.preventDefault.bind(nativeEvent)),
            stopPropagation: (reactEvent ?
                reactEvent.stopPropagation.bind(reactEvent) :
                nativeEvent.stopPropagation.bind(nativeEvent)),
        });
    }
    function normalizeEvent(sourceEvent) {
        var castedEvent = sourceEvent;
        var isReactEvent = Boolean(castedEvent.nativeEvent);
        var isTouchEvent = Boolean(castedEvent.touches);
        if (isTouchEvent) {
            if (isReactEvent) {
                return normalizeTouchEvent(castedEvent.nativeEvent, castedEvent);
            }
            else {
                return normalizeTouchEvent(sourceEvent);
            }
        }
        else {
            if (isReactEvent) {
                return normalizeMouseEvent(castedEvent.nativeEvent, castedEvent);
            }
            else {
                return normalizeMouseEvent(sourceEvent);
            }
        }
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = normalizeEvent;
});
define("src/uicomponents/mixins/DragPositioner", ["require", "exports", "src/utility", "src/uicomponents/mixins/normalizeEvent"], function (require, exports, utility_21, normalizeEvent_1) {
    "use strict";
    var DragPositioner = (function () {
        function DragPositioner(owner, props) {
            this.isDragging = false;
            this.containerDragOnly = false;
            this.dragThreshhold = 5;
            this.preventAutoResize = false;
            this.shouldMakeClone = false;
            this.dragPos = { x: undefined, y: undefined };
            this.dragSize = { x: undefined, y: undefined };
            this.mouseIsDown = false;
            this.dragOffset = { x: 0, y: 0 };
            this.mouseDownPosition = { x: 0, y: 0 };
            this.originPosition = { x: 0, y: 0 };
            this.cloneElement = null;
            this.owner = owner;
            if (props) {
                var propKeysMap = {
                    containerElement: "containerElementDescriptor"
                };
                for (var key in props) {
                    if (propKeysMap[key]) {
                        this[propKeysMap[key]] = props[key];
                    }
                    else {
                        this[key] = props[key];
                    }
                }
            }
            this.setContainerRect = this.setContainerRect.bind(this);
            this.handleNativeMoveEvent = this.handleNativeMoveEvent.bind(this);
            this.handleNativeUpEvent = this.handleNativeUpEvent.bind(this);
            this.handleReactDownEvent = this.handleReactDownEvent.bind(this);
        }
        DragPositioner.prototype.componentDidMount = function () {
            this.ownerDOMNode = ReactDOM.findDOMNode(this.owner);
            if (this.containerElementDescriptor) {
                if (this.containerElementDescriptor instanceof React.Component) {
                    this.containerElement = ReactDOM.findDOMNode(this.containerElementDescriptor);
                }
                else {
                    this.containerElement = this.containerElementDescriptor;
                }
            }
            else {
                this.containerElement = document.body;
            }
            this.setContainerRect();
            window.addEventListener("resize", this.setContainerRect, false);
        };
        DragPositioner.prototype.componentWillUnmount = function () {
            this.removeEventListeners();
            window.removeEventListener("resize", this.setContainerRect);
        };
        DragPositioner.prototype.getStyleAttributes = function () {
            return ({
                top: this.dragPos.y,
                left: this.dragPos.x,
                width: this.dragSize.x,
                height: this.dragSize.y
            });
        };
        DragPositioner.prototype.handleReactDownEvent = function (e) {
            this.handleMouseDown(normalizeEvent_1.default(e));
        };
        DragPositioner.prototype.updateDOMNodeStyle = function () {
            var s;
            if (this.cloneElement) {
                s = this.cloneElement.style;
            }
            else {
                s = this.ownerDOMNode.style;
                s.width = "" + this.dragSize.x + "px";
                s.height = "" + this.dragSize.y + "px";
            }
            s.left = "" + this.dragPos.x + "px";
            s.top = "" + this.dragPos.y + "px";
        };
        DragPositioner.prototype.handleMouseDown = function (e) {
            if (e.button) {
                return;
            }
            if (this.containerDragOnly) {
                if (!e.target.classList.contains("draggable-container")) {
                    return;
                }
            }
            e.preventDefault();
            e.stopPropagation();
            if (this.isDragging) {
                return;
            }
            var clientRect = this.ownerDOMNode.getBoundingClientRect();
            if (e.wasTouchEvent) {
                this.needsFirstTouchUpdate = true;
                this.touchEventTarget = e.target;
            }
            this.addEventListeners();
            this.dragOffset = this.forcedDragOffset ||
                {
                    x: e.clientX - clientRect.left,
                    y: e.clientY - clientRect.top
                };
            this.mouseIsDown = true;
            this.mouseDownPosition =
                {
                    x: e.pageX,
                    y: e.pageY
                };
            this.originPosition =
                {
                    x: clientRect.left + document.body.scrollLeft,
                    y: clientRect.top + document.body.scrollTop
                };
            if (this.dragThreshhold <= 0) {
                this.handleMouseMove(e);
            }
        };
        DragPositioner.prototype.handleMouseMove = function (e) {
            e.preventDefault();
            if (e.clientX === 0 && e.clientY === 0) {
                return;
            }
            if (!this.isDragging) {
                var deltaX = Math.abs(e.pageX - this.mouseDownPosition.x);
                var deltaY = Math.abs(e.pageY - this.mouseDownPosition.y);
                var delta = deltaX + deltaY;
                if (delta >= this.dragThreshhold) {
                    this.isDragging = true;
                    if (!this.preventAutoResize) {
                        this.dragSize.x = this.ownerDOMNode.offsetWidth;
                        this.dragSize.y = this.ownerDOMNode.offsetHeight;
                    }
                    if (this.shouldMakeClone || this.makeDragClone) {
                        if (!this.makeDragClone) {
                            var nextSibling = this.ownerDOMNode.nextSibling;
                            var clone = this.ownerDOMNode.cloneNode(true);
                            utility_21.recursiveRemoveAttribute(clone, "data-reactid");
                            this.ownerDOMNode.parentNode.insertBefore(clone, nextSibling);
                            this.cloneElement = clone;
                        }
                        else {
                            var clone = this.makeDragClone();
                            utility_21.recursiveRemoveAttribute(clone, "data-reactid");
                            document.body.appendChild(clone);
                            this.cloneElement = clone;
                        }
                    }
                    this.owner.forceUpdate();
                    if (this.onDragStart) {
                        this.onDragStart();
                    }
                    if (this.onDragMove) {
                        this.onDragMove(e.pageX - this.dragOffset.x, e.pageY - this.dragOffset.y);
                    }
                }
            }
            if (this.isDragging) {
                this.handleDrag(e);
            }
        };
        DragPositioner.prototype.handleDrag = function (e) {
            var domWidth;
            var domHeight;
            if (this.makeDragClone) {
                domWidth = this.cloneElement.offsetWidth;
                domHeight = this.cloneElement.offsetHeight;
            }
            else {
                domWidth = this.ownerDOMNode.offsetWidth;
                domHeight = this.ownerDOMNode.offsetHeight;
            }
            var minX = this.containerRect.left;
            var maxX = this.containerRect.right;
            var minY = this.containerRect.top;
            var maxY = this.containerRect.bottom;
            var x = e.pageX - this.dragOffset.x;
            var y = e.pageY - this.dragOffset.y;
            var x2 = x + domWidth;
            var y2 = y + domHeight;
            if (x < minX) {
                x = minX;
            }
            else if (x2 > maxX) {
                x = this.containerRect.width - domWidth;
            }
            ;
            if (y < minY) {
                y = minY;
            }
            else if (y2 > maxY) {
                y = this.containerRect.height - domHeight;
            }
            ;
            if (this.onDragMove) {
                this.onDragMove(x, y);
            }
            else {
                this.dragPos.x = x;
                this.dragPos.y = y;
                this.updateDOMNodeStyle();
            }
        };
        DragPositioner.prototype.handleMouseUp = function (e) {
            this.mouseIsDown = false;
            this.mouseDownPosition =
                {
                    x: 0,
                    y: 0
                };
            if (this.isDragging) {
                this.handleDragEnd(e);
            }
            this.removeEventListeners();
        };
        DragPositioner.prototype.handleDragEnd = function (e) {
            if (this.cloneElement) {
                this.cloneElement.parentNode.removeChild(this.cloneElement);
                this.cloneElement = null;
            }
            this.isDragging = false;
            this.dragOffset = { x: 0, y: 0 };
            this.originPosition = { x: 0, y: 0 };
            if (this.onDragEnd) {
                var endSuccesful = this.onDragEnd();
            }
            this.owner.forceUpdate();
        };
        DragPositioner.prototype.setContainerRect = function () {
            this.containerRect = this.containerElement.getBoundingClientRect();
        };
        DragPositioner.prototype.handleNativeMoveEvent = function (e) {
            this.handleMouseMove(normalizeEvent_1.default(e));
        };
        DragPositioner.prototype.handleNativeUpEvent = function (e) {
            this.handleMouseUp(normalizeEvent_1.default(e));
        };
        DragPositioner.prototype.addEventListeners = function () {
            this.containerElement.addEventListener("mousemove", this.handleNativeMoveEvent);
            document.addEventListener("mouseup", this.handleNativeUpEvent);
            if (this.touchEventTarget) {
                this.touchEventTarget.addEventListener("touchmove", this.handleNativeMoveEvent);
                this.touchEventTarget.addEventListener("touchend", this.handleNativeUpEvent);
            }
        };
        DragPositioner.prototype.removeEventListeners = function () {
            this.containerElement.removeEventListener("mousemove", this.handleNativeMoveEvent);
            document.removeEventListener("mouseup", this.handleNativeUpEvent);
            if (this.touchEventTarget) {
                this.touchEventTarget.removeEventListener("touchmove", this.handleNativeMoveEvent);
                this.touchEventTarget.removeEventListener("touchend", this.handleNativeUpEvent);
                this.touchEventTarget = null;
            }
        };
        return DragPositioner;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = DragPositioner;
});
define("src/uicomponents/mixins/applyMixins", ["require", "exports"], function (require, exports) {
    "use strict";
    var lifeCycleFunctions = [
        "componentWillMount", "componentDidMount",
        "componentWillReceiveProps", "componentWillUpdate",
        "componentDidUpdate", "componentWillUnmount"
    ];
    function wrapLifeCycleFunction(base, functionName, mixins) {
        var originalFunction = base[functionName];
        var mixinsWithFunction = mixins.filter(function (m) { return Boolean(m[functionName]); });
        base[functionName] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            mixinsWithFunction.forEach(function (m) {
                m[functionName].apply(m, args);
            });
            if (originalFunction) {
                originalFunction.apply(base, args);
            }
        };
    }
    function wrapRenderFunction(base, mixins) {
        var originalFunction = base.render;
        var mixinsWithFunction = mixins.filter(function (m) { return Boolean(m.onRender); });
        base.render = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            mixinsWithFunction.forEach(function (m) {
                m.onRender.call(m);
            });
            return originalFunction.apply(base, args);
        };
    }
    function applyMixins(base) {
        var mixins = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            mixins[_i - 1] = arguments[_i];
        }
        lifeCycleFunctions.forEach(function (functionName) {
            wrapLifeCycleFunction(base, functionName, mixins);
        });
        wrapRenderFunction(base, mixins);
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = applyMixins;
});
define("src/uicomponents/unitlist/UnitItem", ["require", "exports", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, DragPositioner_1, applyMixins_1) {
    "use strict";
    var UnitItemComponent = (function (_super) {
        __extends(UnitItemComponent, _super);
        function UnitItemComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitItem";
            this.bindMethods();
            if (this.props.isDraggable) {
                this.dragPositioner = new DragPositioner_1.default(this, this.props.dragPositionerProps);
                this.dragPositioner.onDragStart = this.onDragStart;
                this.dragPositioner.onDragEnd = this.onDragEnd;
                applyMixins_1.default(this, this.dragPositioner);
            }
        }
        UnitItemComponent.prototype.bindMethods = function () {
            this.onDragEnd = this.onDragEnd.bind(this);
            this.getTechIcon = this.getTechIcon.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
        };
        UnitItemComponent.prototype.onDragStart = function () {
            this.props.onDragStart(this.props.item);
        };
        UnitItemComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        UnitItemComponent.prototype.getTechIcon = function (techLevel) {
            switch (techLevel) {
                case 2:
                    {
                        return "img/icons/t2icon.png";
                    }
                case 3:
                    {
                        return "img/icons/t3icon.png";
                    }
            }
        };
        UnitItemComponent.prototype.render = function () {
            if (!this.props.item) {
                var emptyItemTitle = "Item slot: " + this.props.slot;
                return (React.DOM.div({ className: "empty-unit-item", title: emptyItemTitle }));
            }
            var item = this.props.item;
            var divProps = {
                className: "unit-item",
                title: item.template.displayName
            };
            if (this.props.isDraggable) {
                divProps.className += " draggable";
                divProps.onMouseDown = divProps.onTouchStart =
                    this.dragPositioner.handleReactDownEvent;
                if (this.dragPositioner.isDragging) {
                    divProps.style = this.dragPositioner.getStyleAttributes();
                    divProps.className += " dragging";
                }
            }
            return (React.DOM.div(divProps, React.DOM.div({
                className: "item-icon-container"
            }, React.DOM.img({
                className: "item-icon-base",
                src: item.template.icon
            }), item.template.techLevel > 1 ? React.DOM.img({
                className: "item-icon-tech-level",
                src: this.getTechIcon(item.template.techLevel)
            }) : null)));
        };
        return UnitItemComponent;
    }(React.Component));
    exports.UnitItemComponent = UnitItemComponent;
    var Factory = React.createFactory(UnitItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/unititemwrapper", ["require", "exports", "src/uicomponents/unitlist/UnitItem"], function (require, exports, UnitItem_1) {
    "use strict";
    var UnitItemWrapperComponent = (function (_super) {
        __extends(UnitItemWrapperComponent, _super);
        function UnitItemWrapperComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitItemWrapper";
            this.bindMethods();
        }
        UnitItemWrapperComponent.prototype.bindMethods = function () {
            this.handleMouseUp = this.handleMouseUp.bind(this);
        };
        UnitItemWrapperComponent.prototype.handleMouseUp = function () {
            this.props.onMouseUp();
        };
        UnitItemWrapperComponent.prototype.render = function () {
            var item = this.props.item;
            var wrapperProps = {
                className: "unit-item-wrapper"
            };
            if (this.props.onMouseUp) {
                wrapperProps.onMouseUp = this.handleMouseUp;
            }
            ;
            if (this.props.currentDragItem) {
                var dragItem = this.props.currentDragItem;
                if (dragItem.template.slot === this.props.slot) {
                    wrapperProps.className += " drop-target";
                }
                else {
                    wrapperProps.onMouseUp = null;
                    wrapperProps.className += " invalid-drop-target";
                }
            }
            return (React.DOM.div(wrapperProps, UnitItem_1.default({
                item: this.props.item,
                slot: this.props.slot,
                key: "item",
                isDraggable: this.props.isDraggable,
                onDragStart: this.props.onDragStart,
                onDragEnd: this.props.onDragEnd
            })));
        };
        return UnitItemWrapperComponent;
    }(React.Component));
    exports.UnitItemWrapperComponent = UnitItemWrapperComponent;
    var Factory = React.createFactory(UnitItemWrapperComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/upgradeabilities", ["require", "exports", "src/uicomponents/unitlist/abilitylist"], function (require, exports, AbilityList_1) {
    "use strict";
    var UpgradeAbilitiesComponent = (function (_super) {
        __extends(UpgradeAbilitiesComponent, _super);
        function UpgradeAbilitiesComponent(props) {
            _super.call(this, props);
            this.displayName = "UpgradeAbilities";
        }
        UpgradeAbilitiesComponent.prototype.render = function () {
            if (this.props.abilities.length === 0) {
                return null;
            }
            var headerText;
            if (this.props.learningNewability) {
                headerText = "Learn ability";
            }
            else {
                headerText = "Upgrade ability";
                if (this.props.sourceAbility) {
                    headerText += " " + this.props.sourceAbility.displayName;
                }
            }
            return (React.DOM.div({
                className: "upgrade-abilities"
            }, React.DOM.div({
                className: "upgrade-abilities-header"
            }, headerText), AbilityList_1.default({
                abilities: this.props.abilities,
                handleClick: this.props.handleClick
            })));
        };
        return UpgradeAbilitiesComponent;
    }(React.Component));
    exports.UpgradeAbilitiesComponent = UpgradeAbilitiesComponent;
    var Factory = React.createFactory(UpgradeAbilitiesComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/upgradeattributes", ["require", "exports"], function (require, exports) {
    "use strict";
    var UpgradeAttributesComponent = (function (_super) {
        __extends(UpgradeAttributesComponent, _super);
        function UpgradeAttributesComponent(props) {
            _super.call(this, props);
            this.displayName = "UpgradeAttributes";
            this.bindMethods();
        }
        UpgradeAttributesComponent.prototype.upgradeAttribute = function (attribute, e) {
            if (e.button)
                return;
            this.props.handleClick(attribute);
        };
        UpgradeAttributesComponent.prototype.bindMethods = function () {
            this.upgradeAttribute = this.upgradeAttribute.bind(this);
        };
        UpgradeAttributesComponent.prototype.render = function () {
            var unit = this.props.unit;
            var rows = [];
            for (var attribute in unit.baseAttributes) {
                var maxAttribute = attribute === "maxActionPoints" ? 6 : 9;
                if (unit.baseAttributes[attribute] < maxAttribute) {
                    rows.push(React.DOM.div({
                        className: "upgrade-attributes-attribute",
                        onClick: this.upgradeAttribute.bind(this, attribute),
                        key: attribute
                    }, attribute + ": " + unit.baseAttributes[attribute] + " -> " + (unit.baseAttributes[attribute] + 1)));
                }
            }
            if (rows.length === 0) {
                return null;
            }
            return (React.DOM.div({
                className: "upgrade-attributes"
            }, React.DOM.div({
                className: "upgrade-attributes-header"
            }, "Upgrade stats"), rows));
        };
        return UpgradeAttributesComponent;
    }(React.Component));
    exports.UpgradeAttributesComponent = UpgradeAttributesComponent;
    var Factory = React.createFactory(UpgradeAttributesComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/popups/TopMenuPopup", ["require", "exports"], function (require, exports) {
    "use strict";
    var TopMenuPopupComponent = (function (_super) {
        __extends(TopMenuPopupComponent, _super);
        function TopMenuPopupComponent(props) {
            _super.call(this, props);
            this.displayName = "TopMenuPopup";
        }
        TopMenuPopupComponent.prototype.render = function () {
            var _this = this;
            var contentProps = this.props.contentProps;
            contentProps.ref = function (component) {
                _this.ref_TODO_content = component;
            };
            return (React.DOM.div({
                className: "top-menu-popup-container draggable-container"
            }, React.DOM.button({
                className: "light-box-close",
                onClick: this.props.handleClose
            }, "X"), React.DOM.div({
                className: "light-box-content"
            }, this.props.contentConstructor(contentProps))));
        };
        return TopMenuPopupComponent;
    }(React.Component));
    exports.TopMenuPopupComponent = TopMenuPopupComponent;
    var Factory = React.createFactory(TopMenuPopupComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/popups/PopupResizeHandle", ["require", "exports", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, DragPositioner_2, applyMixins_2) {
    "use strict";
    var PopupResizeHandleComponent = (function (_super) {
        __extends(PopupResizeHandleComponent, _super);
        function PopupResizeHandleComponent(props) {
            _super.call(this, props);
            this.displayName = "PopupResizeHandle";
            this.bindMethods();
            this.dragPositioner = new DragPositioner_2.default(this);
            this.dragPositioner.onDragMove = this.onDragMove;
            applyMixins_2.default(this, this.dragPositioner);
        }
        PopupResizeHandleComponent.prototype.bindMethods = function () {
            this.onDragMove = this.onDragMove.bind(this);
        };
        PopupResizeHandleComponent.prototype.onDragMove = function (x, y) {
            var rect = ReactDOM.findDOMNode(this).getBoundingClientRect();
            this.props.handleResize(x + rect.width, y + rect.height);
        };
        PopupResizeHandleComponent.prototype.render = function () {
            return (React.DOM.img({
                className: "popup-resize-handle",
                src: "img/icons/resizeHandle.png",
                onTouchStart: this.dragPositioner.handleReactDownEvent,
                onMouseDown: this.dragPositioner.handleReactDownEvent
            }));
        };
        return PopupResizeHandleComponent;
    }(React.Component));
    exports.PopupResizeHandleComponent = PopupResizeHandleComponent;
    var Factory = React.createFactory(PopupResizeHandleComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/popups/Popup", ["require", "exports", "src/eventManager", "src/uicomponents/popups/PopupResizeHandle", "src/utility", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, eventManager_17, PopupResizeHandle_1, utility_22, DragPositioner_3, applyMixins_3) {
    "use strict";
    var PopupComponent = (function (_super) {
        __extends(PopupComponent, _super);
        function PopupComponent(props) {
            _super.call(this, props);
            this.displayName = "Popup";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
            this.dragPositioner = new DragPositioner_3.default(this, this.props.dragPositionerProps);
            applyMixins_3.default(this, this.dragPositioner);
        }
        PopupComponent.prototype.bindMethods = function () {
            this.onMouseDown = this.onMouseDown.bind(this);
            this.handleResizeMove = this.handleResizeMove.bind(this);
            this.setInitialPosition = this.setInitialPosition.bind(this);
        };
        PopupComponent.prototype.getInitialStateTODO = function () {
            return ({
                zIndex: -1
            });
        };
        PopupComponent.prototype.componentDidMount = function () {
            this.setInitialPosition();
        };
        PopupComponent.prototype.onMouseDown = function (e) {
            this.dragPositioner.handleReactDownEvent(e);
            var newZIndex = this.props.incrementZIndex(this.state.zIndex);
            if (this.state.zIndex !== newZIndex) {
                this.setState({
                    zIndex: this.props.incrementZIndex(this.state.zIndex)
                });
            }
        };
        PopupComponent.prototype.setInitialPosition = function () {
            var domRect = ReactDOM.findDOMNode(this).getBoundingClientRect();
            var rect = {
                top: domRect.top,
                left: domRect.left,
                width: domRect.width,
                height: domRect.height
            };
            var left;
            var top;
            var container = this.dragPositioner.containerElement;
            if (this.props.initialPosition) {
                rect.top = this.props.initialPosition.top || rect.top;
                rect.left = this.props.initialPosition.left || rect.left;
                if (this.props.initialPosition.width) {
                    rect.width = Math.min(this.props.initialPosition.width, container.offsetWidth);
                }
                if (this.props.initialPosition.height) {
                    rect.height = Math.min(this.props.initialPosition.height, container.offsetHeight);
                }
                if (rect.left || rect.top) {
                    left = rect.left;
                    top = rect.top;
                }
            }
            if (!left && !top) {
                var position = this.props.getInitialPosition(rect, container);
                left = position.left;
                top = position.top;
            }
            left = utility_22.clamp(left, 0, container.offsetWidth - rect.width);
            top = utility_22.clamp(top, 0, container.offsetHeight - rect.height);
            this.dragPositioner.dragPos.y = top;
            this.dragPositioner.dragPos.x = left;
            this.dragPositioner.dragSize.x = Math.min(window.innerWidth, rect.width);
            this.dragPositioner.dragSize.y = Math.min(window.innerHeight, rect.height);
            this.setState({
                zIndex: this.props.incrementZIndex(this.state.zIndex)
            }, this.props.finishedMountingCallback);
        };
        PopupComponent.prototype.handleResizeMove = function (x, y) {
            var minWidth = this.props.minWidth || 0;
            var maxWidth = this.props.maxWidth || window.innerWidth;
            var minHeight = this.props.minHeight || 0;
            var maxHeight = this.props.maxHeight || window.innerHeight;
            this.dragPositioner.dragSize.x = utility_22.clamp(x + 5 - this.dragPositioner.dragPos.x, minWidth, maxWidth);
            this.dragPositioner.dragSize.y = utility_22.clamp(y + 5 - this.dragPositioner.dragPos.y, minHeight, maxHeight);
            this.dragPositioner.updateDOMNodeStyle();
            eventManager_17.default.dispatchEvent("popupResized");
        };
        PopupComponent.prototype.render = function () {
            var divProps = {
                className: "popup draggable-container",
                onTouchStart: this.onMouseDown,
                onMouseDown: this.onMouseDown,
                style: {
                    top: this.dragPositioner.dragPos ? this.dragPositioner.dragPos.y : 0,
                    left: this.dragPositioner.dragPos ? this.dragPositioner.dragPos.x : 0,
                    width: this.dragPositioner.dragSize.x,
                    height: this.dragPositioner.dragSize.y,
                    zIndex: this.state.zIndex,
                    minWidth: this.props.minWidth,
                    minHeight: this.props.minHeight
                }
            };
            if (this.dragPositioner.isDragging) {
                divProps.className += " dragging";
            }
            var contentProps = this.props.contentProps;
            contentProps.closePopup = this.props.closePopup;
            contentProps.ref = "content";
            var resizeHandle = !this.props.resizable ? null : PopupResizeHandle_1.default({
                handleResize: this.handleResizeMove
            });
            return (React.DOM.div(divProps, this.props.contentConstructor(contentProps), resizeHandle));
        };
        return PopupComponent;
    }(React.Component));
    exports.PopupComponent = PopupComponent;
    var Factory = React.createFactory(PopupComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/popups/PopupManager", ["require", "exports", "src/uicomponents/popups/Popup", "src/eventManager", "src/utility"], function (require, exports, Popup_1, eventManager_18, utility_23) {
    "use strict";
    var PopupManagerComponent = (function (_super) {
        __extends(PopupManagerComponent, _super);
        function PopupManagerComponent(props) {
            _super.call(this, props);
            this.displayName = "PopupManager";
            this.popupId = 0;
            this.currentZIndex = 0;
            this.popupComponentsByID = {};
            this.listeners = {};
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        PopupManagerComponent.prototype.bindMethods = function () {
            this.getHighestZIndexPopup = this.getHighestZIndexPopup.bind(this);
            this.incrementZIndex = this.incrementZIndex.bind(this);
            this.getInitialPosition = this.getInitialPosition.bind(this);
            this.closePopup = this.closePopup.bind(this);
            this.makePopup = this.makePopup.bind(this);
            this.setPopupContent = this.setPopupContent.bind(this);
            this.getPopupId = this.getPopupId.bind(this);
            this.hasPopup = this.hasPopup.bind(this);
            this.getPopup = this.getPopup.bind(this);
        };
        PopupManagerComponent.prototype.componentWillMount = function () {
            var self = this;
            this.listeners["makePopup"] =
                eventManager_18.default.addEventListener("makePopup", function (data) {
                    self.makePopup(data);
                });
            this.listeners["closePopup"] =
                eventManager_18.default.addEventListener("closePopup", function (popupId) {
                    self.closePopup(popupId);
                });
            this.listeners["setPopupContent"] =
                eventManager_18.default.addEventListener("setPopupContent", function (data) {
                    self.setPopupContent(data.id, data.content);
                });
        };
        PopupManagerComponent.prototype.componentWillUnmount = function () {
            for (var listenerId in this.listeners) {
                eventManager_18.default.removeEventListener(listenerId, this.listeners[listenerId]);
            }
        };
        PopupManagerComponent.prototype.getInitialStateTODO = function () {
            return ({
                popups: []
            });
        };
        PopupManagerComponent.prototype.getHighestZIndexPopup = function () {
            if (this.state.popups.length === 0)
                return null;
            var popups = [];
            for (var id in this.popupComponentsByID) {
                popups.push(this.popupComponentsByID[id]);
            }
            return popups.sort(function (a, b) {
                return b.state.zIndex - a.state.zIndex;
            })[0];
        };
        PopupManagerComponent.prototype.getInitialPosition = function (rect, container) {
            if (this.state.popups.length === 1) {
                return ({
                    left: container.offsetWidth / 2.5 - rect.width / 2,
                    top: container.offsetHeight / 2.5 - rect.height / 2
                });
            }
            else {
                var topMostPopupPosition = this.getHighestZIndexPopup().dragPositioner.dragPos;
                return ({
                    left: topMostPopupPosition.x + 20,
                    top: topMostPopupPosition.y + 20
                });
            }
        };
        PopupManagerComponent.prototype.incrementZIndex = function (childZIndex) {
            if (childZIndex === this.currentZIndex) {
                return this.currentZIndex;
            }
            else {
                return ++this.currentZIndex;
            }
        };
        PopupManagerComponent.prototype.getPopupId = function () {
            return this.popupId++;
        };
        PopupManagerComponent.prototype.getPopup = function (id) {
            for (var i = 0; i < this.state.popups.length; i++) {
                if (this.state.popups[i].id === id)
                    return this.state.popups[i];
            }
            return null;
        };
        PopupManagerComponent.prototype.hasPopup = function (id) {
            for (var i = 0; i < this.state.popups.length; i++) {
                if (this.state.popups[i].id === id)
                    return true;
            }
            return false;
        };
        PopupManagerComponent.prototype.closePopup = function (id) {
            if (!this.hasPopup(id))
                throw new Error("No such popup");
            var newPopups = [];
            for (var i = 0; i < this.state.popups.length; i++) {
                if (this.state.popups[i].id !== id) {
                    newPopups.push(this.state.popups[i]);
                }
            }
            this.setState({ popups: newPopups });
        };
        PopupManagerComponent.prototype.makePopup = function (props) {
            var _this = this;
            var id = this.getPopupId();
            var popupProps = props.popupProps ? utility_23.extendObject(props.popupProps) : {};
            popupProps.contentConstructor = props.contentConstructor;
            popupProps.contentProps = props.contentProps;
            popupProps.id = id;
            popupProps.key = id;
            popupProps.ref = function (component) {
                _this.popupComponentsByID[id] = component;
            };
            popupProps.incrementZIndex = this.incrementZIndex;
            popupProps.closePopup = this.closePopup.bind(this, id);
            popupProps.getInitialPosition = this.getInitialPosition;
            if (this.props.onlyAllowOne) {
                this.setState({
                    popups: [popupProps]
                });
            }
            else {
                var popups = this.state.popups.concat(popupProps);
                this.setState({
                    popups: popups
                });
            }
            return id;
        };
        PopupManagerComponent.prototype.setPopupContent = function (popupId, newContent) {
            var popup = this.getPopup(popupId);
            if (!popup)
                throw new Error();
            popup.contentProps = utility_23.extendObject(newContent, popup.contentProps);
            this.forceUpdate();
        };
        PopupManagerComponent.prototype.render = function () {
            var popups = this.state.popups;
            var toRender = [];
            for (var i = 0; i < popups.length; i++) {
                var popup = popups[i];
                var popupProps = utility_23.extendObject(popup);
                popupProps.activePopupsCount = popups.length;
                toRender.push(Popup_1.default(popupProps));
            }
            if (toRender.length < 1) {
                return null;
            }
            return (React.DOM.div({
                className: "popup-container"
            }, toRender));
        };
        return PopupManagerComponent;
    }(React.Component));
    exports.PopupManagerComponent = PopupManagerComponent;
    var Factory = React.createFactory(PopupManagerComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/upgradeunit", ["require", "exports", "src/uicomponents/unitlist/upgradeattributes", "src/uicomponents/unitlist/upgradeabilities", "src/uicomponents/popups/TopMenuPopup", "src/uicomponents/popups/PopupManager"], function (require, exports, UpgradeAttributes_1, UpgradeAbilities_1, TopMenuPopup_1, PopupManager_1) {
    "use strict";
    var UpgradeUnitComponent = (function (_super) {
        __extends(UpgradeUnitComponent, _super);
        function UpgradeUnitComponent(props) {
            _super.call(this, props);
            this.displayName = "UpgradeUnit";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        UpgradeUnitComponent.prototype.bindMethods = function () {
            this.upgradeAttribute = this.upgradeAttribute.bind(this);
            this.upgradeAbility = this.upgradeAbility.bind(this);
            this.makeAbilityLearnPopup = this.makeAbilityLearnPopup.bind(this);
            this.closePopup = this.closePopup.bind(this);
        };
        UpgradeUnitComponent.prototype.getInitialStateTODO = function () {
            return ({
                upgradeData: this.props.unit.getAbilityUpgradeData(),
                popupId: undefined
            });
        };
        UpgradeUnitComponent.prototype.upgradeAbility = function (source, newAbility) {
            var unit = this.props.unit;
            unit.upgradeAbility(source, newAbility);
            unit.handleLevelUp();
            this.setState({
                upgradeData: unit.getAbilityUpgradeData()
            });
            this.closePopup();
            this.props.onUnitUpgrade();
        };
        UpgradeUnitComponent.prototype.upgradeAttribute = function (attribute) {
            var unit = this.props.unit;
            unit.baseAttributes[attribute] += 1;
            unit.attributesAreDirty = true;
            unit.handleLevelUp();
            this.props.onUnitUpgrade();
        };
        UpgradeUnitComponent.prototype.makeAbilityLearnPopup = function (ability) {
            var upgradeData = this.state.upgradeData[ability.type];
            var popupId = this.ref_TODO_popupManager.makePopup({
                contentConstructor: TopMenuPopup_1.default,
                contentProps: {
                    handleClose: this.closePopup,
                    contentConstructor: UpgradeAbilities_1.default,
                    contentProps: {
                        abilities: upgradeData.possibleUpgrades,
                        handleClick: this.upgradeAbility.bind(this, upgradeData.base),
                        sourceAbility: upgradeData.base,
                        learningNewability: !Boolean(upgradeData.base)
                    }
                },
                popupProps: {
                    dragPositionerProps: {
                        preventAutoResize: true,
                        containerDragOnly: true
                    }
                }
            });
            this.setState({
                popupId: popupId
            });
        };
        UpgradeUnitComponent.prototype.closePopup = function () {
            this.ref_TODO_popupManager.closePopup(this.state.popupId);
            this.setState({
                popupId: undefined
            });
        };
        UpgradeUnitComponent.prototype.render = function () {
            var _this = this;
            var unit = this.props.unit;
            var upgradableAbilities = [];
            for (var source in this.state.upgradeData) {
                if (this.state.upgradeData[source].base) {
                    upgradableAbilities.push(this.state.upgradeData[source].base);
                }
                else {
                    upgradableAbilities.push({
                        type: source,
                        displayName: "** New ability **",
                        description: ""
                    });
                }
            }
            return (React.DOM.div({
                className: "upgrade-unit"
            }, PopupManager_1.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), React.DOM.div({
                className: "upgrade-unit-header"
            }, unit.name + "  " + "Level " + unit.level + " -> " + (unit.level + 1)), UpgradeAbilities_1.default({
                abilities: upgradableAbilities,
                handleClick: this.makeAbilityLearnPopup
            }), UpgradeAttributes_1.default({
                unit: unit,
                handleClick: this.upgradeAttribute
            })));
        };
        return UpgradeUnitComponent;
    }(React.Component));
    exports.UpgradeUnitComponent = UpgradeUnitComponent;
    var Factory = React.createFactory(UpgradeUnitComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/unitexperience", ["require", "exports", "src/uicomponents/unitlist/upgradeunit", "src/uicomponents/popups/TopMenuPopup", "src/uicomponents/popups/PopupManager"], function (require, exports, UpgradeUnit_1, TopMenuPopup_2, PopupManager_2) {
    "use strict";
    var UnitExperienceComponent = (function (_super) {
        __extends(UnitExperienceComponent, _super);
        function UnitExperienceComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitExperience";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        UnitExperienceComponent.prototype.bindMethods = function () {
            this.makePopup = this.makePopup.bind(this);
            this.closePopup = this.closePopup.bind(this);
            this.handleUnitUpgrade = this.handleUnitUpgrade.bind(this);
        };
        UnitExperienceComponent.prototype.getInitialStateTODO = function () {
            return ({
                upgradePopupId: undefined
            });
        };
        UnitExperienceComponent.prototype.makePopup = function () {
            var popupId = this.ref_TODO_popupManager.makePopup({
                contentConstructor: TopMenuPopup_2.default,
                contentProps: {
                    handleClose: this.closePopup,
                    contentConstructor: UpgradeUnit_1.default,
                    contentProps: {
                        unit: this.props.unit,
                        onUnitUpgrade: this.handleUnitUpgrade
                    }
                },
                popupProps: {
                    dragPositionerProps: {
                        preventAutoResize: true,
                        containerDragOnly: true
                    }
                }
            });
            this.setState({
                upgradePopupId: popupId
            });
        };
        UnitExperienceComponent.prototype.closePopup = function () {
            this.ref_TODO_popupManager.closePopup(this.state.upgradePopupId);
            this.setState({
                upgradePopupId: undefined
            });
        };
        UnitExperienceComponent.prototype.handleUnitUpgrade = function () {
            if (!this.props.unit.canLevelUp()) {
                this.closePopup();
            }
            else {
                this.ref_TODO_popupManager.forceUpdate();
            }
            this.props.onUnitUpgrade();
        };
        UnitExperienceComponent.prototype.render = function () {
            var _this = this;
            var rows = [];
            var totalBars = Math.ceil(this.props.experienceToNextLevel) / 10;
            var filledBars = Math.ceil(this.props.experienceForCurrentLevel / 10);
            var lastBarWidth = (10 * (this.props.experienceForCurrentLevel % 10));
            for (var i = 0; i < totalBars; i++) {
                var bgProps = {
                    className: "unit-experience-bar-point-background"
                };
                if (i < filledBars) {
                    bgProps.className += " filled";
                    if (i === filledBars - 1 && lastBarWidth !== 0) {
                        bgProps.style =
                            {
                                width: "" + lastBarWidth + "%"
                            };
                    }
                }
                else {
                    bgProps.className += " empty";
                }
                rows.push(React.DOM.div({
                    className: "unit-experience-bar-point",
                    key: "" + i
                }, React.DOM.div(bgProps, null)));
            }
            var isReadyToLevelUp = this.props.experienceForCurrentLevel >= this.props.experienceToNextLevel;
            var containerProps = {
                className: "unit-experience-bar-container"
            };
            var barProps = {
                className: "unit-experience-bar",
                title: "" + this.props.experienceForCurrentLevel + "/" + this.props.experienceToNextLevel + " exp"
            };
            if (isReadyToLevelUp) {
                containerProps.onClick = this.makePopup;
                barProps.className += " ready-to-level-up";
            }
            return (React.DOM.div({
                className: "unit-experience-wrapper"
            }, PopupManager_2.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), React.DOM.div(containerProps, React.DOM.div(barProps, rows), !isReadyToLevelUp ? null : React.DOM.span({
                className: "ready-to-level-up-message"
            }, "Click to level up"))));
        };
        return UnitExperienceComponent;
    }(React.Component));
    exports.UnitExperienceComponent = UnitExperienceComponent;
    var Factory = React.createFactory(UnitExperienceComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/MenuUnitInfo", ["require", "exports", "src/uicomponents/unitlist/unititemwrapper", "src/uicomponents/unitlist/abilitylist", "src/uicomponents/unitlist/unitexperience"], function (require, exports, UnitItemWrapper_1, AbilityList_2, UnitExperience_1) {
    "use strict";
    var MenuUnitInfoComponent = (function (_super) {
        __extends(MenuUnitInfoComponent, _super);
        function MenuUnitInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "MenuUnitInfo";
            this.bindMethods();
        }
        MenuUnitInfoComponent.prototype.bindMethods = function () {
            this.handleUnitUpgrade = this.handleUnitUpgrade.bind(this);
        };
        MenuUnitInfoComponent.prototype.handleUnitUpgrade = function () {
            this.forceUpdate();
        };
        MenuUnitInfoComponent.prototype.render = function () {
            var unit = this.props.unit;
            if (!unit)
                return (React.DOM.div({ className: "menu-unit-info" }));
            var itemSlots = [];
            for (var slot in unit.items) {
                itemSlots.push(UnitItemWrapper_1.default({
                    key: slot,
                    slot: slot,
                    item: unit.items[slot],
                    onMouseUp: this.props.onMouseUp,
                    isDraggable: this.props.isDraggable,
                    onDragStart: this.props.onDragStart,
                    onDragEnd: this.props.onDragEnd,
                    currentDragItem: this.props.currentDragItem
                }));
            }
            var unitAbilities = unit.getAllAbilities();
            unitAbilities = unitAbilities.concat(unit.getAllPassiveSkills());
            return (React.DOM.div({
                className: "menu-unit-info"
            }, React.DOM.div({
                className: "menu-unit-info-name"
            }, unit.name), React.DOM.div({
                className: "menu-unit-info-abilities"
            }, AbilityList_2.default({
                abilities: unitAbilities
            })), UnitExperience_1.default({
                experienceForCurrentLevel: unit.experienceForCurrentLevel,
                experienceToNextLevel: unit.getExperienceToNextLevel(),
                unit: unit,
                onUnitUpgrade: this.handleUnitUpgrade
            }), React.DOM.div({
                className: "menu-unit-info-items-wrapper"
            }, itemSlots)));
        };
        return MenuUnitInfoComponent;
    }(React.Component));
    exports.MenuUnitInfoComponent = MenuUnitInfoComponent;
    var Factory = React.createFactory(MenuUnitInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/BattleBackground", ["require", "exports"], function (require, exports) {
    "use strict";
    var BattleBackgroundComponent = (function (_super) {
        __extends(BattleBackgroundComponent, _super);
        function BattleBackgroundComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleBackground";
            this.bindMethods();
        }
        BattleBackgroundComponent.prototype.bindMethods = function () {
            this.handleResize = this.handleResize.bind(this);
        };
        BattleBackgroundComponent.prototype.handleResize = function () {
            var blurArea = this.props.getBlurArea();
            this.props.renderer.blurProps =
                [
                    blurArea.left,
                    blurArea.top,
                    blurArea.width,
                    blurArea.height,
                    this.props.backgroundSeed
                ];
        };
        BattleBackgroundComponent.prototype.componentDidMount = function () {
            this.props.renderer.isBattleBackground = true;
            this.props.renderer.bindRendererView(ReactDOM.findDOMNode(this.ref_TODO_pixiContainer));
            window.addEventListener("resize", this.handleResize, false);
        };
        BattleBackgroundComponent.prototype.componentWillUnmount = function () {
            window.removeEventListener("resize", this.handleResize);
            this.props.renderer.removeRendererView();
        };
        BattleBackgroundComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "battle-pixi-container",
                ref: function (component) {
                    _this.ref_TODO_pixiContainer = component;
                }
            }, this.props.children));
        };
        return BattleBackgroundComponent;
    }(React.Component));
    exports.BattleBackgroundComponent = BattleBackgroundComponent;
    var Factory = React.createFactory(BattleBackgroundComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/List", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_19) {
    "use strict";
    var ListComponent = (function (_super) {
        __extends(ListComponent, _super);
        function ListComponent(props) {
            _super.call(this, props);
            this.sortedItems = [];
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        ListComponent.prototype.bindMethods = function () {
            this.getNewSortingOrder = this.getNewSortingOrder.bind(this);
            this.handleScroll = this.handleScroll.bind(this);
            this.makeInitialSortingOrder = this.makeInitialSortingOrder.bind(this);
            this.shiftSelection = this.shiftSelection.bind(this);
            this.handleSelectRow = this.handleSelectRow.bind(this);
            this.setDesiredHeight = this.setDesiredHeight.bind(this);
            this.handleSelectColumn = this.handleSelectColumn.bind(this);
            this.sort = this.sort.bind(this);
        };
        ListComponent.prototype.getInitialStateTODO = function () {
            var initialColumn = this.props.initialSortOrder ?
                this.props.initialSortOrder[0] :
                this.props.initialColumns[0];
            return ({
                columns: this.props.initialColumns,
                selected: null,
                selectedColumn: initialColumn,
                sortingOrder: this.makeInitialSortingOrder(this.props.initialColumns, initialColumn)
            });
        };
        ListComponent.prototype.componentDidMount = function () {
            var self = this;
            window.addEventListener("resize", this.setDesiredHeight, false);
            eventManager_19.default.addEventListener("popupResized", this.setDesiredHeight);
            if (this.props.keyboardSelect) {
                ReactDOM.findDOMNode(this).addEventListener("keydown", function (event) {
                    switch (event.keyCode) {
                        case 40:
                            {
                                self.shiftSelection(1);
                                break;
                            }
                        case 38:
                            {
                                self.shiftSelection(-1);
                                break;
                            }
                        default:
                            {
                                return;
                            }
                    }
                });
            }
            if (this.props.initialSelected) {
                this.handleSelectRow(this.props.initialSelected);
            }
            else if (this.props.autoSelect) {
                this.handleSelectRow(this.sortedItems[0]);
                ReactDOM.findDOMNode(this).focus();
            }
            else {
                this.setState({ selected: this.sortedItems[0] });
            }
        };
        ListComponent.prototype.componentWillUnmount = function () {
            window.removeEventListener("resize", this.setDesiredHeight);
            eventManager_19.default.removeEventListener("popupResized", this.setDesiredHeight);
        };
        ListComponent.prototype.componentDidUpdate = function () {
            this.setDesiredHeight();
        };
        ListComponent.prototype.setDesiredHeight = function () {
            var ownNode = ReactDOM.findDOMNode(this);
            var innerNode = ReactDOM.findDOMNode(this.ref_TODO_inner);
            ownNode.style.height = "auto";
            innerNode.style.height = "auto";
            var parentHeight = ownNode.parentElement.getBoundingClientRect().height;
            var ownRect = ownNode.getBoundingClientRect();
            var ownHeight = ownRect.height;
            var strippedOwnHeight = parseInt(getComputedStyle(ownNode).height);
            var extraHeight = ownHeight - strippedOwnHeight;
            var desiredHeight = parentHeight - extraHeight;
            var maxHeight = window.innerHeight - ownRect.top - extraHeight;
            desiredHeight = Math.min(desiredHeight, maxHeight);
            ownNode.style.height = "" + desiredHeight + "px";
            innerNode.style.height = "" + desiredHeight + "px";
        };
        ListComponent.prototype.handleScroll = function (e) {
            var target = e.target;
            var header = ReactDOM.findDOMNode(this.ref_TODO_header);
            var titles = header.getElementsByClassName("fixed-table-th-inner");
            var marginString = "-" + target.scrollLeft + "px";
            for (var i = 0; i < titles.length; i++) {
                titles[i].style.marginLeft = marginString;
            }
        };
        ListComponent.prototype.makeInitialSortingOrder = function (columns, initialColumn) {
            var initialSortOrder = this.props.initialSortOrder;
            if (!initialSortOrder || initialSortOrder.length < 1) {
                initialSortOrder = [initialColumn];
            }
            var order = initialSortOrder;
            for (var i = 0; i < columns.length; i++) {
                if (!columns[i].order) {
                    columns[i].order = columns[i].defaultOrder;
                }
                if (initialSortOrder.indexOf(columns[i]) < 0) {
                    order.push(columns[i]);
                }
            }
            return order;
        };
        ListComponent.prototype.getNewSortingOrder = function (newColumn) {
            var order = this.state.sortingOrder.slice(0);
            var current = order.indexOf(newColumn);
            if (current >= 0) {
                order.splice(current);
            }
            order.unshift(newColumn);
            return order;
        };
        ListComponent.prototype.handleSelectColumn = function (column) {
            if (column.notSortable)
                return;
            function getReverseOrder(order) {
                return order === "desc" ? "asc" : "desc";
            }
            if (this.state.selectedColumn.key === column.key) {
                column.order = getReverseOrder(column.order);
                this.forceUpdate();
            }
            else {
                column.order = column.defaultOrder;
                this.setState({
                    selectedColumn: column,
                    sortingOrder: this.getNewSortingOrder(column)
                });
            }
        };
        ListComponent.prototype.handleSelectRow = function (row) {
            if (this.props.onRowChange && row)
                this.props.onRowChange.call(null, row);
            this.setState({
                selected: row
            });
        };
        ListComponent.prototype.sort = function () {
            var itemsToSort = this.props.listItems;
            var columnsToTry = this.state.columns;
            var sortOrder = this.state.sortingOrder;
            var sortFunctions = {};
            function makeSortingFunction(column) {
                if (column.sortingFunction)
                    return column.sortingFunction;
                var propToSortBy = column.propToSortBy || column.key;
                return (function (a, b) {
                    var a1 = a.data[propToSortBy];
                    var b1 = b.data[propToSortBy];
                    if (a1 > b1)
                        return 1;
                    else if (a1 < b1)
                        return -1;
                    else
                        return 0;
                });
            }
            itemsToSort.sort(function (a, b) {
                var result = 0;
                for (var i = 0; i < sortOrder.length; i++) {
                    var columnToSortBy = sortOrder[i];
                    if (!sortFunctions[columnToSortBy.key]) {
                        sortFunctions[columnToSortBy.key] = makeSortingFunction(columnToSortBy);
                    }
                    var sortFunction = sortFunctions[columnToSortBy.key];
                    result = sortFunction(a, b);
                    if (columnToSortBy.order === "desc") {
                        result *= -1;
                    }
                    if (result)
                        return result;
                }
                return 0;
            });
            this.sortedItems = itemsToSort;
        };
        ListComponent.prototype.shiftSelection = function (amountToShift) {
            var reverseIndexes = {};
            for (var i = 0; i < this.sortedItems.length; i++) {
                reverseIndexes[this.sortedItems[i].key] = i;
            }
            ;
            var currSelectedIndex = reverseIndexes[this.state.selected.key];
            var nextIndex = (currSelectedIndex + amountToShift) % this.sortedItems.length;
            if (nextIndex < 0) {
                nextIndex += this.sortedItems.length;
            }
            this.handleSelectRow(this.sortedItems[nextIndex]);
        };
        ListComponent.prototype.render = function () {
            var _this = this;
            var self = this;
            var columns = [];
            var headerLabels = [];
            this.state.columns.forEach(function (column) {
                var colProps = {
                    key: column.key
                };
                if (self.props.colStylingFN) {
                    colProps = self.props.colStylingFN(column, colProps);
                }
                columns.push(React.DOM.col(colProps));
                var sortStatus = "";
                if (!column.notSortable)
                    sortStatus = " sortable";
                if (self.state.selectedColumn.key === column.key) {
                    sortStatus += " sorted-" + column.order;
                }
                else if (!column.notSortable)
                    sortStatus += " unsorted";
                headerLabels.push(React.DOM.th({
                    key: column.key
                }, React.DOM.div({
                    className: "fixed-table-th-inner"
                }, React.DOM.div({
                    className: "fixed-table-th-content" + sortStatus,
                    title: column.title || colProps.title || null,
                    onMouseDown: self.handleSelectColumn.bind(null, column),
                    onTouchStart: self.handleSelectColumn.bind(null, column),
                }, column.label))));
            });
            this.sort();
            var sortedItems = this.sortedItems;
            var rows = [];
            sortedItems.forEach(function (item, i) {
                item.data.key = item.key;
                item.data.activeColumns = self.state.columns;
                item.data.handleClick = self.handleSelectRow.bind(null, item);
                var row = item.data.rowConstructor(item.data);
                rows.push(row);
                if (self.props.addSpacer && i < sortedItems.length - 1) {
                    rows.push(React.DOM.tr({
                        className: "list-spacer",
                        key: "spacer" + i
                    }, React.DOM.td({
                        colSpan: 20
                    }, null)));
                }
            });
            return (React.DOM.div({
                className: "fixed-table-container" + (this.props.noHeader ? " no-header" : ""),
                tabIndex: isFinite(this.props.tabIndex) ? this.props.tabIndex : 1
            }, React.DOM.div({ className: "fixed-table-header-background" }), React.DOM.div({
                className: "fixed-table-container-inner",
                ref: function (component) {
                    _this.ref_TODO_inner = component;
                },
                onScroll: this.handleScroll
            }, React.DOM.table({
                className: "react-list"
            }, React.DOM.colgroup(null, columns), React.DOM.thead({ className: "fixed-table-actual-header", ref: function (component) {
                    _this.ref_TODO_header = component;
                } }, React.DOM.tr(null, headerLabels)), React.DOM.thead({ className: "fixed-table-hidden-header" }, React.DOM.tr(null, headerLabels)), React.DOM.tbody(null, rows)))));
        };
        return ListComponent;
    }(React.Component));
    exports.ListComponent = ListComponent;
    var Factory = React.createFactory(ListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/ItemListItem", ["require", "exports", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, DragPositioner_4, applyMixins_4) {
    "use strict";
    var ItemListItemComponent = (function (_super) {
        __extends(ItemListItemComponent, _super);
        function ItemListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "ItemListItem";
            this.bindMethods();
            if (this.props.isDraggable) {
                this.dragPositioner = new DragPositioner_4.default(this, this.props.dragPositionerProps);
                this.dragPositioner.onDragStart = this.onDragStart;
                this.dragPositioner.onDragEnd = this.onDragEnd;
                this.dragPositioner.makeDragClone = this.makeDragClone;
                applyMixins_4.default(this, this.dragPositioner);
            }
        }
        ItemListItemComponent.prototype.bindMethods = function () {
            this.makeCell = this.makeCell.bind(this);
            this.onDragEnd = this.onDragEnd.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
            this.makeDragClone = this.makeDragClone.bind(this);
        };
        ItemListItemComponent.prototype.onDragStart = function () {
            console.log("onDragStart", this.props.item.template.displayName);
            this.props.onDragStart(this.props.item);
        };
        ItemListItemComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        ItemListItemComponent.prototype.makeCell = function (type) {
            var cellProps = {};
            cellProps.key = type;
            cellProps.className = "item-list-item-cell" + " item-list-" + type;
            var cellContent;
            switch (type) {
                case "abilityName":
                    {
                        if (this.props.ability) {
                            cellProps.title = this.props.ability.description;
                            if (this.props.abilityIsPassive) {
                                cellProps.className += " passive-skill";
                            }
                        }
                    }
                default:
                    {
                        cellContent = this.props[type];
                        if (isFinite(cellContent)) {
                            cellProps.className += " center-text";
                        }
                        break;
                    }
            }
            return (React.DOM.td(cellProps, cellContent));
        };
        ItemListItemComponent.prototype.makeDragClone = function () {
            var clone = new Image();
            clone.src = this.props.item.template.icon;
            clone.className = "item-icon-base draggable dragging";
            return clone;
        };
        ItemListItemComponent.prototype.render = function () {
            var item = this.props.item;
            var columns = this.props.activeColumns;
            var cells = [];
            for (var i = 0; i < columns.length; i++) {
                var cell = this.makeCell(columns[i].key);
                cells.push(cell);
            }
            var rowProps = {
                className: "item-list-item",
                onClick: this.props.handleClick,
                key: this.props.keyTODO
            };
            if (this.dragPositioner) {
                rowProps.className += " draggable";
                rowProps.onTouchStart = rowProps.onMouseDown =
                    this.dragPositioner.handleReactDownEvent;
            }
            if (this.props.isSelected) {
                rowProps.className += " selected-item";
            }
            ;
            if (this.props.isReserved) {
                rowProps.className += " reserved-item";
            }
            return (React.DOM.tr(rowProps, cells));
        };
        return ItemListItemComponent;
    }(React.Component));
    exports.ItemListItemComponent = ItemListItemComponent;
    var Factory = React.createFactory(ItemListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/ItemList", ["require", "exports", "src/uicomponents/unitlist/List", "src/uicomponents/unitlist/ItemListItem"], function (require, exports, List_1, ItemListItem_1) {
    "use strict";
    var ItemListComponent = (function (_super) {
        __extends(ItemListComponent, _super);
        function ItemListComponent(props) {
            _super.call(this, props);
            this.displayName = "ItemList";
            this.bindMethods();
        }
        ItemListComponent.prototype.getSlotIndex = function (slot) {
            if (slot === "high") {
                return 2;
            }
            else if (slot === "mid") {
                return 1;
            }
            else
                return 0;
        };
        ItemListComponent.prototype.bindMethods = function () {
            this.getSlotIndex = this.getSlotIndex.bind(this);
        };
        ItemListComponent.prototype.render = function () {
            var rows = [];
            var items = this.props.items;
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                var ability = null;
                var abilityIsPassive = false;
                if (item.template.ability) {
                    ability = item.template.ability;
                }
                else if (item.template.passiveSkill) {
                    ability = item.template.passiveSkill;
                    abilityIsPassive = true;
                }
                var data = {
                    item: item,
                    key: item.id,
                    keyTODO: item.id,
                    id: item.id,
                    typeName: item.template.displayName,
                    slot: item.template.slot,
                    slotIndex: this.getSlotIndex(item.template.slot),
                    unit: item.unit ? item.unit : null,
                    unitName: item.unit ? item.unit.name : "",
                    techLevel: item.template.techLevel,
                    cost: item.template.buildCost,
                    ability: ability,
                    abilityName: ability ? ability.displayName : "",
                    abilityIsPassive: abilityIsPassive,
                    isReserved: Boolean(item.unit),
                    rowConstructor: ItemListItem_1.default,
                    dragPositionerProps: {
                        shouldMakeClone: true,
                        forcedDragOffset: { x: 32, y: 32 },
                    },
                    isDraggable: this.props.isDraggable,
                    onDragStart: this.props.onDragStart,
                    onDragEnd: this.props.onDragEnd
                };
                ["maxActionPoints", "attack", "defence",
                    "intelligence", "speed"].forEach(function (stat) {
                    if (!item.template.attributes)
                        data[stat] = null;
                    else
                        data[stat] = item.template.attributes[stat] || null;
                });
                rows.push({
                    key: item.id,
                    data: data
                });
            }
            var columns;
            if (this.props.isItemPurchaseList) {
                columns =
                    [
                        {
                            label: "Type",
                            key: "typeName",
                            defaultOrder: "asc"
                        },
                        {
                            label: "Slot",
                            key: "slot",
                            propToSortBy: "slotIndex",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Tech",
                            key: "techLevel",
                            defaultOrder: "asc"
                        },
                        {
                            label: "Cost",
                            key: "cost",
                            defaultOrder: "asc"
                        }
                    ];
            }
            else {
                columns =
                    [
                        {
                            label: "Type",
                            key: "typeName",
                            defaultOrder: "asc"
                        },
                        {
                            label: "Slot",
                            key: "slot",
                            propToSortBy: "slotIndex",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Unit",
                            key: "unitName",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Act",
                            key: "maxActionPoints",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Atk",
                            key: "attack",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Def",
                            key: "defence",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Int",
                            key: "intelligence",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Spd",
                            key: "speed",
                            defaultOrder: "desc"
                        },
                        {
                            label: "Ability",
                            key: "abilityName",
                            defaultOrder: "desc"
                        }
                    ];
            }
            return (React.DOM.div({ className: "item-list fixed-table-parent" }, List_1.default({
                listItems: rows,
                initialColumns: columns,
                initialSortOrder: [columns[1], columns[2]],
                onRowChange: this.props.onRowChange,
                tabIndex: 2,
                keyboardSelect: true
            })));
        };
        return ItemListComponent;
    }(React.Component));
    exports.ItemListComponent = ItemListComponent;
    var Factory = React.createFactory(ItemListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitIcon", ["require", "exports"], function (require, exports) {
    "use strict";
    var UnitIconComponent = (function (_super) {
        __extends(UnitIconComponent, _super);
        function UnitIconComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitIcon";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
        }
        UnitIconComponent.prototype.render = function () {
            var containerProps = {
                className: "unit-icon-container"
            };
            var fillerProps = {
                className: "unit-icon-filler"
            };
            if (this.props.isActiveUnit) {
                fillerProps.className += " active-border";
                containerProps.className += " active-border";
            }
            if (this.props.isAnnihilated) {
                containerProps.className += " icon-annihilated-overlay";
            }
            if (this.props.facesLeft) {
                fillerProps.className += " unit-border-right";
                containerProps.className += " unit-border-no-right";
            }
            else {
                fillerProps.className += " unit-border-left";
                containerProps.className += " unit-border-no-left";
            }
            var iconImage = this.props.icon ?
                React.DOM.img({
                    className: "unit-icon",
                    src: this.props.icon
                }) :
                null;
            return (React.DOM.div({ className: "unit-icon-wrapper" }, React.DOM.div(fillerProps), React.DOM.div(containerProps, iconImage), React.DOM.div(fillerProps)));
        };
        return UnitIconComponent;
    }(React.Component));
    exports.UnitIconComponent = UnitIconComponent;
    var Factory = React.createFactory(UnitIconComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/EmptyUnit", ["require", "exports", "src/uicomponents/unit/UnitIcon"], function (require, exports, UnitIcon_1) {
    "use strict";
    var EmptyUnitComponent = (function (_super) {
        __extends(EmptyUnitComponent, _super);
        function EmptyUnitComponent(props) {
            _super.call(this, props);
            this.displayName = "EmptyUnit";
        }
        EmptyUnitComponent.prototype.shouldComponentUpdate = function (newProps) {
            return newProps.facesLeft !== this.props.facesLeft;
        };
        EmptyUnitComponent.prototype.render = function () {
            var wrapperProps = {
                className: "unit empty-unit"
            };
            var containerProps = {
                className: "unit-container",
                key: "container"
            };
            if (this.props.facesLeft) {
                wrapperProps.className += " enemy-unit";
            }
            else {
                wrapperProps.className += " friendly-unit";
            }
            var allElements = [
                React.DOM.div(containerProps, null),
                UnitIcon_1.default({
                    icon: null,
                    facesLeft: this.props.facesLeft,
                    key: "icon"
                })
            ];
            if (this.props.facesLeft) {
                allElements = allElements.reverse();
            }
            return (React.DOM.div(wrapperProps, allElements));
        };
        return EmptyUnitComponent;
    }(React.Component));
    exports.EmptyUnitComponent = EmptyUnitComponent;
    var Factory = React.createFactory(EmptyUnitComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitPortrait", ["require", "exports"], function (require, exports) {
    "use strict";
    var UnitPortraitComponent = (function (_super) {
        __extends(UnitPortraitComponent, _super);
        function UnitPortraitComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitPortrait";
        }
        UnitPortraitComponent.prototype.render = function () {
            var props = {};
            props.className = "unit-portrait " + (this.props.className || "");
            if (this.props.imageSrc) {
                props.style =
                    {
                        backgroundImage: 'url("' + this.props.imageSrc + '")'
                    };
            }
            return (React.DOM.div(props, null));
        };
        return UnitPortraitComponent;
    }(React.Component));
    exports.UnitPortraitComponent = UnitPortraitComponent;
    var Factory = React.createFactory(UnitPortraitComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitStatusEffects", ["require", "exports"], function (require, exports) {
    "use strict";
    var UnitStatusEffectsComponent = (function (_super) {
        __extends(UnitStatusEffectsComponent, _super);
        function UnitStatusEffectsComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitStatusEffects";
        }
        UnitStatusEffectsComponent.prototype.render = function () {
            var statusEffects = [];
            var withItems = this.props.unit.getAttributesWithItems();
            var withEffects = this.props.unit.getAttributesWithEffects();
            for (var attribute in withEffects) {
                if (attribute === "maxActionPoints")
                    continue;
                var ite = withItems[attribute];
                var eff = withEffects[attribute];
                if (ite === eff)
                    continue;
                var polarityString = eff > ite ? "positive" : "negative";
                var polaritySign = eff > ite ? " +" : " ";
                var imageSrc = "img/icons/statusEffect_" + polarityString + "_" + attribute + ".png";
                var titleString = "" + attribute + polaritySign + (eff - ite);
                statusEffects.push(React.DOM.img({
                    className: "status-effect-icon" + " status-effect-icon-" + attribute,
                    src: imageSrc,
                    key: attribute,
                    title: titleString
                }));
            }
            var passiveSkills = [];
            var passiveSkillsByPhase = this.props.unit.getPassiveSkillsByPhase();
            var phasesToCheck = this.props.isBattlePrep ? ["atBattleStart"] : ["beforeAbilityUse", "afterAbilityUse"];
            phasesToCheck.forEach(function (phase) {
                if (passiveSkillsByPhase[phase]) {
                    for (var i = 0; i < passiveSkillsByPhase[phase].length; i++) {
                        var skill = passiveSkillsByPhase[phase][i];
                        if (!skill.isHidden) {
                            passiveSkills.push(skill);
                        }
                    }
                }
            });
            var passiveSkillsElement = null;
            if (passiveSkills.length > 0) {
                var passiveSkillsElementTitle = "";
                for (var i = 0; i < passiveSkills.length; i++) {
                    passiveSkillsElementTitle += passiveSkills[i].displayName + ": " +
                        passiveSkills[i].description + "\n";
                }
                passiveSkillsElement = React.DOM.img({
                    className: "unit-status-effects-passive-skills",
                    src: "img/icons/availableAction.png",
                    title: passiveSkillsElementTitle
                });
            }
            return (React.DOM.div({
                className: "unit-status-effects-container"
            }, passiveSkillsElement, React.DOM.div({
                className: "unit-status-effects-attributes"
            }, statusEffects)));
        };
        return UnitStatusEffectsComponent;
    }(React.Component));
    exports.UnitStatusEffectsComponent = UnitStatusEffectsComponent;
    var Factory = React.createFactory(UnitStatusEffectsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitStatus", ["require", "exports", "src/utility"], function (require, exports, utility_24) {
    "use strict";
    var UnitStatusComponent = (function (_super) {
        __extends(UnitStatusComponent, _super);
        function UnitStatusComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitStatus";
        }
        UnitStatusComponent.prototype.render = function () {
            var statusElement = null;
            if (this.props.guardAmount > 0) {
                var guard = this.props.guardAmount;
                var damageReduction = Math.min(50, guard / 2);
                var guardText = "" + guard + "% chance to protect ";
                guardText += (this.props.guardCoverage === 1 ? "all units." : " units in same row.");
                guardText += "\n" + "This unit takes " + damageReduction + "% reduced damage from physical attacks.";
                statusElement = React.DOM.div({
                    className: "status-container guard-meter-container"
                }, React.DOM.div({
                    className: "guard-meter-value",
                    style: {
                        width: "" + utility_24.clamp(guard, 0, 100) + "%"
                    }
                }), React.DOM.div({
                    className: "status-inner-wrapper"
                }, React.DOM.div({
                    className: "guard-text-container status-inner",
                    title: guardText
                }, React.DOM.div({
                    className: "guard-text status-text"
                }, "Guard"), React.DOM.div({
                    className: "guard-text-value status-text"
                }, "" + guard + "%"))));
            }
            else if (this.props.isPreparing) {
                statusElement = React.DOM.div({
                    className: "status-container preparation-container"
                }, React.DOM.div({
                    className: "status-inner-wrapper"
                }, React.DOM.div({
                    className: "preparation-text-container status-inner",
                    title: "Unit is preparing to use ability"
                }, "Preparing")));
            }
            return (React.DOM.div({ className: "unit-status" }, statusElement));
        };
        return UnitStatusComponent;
    }(React.Component));
    exports.UnitStatusComponent = UnitStatusComponent;
    var Factory = React.createFactory(UnitStatusComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitStrength", ["require", "exports"], function (require, exports) {
    "use strict";
    var UnitStrengthComponent = (function (_super) {
        __extends(UnitStrengthComponent, _super);
        function UnitStrengthComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitStrength";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        UnitStrengthComponent.prototype.bindMethods = function () {
            this.updateDisplayStrength = this.updateDisplayStrength.bind(this);
            this.makeSquadronInfo = this.makeSquadronInfo.bind(this);
            this.animateDisplayedStrength = this.animateDisplayedStrength.bind(this);
            this.makeStrengthText = this.makeStrengthText.bind(this);
            this.makeCapitalInfo = this.makeCapitalInfo.bind(this);
        };
        UnitStrengthComponent.prototype.getInitialStateTODO = function () {
            return ({
                displayedStrength: this.props.currentHealth,
            });
        };
        UnitStrengthComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.animateStrength &&
                newProps.currentHealth !== this.props.currentHealth &&
                (!newProps.maxHealth || newProps.maxHealth === this.props.maxHealth)) {
                var animateDuration = newProps.animateDuration || 0;
                this.animateDisplayedStrength(newProps.currentHealth, animateDuration);
            }
            else {
                this.updateDisplayStrength(newProps.currentHealth);
            }
        };
        UnitStrengthComponent.prototype.componentWillUnmount = function () {
            if (this.activeTween) {
                this.activeTween.stop();
            }
        };
        UnitStrengthComponent.prototype.updateDisplayStrength = function (newAmount) {
            this.setState({
                displayedStrength: newAmount
            });
        };
        UnitStrengthComponent.prototype.animateDisplayedStrength = function (newAmount, time) {
            var self = this;
            var stopped = false;
            var animateTween = function () {
                if (stopped) {
                    cancelAnimationFrame(self.animationFrameHandle);
                    return;
                }
                TWEEN.update();
                self.animationFrameHandle = window.requestAnimationFrame(animateTween);
            };
            var tween = new TWEEN.Tween({
                health: self.state.displayedStrength
            }).to({
                health: newAmount
            }, time).onUpdate(function () {
                self.setState({
                    displayedStrength: this.health
                });
            }).easing(TWEEN.Easing.Sinusoidal.Out);
            tween.onStop(function () {
                stopped = true;
                TWEEN.remove(tween);
            });
            this.activeTween = tween;
            tween.start();
            animateTween();
        };
        UnitStrengthComponent.prototype.makeSquadronInfo = function () {
            return (React.DOM.div({ className: "unit-strength-container" }, this.makeStrengthText()));
        };
        UnitStrengthComponent.prototype.makeCapitalInfo = function () {
            var text = this.makeStrengthText();
            var relativeHealth = this.state.displayedStrength / this.props.maxHealth;
            var bar = React.DOM.div({
                className: "unit-strength-bar"
            }, React.DOM.div({
                className: "unit-strength-bar-value",
                style: {
                    width: "" + relativeHealth * 100 + "%"
                }
            }));
            return (React.DOM.div({ className: "unit-strength-container" }, text, bar));
        };
        UnitStrengthComponent.prototype.makeStrengthText = function () {
            var critThreshhold = 0.3;
            var currentStyle = {
                className: "unit-strength-current"
            };
            var healthRatio = this.state.displayedStrength / this.props.maxHealth;
            if (!this.props.isNotDetected && healthRatio <= critThreshhold) {
                currentStyle.className += " critical";
            }
            else if (!this.props.isNotDetected && this.state.displayedStrength < this.props.maxHealth) {
                currentStyle.className += " wounded";
            }
            var containerProps = {
                className: (this.props.isSquadron ? "unit-strength-amount" :
                    "unit-strength-amount-capital")
            };
            var displayed = this.props.isNotDetected ? "???" : "" + Math.ceil(this.state.displayedStrength);
            var max = this.props.isNotDetected ? "???" : "" + this.props.maxHealth;
            return (React.DOM.div(containerProps, React.DOM.span(currentStyle, displayed), React.DOM.span({ className: "unit-strength-max" }, "/" + max)));
        };
        UnitStrengthComponent.prototype.render = function () {
            if (this.props.isSquadron) {
                return this.makeSquadronInfo();
            }
            else {
                return this.makeCapitalInfo();
            }
        };
        return UnitStrengthComponent;
    }(React.Component));
    exports.UnitStrengthComponent = UnitStrengthComponent;
    var Factory = React.createFactory(UnitStrengthComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitActions", ["require", "exports"], function (require, exports) {
    "use strict";
    var UnitActionsComponent = (function (_super) {
        __extends(UnitActionsComponent, _super);
        function UnitActionsComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitActions";
        }
        UnitActionsComponent.prototype.render = function () {
            var availableSrc = "img/icons/availableAction.png";
            var hoveredSrc = "img/icons/spentAction.png";
            var spentSrc = "img/icons/spentAction.png";
            var icons = [];
            var availableCount = this.props.currentActionPoints - this.props.hoveredActionPointExpenditure;
            for (var i = 0; i < availableCount; i++) {
                icons.push(React.DOM.img({
                    src: availableSrc,
                    className: "unit-action-point available-action-point",
                    key: "available" + i
                }));
            }
            var hoveredCount = Math.min(this.props.hoveredActionPointExpenditure, this.props.currentActionPoints);
            for (var i = 0; i < hoveredCount; i++) {
                icons.push(React.DOM.img({
                    src: hoveredSrc,
                    className: "unit-action-point hovered-action-point",
                    key: "hovered" + i
                }));
            }
            var spentCount = this.props.maxActionPoints - this.props.currentActionPoints;
            for (var i = 0; i < spentCount; i++) {
                icons.push(React.DOM.img({
                    src: spentSrc,
                    className: "unit-action-point spent-action-point",
                    key: "spent" + i
                }));
            }
            return (React.DOM.div({ className: "unit-action-points" }, icons));
        };
        return UnitActionsComponent;
    }(React.Component));
    exports.UnitActionsComponent = UnitActionsComponent;
    var Factory = React.createFactory(UnitActionsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitInfo", ["require", "exports", "src/uicomponents/unit/UnitStatus", "src/uicomponents/unit/UnitStrength", "src/uicomponents/unit/UnitActions"], function (require, exports, UnitStatus_1, UnitStrength_1, UnitActions_1) {
    "use strict";
    var UnitInfoComponent = (function (_super) {
        __extends(UnitInfoComponent, _super);
        function UnitInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitInfo";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
        }
        UnitInfoComponent.prototype.render = function () {
            var battleEndStatus = null;
            if (this.props.isDead) {
                battleEndStatus = React.DOM.div({
                    className: "unit-battle-end-status-container"
                }, React.DOM.div({
                    className: "unit-battle-end-status unit-battle-end-status-dead"
                }, "Destroyed"));
            }
            else if (this.props.isCaptured) {
                battleEndStatus = React.DOM.div({
                    className: "unit-battle-end-status-container"
                }, React.DOM.div({
                    className: "unit-battle-end-status unit-battle-end-status-captured"
                }, "Captured"));
            }
            return (React.DOM.div({ className: "unit-info" }, React.DOM.div({ className: "unit-info-name" }, this.props.name), React.DOM.div({ className: "unit-info-inner" }, UnitStatus_1.default({
                guardAmount: this.props.guardAmount,
                isPreparing: this.props.isPreparing
            }), UnitStrength_1.default({
                maxHealth: this.props.maxHealth,
                currentHealth: this.props.currentHealth,
                isSquadron: this.props.isSquadron,
                animateStrength: true,
                animateDuration: this.props.animateDuration
            }), UnitActions_1.default({
                maxActionPoints: this.props.maxActionPoints,
                currentActionPoints: this.props.currentActionPoints,
                hoveredActionPointExpenditure: this.props.hoveredActionPointExpenditure
            }), battleEndStatus)));
        };
        return UnitInfoComponent;
    }(React.Component));
    exports.UnitInfoComponent = UnitInfoComponent;
    var Factory = React.createFactory(UnitInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/Unit", ["require", "exports", "src/uicomponents/unit/UnitPortrait", "src/uicomponents/unit/UnitStatusEffects", "src/uicomponents/unit/UnitInfo", "src/uicomponents/unit/UnitIcon", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, UnitPortrait_1, UnitStatusEffects_1, UnitInfo_1, UnitIcon_2, DragPositioner_5, applyMixins_5) {
    "use strict";
    var UnitComponent = (function (_super) {
        __extends(UnitComponent, _super);
        function UnitComponent(props) {
            _super.call(this, props);
            this.displayName = "Unit";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.state = this.getInitialStateTODO();
            this.bindMethods();
            if (this.props.isDraggable) {
                this.dragPositioner = new DragPositioner_5.default(this, this.props.dragPositionerProps);
                this.dragPositioner.onDragStart = this.onDragStart;
                this.dragPositioner.onDragEnd = this.onDragEnd;
                applyMixins_5.default(this, this.dragPositioner);
            }
        }
        UnitComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
            this.onDragEnd = this.onDragEnd.bind(this);
            this.handleMouseEnter = this.handleMouseEnter.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
            this.handleMouseLeave = this.handleMouseLeave.bind(this);
        };
        UnitComponent.prototype.getInitialStateTODO = function () {
            return ({});
        };
        UnitComponent.prototype.onDragStart = function () {
            this.props.onDragStart(this.props.unit);
        };
        UnitComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        UnitComponent.prototype.handleClick = function () {
            this.props.onUnitClick(this.props.unit);
        };
        UnitComponent.prototype.handleMouseEnter = function () {
            if (!this.props.handleMouseEnterUnit)
                return;
            if (this.props.unit.currentHealth <= 0)
                return;
            this.props.handleMouseEnterUnit(this.props.unit);
        };
        UnitComponent.prototype.handleMouseLeave = function (e) {
            if (!this.props.handleMouseLeaveUnit)
                return;
            this.props.handleMouseLeaveUnit(e);
        };
        UnitComponent.prototype.render = function () {
            var unit = this.props.unit;
            unit.uiDisplayIsDirty = false;
            var containerProps = {
                className: "unit-container",
                id: "unit-id_" + unit.id,
                key: "container"
            };
            var wrapperProps = {
                className: "unit"
            };
            wrapperProps.onMouseEnter = this.handleMouseEnter;
            wrapperProps.onMouseLeave = this.handleMouseLeave;
            if (this.props.isDraggable) {
                wrapperProps.className += " draggable";
                wrapperProps.onMouseDown = wrapperProps.onTouchStart = this.dragPositioner.handleReactDownEvent;
                if (this.dragPositioner.isDragging) {
                    wrapperProps.style = this.dragPositioner.getStyleAttributes();
                    wrapperProps.className += " dragging";
                }
            }
            if (this.props.onUnitClick) {
                wrapperProps.onClick = this.handleClick;
            }
            if (this.props.facesLeft) {
                wrapperProps.className += " enemy-unit";
            }
            else {
                wrapperProps.className += " friendly-unit";
            }
            var isActiveUnit = (this.props.activeUnit &&
                unit.id === this.props.activeUnit.id);
            if (isActiveUnit) {
                wrapperProps.className += " active-unit";
            }
            var isInPotentialTargetArea = (this.props.targetsInPotentialArea &&
                this.props.targetsInPotentialArea.indexOf(unit) >= 0);
            if (isInPotentialTargetArea) {
                wrapperProps.className += " target-unit";
            }
            if (this.props.hoveredUnit && this.props.hoveredUnit.id === unit.id) {
                wrapperProps.className += " hovered-unit";
            }
            var hoveredActionPointExpenditure = 0;
            if (isActiveUnit && this.props.hoveredAbility) {
                hoveredActionPointExpenditure = this.props.hoveredAbility.actionsUse;
            }
            var infoProps = {
                key: "info",
                name: unit.name,
                guardAmount: unit.battleStats.guardAmount,
                guardCoverage: unit.battleStats.guardCoverage,
                isPreparing: Boolean(unit.battleStats.queuedAction),
                maxHealth: unit.maxHealth,
                currentHealth: unit.currentHealth,
                isSquadron: unit.isSquadron,
                maxActionPoints: unit.attributes.maxActionPoints,
                currentActionPoints: unit.battleStats.currentActionPoints,
                hoveredActionPointExpenditure: hoveredActionPointExpenditure,
                isDead: this.props.isDead,
                isCaptured: this.props.isCaptured,
                animateDuration: unit.sfxDuration
            };
            var containerElements = [
                React.DOM.div({
                    className: "unit-left-container",
                    key: "leftContainer"
                }, UnitPortrait_1.default({
                    imageSrc: (unit.portrait ? unit.portrait.imageSrc : "")
                }), UnitStatusEffects_1.default({
                    unit: unit,
                    isBattlePrep: !this.props.battle
                })),
                UnitInfo_1.default(infoProps),
            ];
            if (this.props.facesLeft) {
                containerElements = containerElements.reverse();
            }
            if (unit.displayFlags.isAnnihilated) {
                containerElements.push(React.DOM.div({ key: "overlay", className: "unit-annihilated-overlay" }, "Unit annihilated"));
            }
            var allElements = [
                React.DOM.div(containerProps, containerElements),
                UnitIcon_2.default({
                    icon: unit.template.icon,
                    facesLeft: this.props.facesLeft,
                    key: "icon",
                    isActiveUnit: isActiveUnit,
                    isAnnihilated: unit.displayFlags.isAnnihilated
                })
            ];
            if (this.props.facesLeft) {
                allElements = allElements.reverse();
            }
            return (React.DOM.div(wrapperProps, allElements));
        };
        return UnitComponent;
    }(React.Component));
    exports.UnitComponent = UnitComponent;
    var Factory = React.createFactory(UnitComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unit/UnitWrapper", ["require", "exports", "src/uicomponents/unit/EmptyUnit", "src/uicomponents/unit/Unit", "src/utility"], function (require, exports, EmptyUnit_1, Unit_3, utility_25) {
    "use strict";
    var UnitWrapperComponent = (function (_super) {
        __extends(UnitWrapperComponent, _super);
        function UnitWrapperComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitWrapper";
            this.bindMethods();
        }
        UnitWrapperComponent.prototype.bindMethods = function () {
            this.handleMouseUp = this.handleMouseUp.bind(this);
        };
        UnitWrapperComponent.prototype.shouldComponentUpdate = function (newProps) {
            if (!this.props.unit && !newProps.unit)
                return false;
            if (newProps.unit && newProps.unit.uiDisplayIsDirty)
                return true;
            var targetedProps = {
                activeUnit: true,
                hoveredUnit: true,
                targetsInPotentialArea: true,
                activeEffectUnits: true
            };
            for (var prop in newProps) {
                if (!targetedProps[prop] && prop !== "position") {
                    if (newProps[prop] !== this.props[prop]) {
                        return true;
                    }
                }
            }
            for (var prop in targetedProps) {
                var unit = newProps.unit;
                var oldValue = this.props[prop];
                var newValue = newProps[prop];
                if (!newValue && !oldValue)
                    continue;
                if (prop === "targetsInPotentialArea" || prop === "activeEffectUnits") {
                    if (!oldValue) {
                        if (newValue.indexOf(unit) >= 0)
                            return true;
                        else {
                            continue;
                        }
                    }
                    if ((oldValue.indexOf(unit) >= 0) !==
                        (newValue.indexOf(unit) >= 0)) {
                        return true;
                    }
                }
                else if (newValue !== oldValue &&
                    (oldValue === unit || newValue === unit)) {
                    return true;
                }
            }
            if (newProps.battle && newProps.battle.ended) {
                return true;
            }
            return false;
        };
        UnitWrapperComponent.prototype.handleMouseUp = function () {
            console.log("unitMouseUp", this.props.position);
            this.props.onMouseUp(this.props.position);
        };
        UnitWrapperComponent.prototype.render = function () {
            var allElements = [];
            var wrapperProps = {
                className: "unit-wrapper drop-target"
            };
            if (this.props.onMouseUp) {
                wrapperProps.onMouseUp = wrapperProps.onTouchEnd = this.handleMouseUp;
            }
            ;
            if (this.props.activeEffectUnits) {
                if (this.props.activeEffectUnits.indexOf(this.props.unit) >= 0) {
                    wrapperProps.className += " active-effect-unit";
                }
            }
            var empty = EmptyUnit_1.default({
                facesLeft: this.props.facesLeft,
                key: "empty"
            });
            allElements.push(empty);
            if (this.props.unit) {
                var clonedProps = utility_25.shallowCopy(this.props);
                var isDead = false;
                if (this.props.battle &&
                    this.props.battle.deadUnits && this.props.battle.deadUnits.length > 0) {
                    if (this.props.battle.deadUnits.indexOf(this.props.unit) >= 0) {
                        clonedProps.isDead = true;
                    }
                }
                var isCaptured = false;
                if (this.props.battle &&
                    this.props.battle.capturedUnits && this.props.battle.capturedUnits.length > 0) {
                    if (this.props.battle.capturedUnits.indexOf(this.props.unit) >= 0) {
                        clonedProps.isCaptured = true;
                    }
                }
                clonedProps.key = "unit";
                var unit = Unit_3.default(clonedProps);
                allElements.push(unit);
            }
            return (React.DOM.div(wrapperProps, allElements));
        };
        return UnitWrapperComponent;
    }(React.Component));
    exports.UnitWrapperComponent = UnitWrapperComponent;
    var Factory = React.createFactory(UnitWrapperComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/FormationRow", ["require", "exports", "src/App", "src/uicomponents/unit/UnitWrapper"], function (require, exports, App_24, UnitWrapper_1) {
    "use strict";
    var FormationRowComponent = (function (_super) {
        __extends(FormationRowComponent, _super);
        function FormationRowComponent(props) {
            _super.call(this, props);
            this.displayName = "FormationRow";
        }
        FormationRowComponent.prototype.render = function () {
            var row = this.props.row;
            var side = this.props.facesLeft ? "side2" : "side1";
            var absoluteRowIndex = side === "side1" ?
                this.props.rowIndexInOwnFormation :
                this.props.rowIndexInOwnFormation + App_24.default.moduleData.ruleSet.battle.rowsPerFormation;
            var units = [];
            for (var i = 0; i < row.length; i++) {
                units.push(UnitWrapper_1.default({
                    key: i,
                    unit: row[i],
                    position: [absoluteRowIndex, i],
                    battle: this.props.battle,
                    facesLeft: this.props.facesLeft,
                    activeUnit: this.props.activeUnit,
                    activeTargets: this.props.activeTargets,
                    hoveredUnit: this.props.hoveredUnit,
                    hoveredAbility: this.props.hoveredAbility,
                    handleMouseLeaveUnit: this.props.handleMouseLeaveUnit,
                    handleMouseEnterUnit: this.props.handleMouseEnterUnit,
                    targetsInPotentialArea: this.props.targetsInPotentialArea,
                    activeEffectUnits: this.props.activeEffectUnits,
                    onMouseUp: this.props.onMouseUp,
                    onUnitClick: this.props.onUnitClick,
                    isDraggable: this.props.isDraggable,
                    onDragStart: this.props.onDragStart,
                    onDragEnd: this.props.onDragEnd,
                }));
            }
            return (React.DOM.div({ className: "battle-formation-row" }, units));
        };
        return FormationRowComponent;
    }(React.Component));
    exports.FormationRowComponent = FormationRowComponent;
    var Factory = React.createFactory(FormationRowComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/Formation", ["require", "exports", "src/uicomponents/battle/FormationRow"], function (require, exports, FormationRow_1) {
    "use strict";
    var FormationComponent = (function (_super) {
        __extends(FormationComponent, _super);
        function FormationComponent(props) {
            _super.call(this, props);
            this.displayName = "Formation";
        }
        FormationComponent.prototype.render = function () {
            var formation = this.props.formation;
            var formationRows = [];
            for (var i = 0; i < formation.length; i++) {
                formationRows.push(FormationRow_1.default({
                    key: i,
                    row: formation[i],
                    rowIndexInOwnFormation: i,
                    battle: this.props.battle,
                    facesLeft: this.props.facesLeft,
                    activeUnit: this.props.activeUnit,
                    hoveredUnit: this.props.hoveredUnit,
                    hoveredAbility: this.props.hoveredAbility,
                    handleMouseEnterUnit: this.props.handleMouseEnterUnit,
                    handleMouseLeaveUnit: this.props.handleMouseLeaveUnit,
                    targetsInPotentialArea: this.props.targetsInPotentialArea,
                    activeEffectUnits: this.props.activeEffectUnits,
                    onMouseUp: this.props.onMouseUp,
                    onUnitClick: this.props.onUnitClick,
                    isDraggable: this.props.isDraggable,
                    onDragStart: this.props.onDragStart,
                    onDragEnd: this.props.onDragEnd
                }));
            }
            return (React.DOM.div({ className: "battle-formation" }, formationRows));
        };
        return FormationComponent;
    }(React.Component));
    exports.FormationComponent = FormationComponent;
    var Factory = React.createFactory(FormationComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/UnitListItem", ["require", "exports", "src/uicomponents/unit/UnitStrength", "src/uicomponents/unit/Unit", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, UnitStrength_2, Unit_4, DragPositioner_6, applyMixins_6) {
    "use strict";
    var UnitListItemComponent = (function (_super) {
        __extends(UnitListItemComponent, _super);
        function UnitListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitListItem";
            this.bindMethods();
            if (this.props.isDraggable) {
                this.dragPositioner = new DragPositioner_6.default(this, this.props.dragPositionerProps);
                this.dragPositioner.onDragStart = this.onDragStart;
                this.dragPositioner.makeDragClone = this.makeDragClone;
                this.dragPositioner.onDragEnd = this.onDragEnd;
                applyMixins_6.default(this, this.dragPositioner);
            }
        }
        UnitListItemComponent.prototype.bindMethods = function () {
            this.handleMouseEnter = this.handleMouseEnter.bind(this);
            this.handleMouseLeave = this.handleMouseLeave.bind(this);
            this.makeCell = this.makeCell.bind(this);
            this.onDragEnd = this.onDragEnd.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
            this.makeDragClone = this.makeDragClone.bind(this);
        };
        UnitListItemComponent.prototype.componentDidMount = function () {
            if (!this.props.isDraggable)
                return;
            var container = document.getElementsByClassName("unit-wrapper")[0];
            this.dragPositioner.forcedDragOffset =
                {
                    x: container.offsetWidth / 2,
                    y: container.offsetHeight / 2
                };
        };
        UnitListItemComponent.prototype.onDragStart = function () {
            this.props.onDragStart(this.props.unit);
        };
        UnitListItemComponent.prototype.makeDragClone = function () {
            var container = document.createElement("div");
            React.render(Unit_4.default({
                unit: this.props.unit,
                facesLeft: true,
            }), container);
            var renderedElement = container.firstChild;
            var wrapperElement = document.getElementsByClassName("unit-wrapper")[0];
            renderedElement.classList.add("draggable", "dragging");
            renderedElement.style.width = "" + wrapperElement.offsetWidth + "px";
            renderedElement.style.height = "" + wrapperElement.offsetHeight + "px";
            this.dragPositioner.forcedDragOffset =
                {
                    x: wrapperElement.offsetWidth / 2,
                    y: wrapperElement.offsetHeight / 2
                };
            return renderedElement;
        };
        UnitListItemComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        UnitListItemComponent.prototype.handleMouseEnter = function () {
            this.props.onMouseEnter(this.props.unit);
        };
        UnitListItemComponent.prototype.handleMouseLeave = function () {
            this.props.onMouseLeave();
        };
        UnitListItemComponent.prototype.makeCell = function (type) {
            var unit = this.props.unit;
            var cellProps = {};
            cellProps.key = type;
            cellProps.className = "unit-list-item-cell" + " unit-list-" + type;
            var cellContent;
            switch (type) {
                case "strength":
                    {
                        cellContent = UnitStrength_2.default({
                            maxHealth: this.props.maxHealth,
                            currentHealth: this.props.currentHealth,
                            isSquadron: true
                        });
                        break;
                    }
                case "attack":
                case "defence":
                case "intelligence":
                case "speed":
                    {
                        cellContent = this.props[type];
                        if (unit.attributes[type] < unit.baseAttributes[type]) {
                            cellProps.className += " lowered-stat";
                        }
                        else if (unit.attributes[type] > unit.baseAttributes[type]) {
                            cellProps.className += " raised-stat";
                        }
                        break;
                    }
                default:
                    {
                        cellContent = this.props[type];
                        break;
                    }
            }
            return (React.DOM.td(cellProps, cellContent));
        };
        UnitListItemComponent.prototype.render = function () {
            var columns = this.props.activeColumns;
            var cells = [];
            for (var i = 0; i < columns.length; i++) {
                var cell = this.makeCell(columns[i].key);
                cells.push(cell);
            }
            var rowProps = {
                className: "unit-list-item",
                onClick: this.props.handleClick
            };
            if (this.props.isDraggable && !this.props.hasNoActionsLeft) {
                rowProps.className += " draggable";
                rowProps.onTouchStart = rowProps.onMouseDown =
                    this.dragPositioner.handleReactDownEvent;
            }
            if (this.props.isSelected) {
                rowProps.className += " selected-unit";
            }
            ;
            if (this.props.isReserved) {
                rowProps.className += " reserved-unit";
            }
            if (this.props.isHovered) {
                rowProps.className += " unit-list-item-hovered";
            }
            if (this.props.hasNoActionsLeft) {
                rowProps.className += " no-actions-left";
            }
            else if (this.props.onMouseEnter) {
                rowProps.onMouseEnter = this.handleMouseEnter;
                rowProps.onMouseLeave = this.handleMouseLeave;
            }
            return (React.DOM.tr(rowProps, cells));
        };
        return UnitListItemComponent;
    }(React.Component));
    exports.UnitListItemComponent = UnitListItemComponent;
    var Factory = React.createFactory(UnitListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/unitlist/UnitList", ["require", "exports", "src/uicomponents/unitlist/List", "src/uicomponents/unitlist/UnitListItem"], function (require, exports, List_2, UnitListItem_1) {
    "use strict";
    var UnitListComponent = (function (_super) {
        __extends(UnitListComponent, _super);
        function UnitListComponent(props) {
            _super.call(this, props);
            this.displayName = "UnitList";
        }
        UnitListComponent.prototype.render = function () {
            var rows = [];
            for (var id in this.props.units) {
                var unit = this.props.units[id];
                var data = {
                    unit: unit,
                    id: unit.id,
                    name: unit.name,
                    typeName: unit.template.displayName,
                    strength: "" + unit.currentHealth + " / " + unit.maxHealth,
                    currentHealth: unit.currentHealth,
                    maxHealth: unit.maxHealth,
                    maxActionPoints: unit.attributes.maxActionPoints,
                    attack: unit.attributes.attack,
                    defence: unit.attributes.defence,
                    intelligence: unit.attributes.intelligence,
                    speed: unit.attributes.speed,
                    rowConstructor: UnitListItem_1.default,
                    shouldMakeClone: true,
                    isReserved: (this.props.reservedUnits && this.props.reservedUnits[unit.id]),
                    hasNoActionsLeft: (this.props.checkTimesActed && !unit.canActThisTurn()),
                    isSelected: (this.props.selectedUnit && this.props.selectedUnit.id === unit.id),
                    isHovered: (this.props.hoveredUnit && this.props.hoveredUnit.id === unit.id),
                    onMouseEnter: this.props.onMouseEnterUnit,
                    onMouseLeave: this.props.onMouseLeave,
                    isDraggable: this.props.isDraggable,
                    onDragStart: this.props.onDragStart,
                    onDragEnd: this.props.onDragEnd
                };
                rows.push({
                    key: unit.id,
                    data: data
                });
            }
            var columns = [
                {
                    label: "Id",
                    key: "id",
                    defaultOrder: "asc"
                },
                {
                    label: "Type",
                    key: "typeName",
                    defaultOrder: "asc"
                },
                {
                    label: "Strength",
                    key: "strength",
                    defaultOrder: "desc",
                    sortingFunction: function (a, b) {
                        return a.data.currentHealth - b.data.currentHealth;
                    }
                },
                {
                    label: "Act",
                    key: "maxActionPoints",
                    defaultOrder: "desc"
                },
                {
                    label: "Atk",
                    key: "attack",
                    defaultOrder: "desc"
                },
                {
                    label: "Def",
                    key: "defence",
                    defaultOrder: "desc"
                },
                {
                    label: "Int",
                    key: "intelligence",
                    defaultOrder: "desc"
                },
                {
                    label: "Spd",
                    key: "speed",
                    defaultOrder: "desc"
                }
            ];
            return (React.DOM.div({ className: "unit-list fixed-table-parent" }, List_2.default({
                listItems: rows,
                initialColumns: columns,
                onRowChange: this.props.onRowChange,
                autoSelect: this.props.autoSelect,
                keyboardSelect: true
            })));
        };
        return UnitListComponent;
    }(React.Component));
    exports.UnitListComponent = UnitListComponent;
    var Factory = React.createFactory(UnitListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/PlayerFlag", ["require", "exports"], function (require, exports) {
    "use strict";
    var PlayerFlagComponent = (function (_super) {
        __extends(PlayerFlagComponent, _super);
        function PlayerFlagComponent(props) {
            _super.call(this, props);
            this.displayName = "PlayerFlag";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.bindMethods();
        }
        PlayerFlagComponent.prototype.bindMethods = function () {
            this.canUseDataURL = this.canUseDataURL.bind(this);
        };
        PlayerFlagComponent.prototype.canUseDataURL = function () {
            var uaString = navigator.userAgent.toLowerCase();
            var isIE = uaString.indexOf("msie") !== -1 || uaString.indexOf("trident/") !== -1;
            return !isIE;
        };
        PlayerFlagComponent.prototype.componentDidMount = function () {
            if (this.ref_TODO_container && !this.props.isMutable) {
                var canvas = this.props.flag.getCanvas(this.props.width, this.props.height, this.props.stretch, false);
                canvas.style.maxWidth = "100%";
                canvas.style.maxHeight = "100%";
                ReactDOM.findDOMNode(this.ref_TODO_container).appendChild(canvas);
            }
        };
        PlayerFlagComponent.prototype.componentDidUpdate = function () {
            if (this.ref_TODO_container && this.props.isMutable) {
                var containerNode = ReactDOM.findDOMNode(this.ref_TODO_container);
                if (containerNode.firstChild) {
                    containerNode.removeChild(containerNode.firstChild);
                }
                var canvas = this.props.flag.getCanvas(this.props.width, this.props.height, this.props.stretch, false);
                canvas.style.maxWidth = "100%";
                canvas.style.maxHeight = "100%";
                containerNode.appendChild(canvas);
            }
        };
        PlayerFlagComponent.prototype.render = function () {
            var _this = this;
            var props = this.props.props;
            if (this.canUseDataURL()) {
                var flag = this.props.flag;
                props.src = flag.getCanvas(this.props.width, this.props.height, this.props.stretch, !this.props.isMutable).toDataURL();
                return (React.DOM.img(props, null));
            }
            else {
                props.ref = function (component) {
                    _this.ref_TODO_container = component;
                };
                return (React.DOM.div(props, null));
            }
        };
        return PlayerFlagComponent;
    }(React.Component));
    exports.PlayerFlagComponent = PlayerFlagComponent;
    var Factory = React.createFactory(PlayerFlagComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/galaxymap/DefenceBuilding", ["require", "exports", "src/App", "src/uicomponents/PlayerFlag", "src/utility"], function (require, exports, App_25, PlayerFlag_1, utility_26) {
    "use strict";
    var DefenceBuildingComponent = (function (_super) {
        __extends(DefenceBuildingComponent, _super);
        function DefenceBuildingComponent(props) {
            _super.call(this, props);
            this.displayName = "DefenceBuilding";
        }
        DefenceBuildingComponent.prototype.shouldComponentUpdate = function (newProps) {
            return newProps.building !== this.props.building;
        };
        DefenceBuildingComponent.prototype.render = function () {
            var building = this.props.building;
            var image = App_25.default.images[building.template.iconSrc];
            return (React.DOM.div({
                className: "defence-building"
            }, React.DOM.img({
                className: "defence-building-icon",
                src: utility_26.colorImageInPlayerColor(image, building.controller),
                title: building.template.displayName
            }), PlayerFlag_1.default({
                props: {
                    className: "defence-building-controller",
                    title: building.controller.name
                },
                key: "flag",
                flag: building.controller.flag
            })));
        };
        return DefenceBuildingComponent;
    }(React.Component));
    exports.DefenceBuildingComponent = DefenceBuildingComponent;
    var Factory = React.createFactory(DefenceBuildingComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/galaxymap/DefenceBuildingList", ["require", "exports", "src/uicomponents/galaxymap/DefenceBuilding"], function (require, exports, DefenceBuilding_1) {
    "use strict";
    var DefenceBuildingListComponent = (function (_super) {
        __extends(DefenceBuildingListComponent, _super);
        function DefenceBuildingListComponent(props) {
            _super.call(this, props);
            this.displayName = "DefenceBuildingList";
        }
        DefenceBuildingListComponent.prototype.shouldComponentUpdate = function (newProps) {
            var newBuildings = newProps.buildings;
            var oldBuildings = this.props.buildings;
            if (newBuildings.length !== oldBuildings.length)
                return true;
            else {
                for (var i = 0; i < newBuildings.length; i++) {
                    if (oldBuildings.indexOf(newBuildings[i]) === -1)
                        return true;
                }
            }
            return false;
        };
        DefenceBuildingListComponent.prototype.render = function () {
            if (!this.props.buildings)
                return null;
            var buildings = [];
            for (var i = 0; i < this.props.buildings.length; i++) {
                buildings.push(DefenceBuilding_1.default({
                    key: this.props.buildings[i].id,
                    building: this.props.buildings[i]
                }));
            }
            if (this.props.reverse) {
                buildings.reverse();
            }
            return (React.DOM.div({
                className: "defence-building-list"
            }, buildings));
        };
        return DefenceBuildingListComponent;
    }(React.Component));
    exports.DefenceBuildingListComponent = DefenceBuildingListComponent;
    var Factory = React.createFactory(DefenceBuildingListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battleprep/BattleInfo", ["require", "exports", "src/uicomponents/PlayerFlag", "src/uicomponents/galaxymap/DefenceBuildingList"], function (require, exports, PlayerFlag_2, DefenceBuildingList_1) {
    "use strict";
    var BattleInfoComponent = (function (_super) {
        __extends(BattleInfoComponent, _super);
        function BattleInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleInfo";
        }
        BattleInfoComponent.prototype.render = function () {
            var battlePrep = this.props.battlePrep;
            var star = battlePrep.battleData.location;
            var isAttacker = battlePrep.humanPlayer === battlePrep.attacker;
            return (React.DOM.div({
                className: "battle-info"
            }, React.DOM.div({
                className: "battle-info-opponent"
            }, PlayerFlag_2.default({
                flag: battlePrep.enemyPlayer.flag,
                props: {
                    className: "battle-info-opponent-icon",
                }
            }), React.DOM.div({
                className: "battle-info-opponent-name"
            }, battlePrep.enemyPlayer.name)), React.DOM.div({
                className: "battle-info-summary"
            }, star.name + ": " + (isAttacker ? "Attacking" : "Defending")), DefenceBuildingList_1.default({
                buildings: star.buildings["defence"],
                reverse: isAttacker
            })));
        };
        return BattleInfoComponent;
    }(React.Component));
    exports.BattleInfoComponent = BattleInfoComponent;
    var Factory = React.createFactory(BattleInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battleprep/BattlePrep", ["require", "exports", "src/App", "src/eventManager", "src/uicomponents/unitlist/MenuUnitInfo", "src/uicomponents/battle/BattleBackground", "src/uicomponents/unitlist/ItemList", "src/uicomponents/battle/Formation", "src/options", "src/BattleSimulator", "src/uicomponents/unitlist/UnitList", "src/uicomponents/battleprep/BattleInfo"], function (require, exports, App_26, eventManager_20, MenuUnitInfo_1, BattleBackground_1, ItemList_1, Formation_1, Options_1, BattleSimulator_2, UnitList_1, BattleInfo_1) {
    "use strict";
    var BattlePrepComponent = (function (_super) {
        __extends(BattlePrepComponent, _super);
        function BattlePrepComponent(props) {
            _super.call(this, props);
            this.displayName = "BattlePrep";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        BattlePrepComponent.prototype.bindMethods = function () {
            this.handleMouseEnterUnit = this.handleMouseEnterUnit.bind(this);
            this.handleDragEnd = this.handleDragEnd.bind(this);
            this.handleItemDragStart = this.handleItemDragStart.bind(this);
            this.setLeftLowerElement = this.setLeftLowerElement.bind(this);
            this.handleItemDragEnd = this.handleItemDragEnd.bind(this);
            this.handleItemDrop = this.handleItemDrop.bind(this);
            this.setSelectedUnit = this.setSelectedUnit.bind(this);
            this.handleMouseLeaveUnit = this.handleMouseLeaveUnit.bind(this);
            this.clearSelectedUnit = this.clearSelectedUnit.bind(this);
            this.autoMakeFormation = this.autoMakeFormation.bind(this);
            this.handleSelectRow = this.handleSelectRow.bind(this);
            this.handleDragStart = this.handleDragStart.bind(this);
            this.handleDrop = this.handleDrop.bind(this);
            this.getBackgroundBlurArea = this.getBackgroundBlurArea.bind(this);
        };
        BattlePrepComponent.prototype.getInitialStateTODO = function () {
            return ({
                currentDragUnit: null,
                hoveredUnit: null,
                selectedUnit: null,
                currentDragItem: null,
                leftLowerElement: "playerFormation"
            });
        };
        BattlePrepComponent.prototype.componentDidMount = function () {
            this.ref_TODO_background.handleResize();
        };
        BattlePrepComponent.prototype.autoMakeFormation = function () {
            var battlePrep = this.props.battlePrep;
            battlePrep.clearPlayerFormation();
            battlePrep.playerFormation = battlePrep.makeAutoFormation(battlePrep.availableUnits, battlePrep.enemyUnits, battlePrep.humanPlayer);
            battlePrep.setupPlayerFormation(battlePrep.playerFormation);
            this.setLeftLowerElement("playerFormation");
            this.forceUpdate();
        };
        BattlePrepComponent.prototype.handleSelectRow = function (row) {
            if (!row.data.unit)
                return;
            this.setSelectedUnit(row.data.unit);
        };
        BattlePrepComponent.prototype.clearSelectedUnit = function () {
            this.setState({
                selectedUnit: null
            });
        };
        BattlePrepComponent.prototype.setSelectedUnit = function (unit) {
            if (unit === this.state.selectedUnit) {
                this.clearSelectedUnit();
                return;
            }
            this.setState({
                selectedUnit: unit,
                hoveredUnit: null
            });
        };
        BattlePrepComponent.prototype.handleMouseEnterUnit = function (unit) {
            this.setState({
                hoveredUnit: unit
            });
        };
        BattlePrepComponent.prototype.handleMouseLeaveUnit = function () {
            this.setState({
                hoveredUnit: null
            });
        };
        BattlePrepComponent.prototype.handleDragStart = function (unit) {
            this.setState({
                currentDragUnit: unit
            });
        };
        BattlePrepComponent.prototype.handleDragEnd = function (dropSuccesful) {
            if (dropSuccesful === void 0) { dropSuccesful = false; }
            if (!dropSuccesful && this.state.currentDragUnit) {
                this.props.battlePrep.removeUnit(this.state.currentDragUnit);
            }
            this.setState({
                currentDragUnit: null,
                hoveredUnit: null
            });
            return dropSuccesful;
        };
        BattlePrepComponent.prototype.handleDrop = function (position) {
            var battlePrep = this.props.battlePrep;
            if (this.state.currentDragUnit) {
                var unitCurrentlyInPosition = battlePrep.getUnitAtPosition(position);
                if (unitCurrentlyInPosition) {
                    battlePrep.swapUnits(this.state.currentDragUnit, unitCurrentlyInPosition);
                }
                else {
                    battlePrep.setUnit(this.state.currentDragUnit, position);
                }
            }
            this.handleDragEnd(true);
        };
        BattlePrepComponent.prototype.handleItemDragStart = function (item) {
            this.setState({
                currentDragItem: item
            });
        };
        BattlePrepComponent.prototype.setLeftLowerElement = function (newElement) {
            var oldElement = this.state.leftLowerElement;
            var newState = {
                leftLowerElement: newElement
            };
            if (oldElement === "enemyFormation" || newElement === "enemyFormation") {
                newState.selectedUnit = null;
            }
            this.setState(newState);
        };
        BattlePrepComponent.prototype.handleItemDragEnd = function (dropSuccesful) {
            if (dropSuccesful === void 0) { dropSuccesful = false; }
            if (!dropSuccesful && this.state.currentDragItem && this.state.selectedUnit) {
                var item = this.state.currentDragItem;
                if (this.state.selectedUnit.items[item.template.slot] === item) {
                    this.state.selectedUnit.removeItem(item);
                }
            }
            this.setState({
                currentDragItem: null
            });
        };
        BattlePrepComponent.prototype.handleItemDrop = function () {
            var item = this.state.currentDragItem;
            var unit = this.state.selectedUnit;
            if (unit && item) {
                if (unit.items[item.template.slot]) {
                    unit.removeItemAtSlot(item.template.slot);
                }
                unit.addItem(item);
            }
            this.handleItemDragEnd(true);
        };
        BattlePrepComponent.prototype.getBackgroundBlurArea = function () {
            return ReactDOM.findDOMNode(this.ref_TODO_upper).getBoundingClientRect();
        };
        BattlePrepComponent.prototype.render = function () {
            var _this = this;
            var battlePrep = this.props.battlePrep;
            var player = battlePrep.humanPlayer;
            var location = battlePrep.battleData.location;
            var leftUpperElement;
            var hoveredUnit = this.state.currentDragUnit || this.state.hoveredUnit;
            if (hoveredUnit) {
                leftUpperElement = MenuUnitInfo_1.default({
                    unit: hoveredUnit
                });
            }
            else if (this.state.selectedUnit) {
                var selectedUnitIsFriendly = battlePrep.availableUnits.indexOf(this.state.selectedUnit) !== -1;
                leftUpperElement = MenuUnitInfo_1.default({
                    unit: this.state.selectedUnit,
                    onMouseUp: this.handleItemDrop,
                    isDraggable: selectedUnitIsFriendly,
                    onDragStart: this.handleItemDragStart,
                    onDragEnd: this.handleItemDragEnd,
                    currentDragItem: this.state.currentDragItem
                });
            }
            else {
                leftUpperElement = BattleInfo_1.default({
                    battlePrep: battlePrep
                });
            }
            var leftLowerElement;
            switch (this.state.leftLowerElement) {
                case "playerFormation":
                    {
                        leftLowerElement = Formation_1.default({
                            key: "playerFormation",
                            formation: battlePrep.playerFormation.slice(0),
                            facesLeft: false,
                            hoveredUnit: this.state.hoveredUnit,
                            activeUnit: this.state.selectedUnit,
                            onMouseUp: this.handleDrop,
                            onUnitClick: this.setSelectedUnit,
                            isDraggable: true,
                            onDragStart: this.handleDragStart,
                            onDragEnd: this.handleDragEnd,
                            handleMouseEnterUnit: this.handleMouseEnterUnit,
                            handleMouseLeaveUnit: this.handleMouseLeaveUnit
                        });
                        break;
                    }
                case "enemyFormation":
                    {
                        leftLowerElement = Formation_1.default({
                            key: "enemyFormation",
                            formation: battlePrep.enemyFormation,
                            facesLeft: true,
                            hoveredUnit: this.state.hoveredUnit,
                            activeUnit: this.state.selectedUnit,
                            onUnitClick: this.setSelectedUnit,
                            isDraggable: false,
                            handleMouseEnterUnit: this.handleMouseEnterUnit,
                            handleMouseLeaveUnit: this.handleMouseLeaveUnit
                        });
                        break;
                    }
                case "itemEquip":
                    {
                        leftLowerElement = ItemList_1.default({
                            key: "itemEquip",
                            items: player.items,
                            isDraggable: true,
                            onDragStart: this.handleItemDragStart,
                            onDragEnd: this.handleItemDragEnd,
                            onRowChange: this.handleSelectRow
                        });
                        break;
                    }
            }
            ;
            var playerIsDefending = player === battlePrep.defender;
            var humanFormationIsValid = battlePrep.humanFormationIsValid();
            var canScout = player.starIsDetected(battlePrep.battleData.location);
            return (React.DOM.div({ className: "battle-prep" }, React.DOM.div({ className: "battle-prep-left" }, React.DOM.div({ className: "battle-prep-left-upper-wrapper", ref: function (component) {
                    _this.ref_TODO_upper = component;
                } }, BattleBackground_1.default({
                ref: function (component) {
                    _this.ref_TODO_background = component;
                },
                renderer: this.props.renderer,
                getBlurArea: this.getBackgroundBlurArea,
                backgroundSeed: battlePrep.battleData.location.getSeed()
            }, React.DOM.div({ className: "battle-prep-left-upper-inner" }, leftUpperElement))), React.DOM.div({ className: "battle-prep-left-controls" }, React.DOM.button({
                className: "battle-prep-controls-button",
                onClick: this.setLeftLowerElement.bind(this, "itemEquip"),
                disabled: this.state.leftLowerElement === "itemEquip"
            }, "Equip"), React.DOM.button({
                className: "battle-prep-controls-button",
                onClick: this.setLeftLowerElement.bind(this, "playerFormation"),
                disabled: this.state.leftLowerElement === "playerFormation"
            }, "Own"), React.DOM.button({
                className: "battle-prep-controls-button",
                onClick: this.setLeftLowerElement.bind(this, "enemyFormation"),
                disabled: this.state.leftLowerElement === "enemyFormation" || !canScout,
                title: canScout ? null : "Can't inspect enemy formation" +
                    " as star is not in detection radius"
            }, "Enemy"), React.DOM.button({
                onClick: this.autoMakeFormation
            }, "Auto formation"), React.DOM.button({
                onClick: function () {
                    App_26.default.reactUI.switchScene("galaxyMap");
                },
                disabled: playerIsDefending
            }, "Cancel"), React.DOM.button({
                className: "battle-prep-controls-button",
                disabled: !humanFormationIsValid,
                onClick: function () {
                    var battle = battlePrep.makeBattle();
                    App_26.default.reactUI.battle = battle;
                    App_26.default.reactUI.switchScene("battle");
                }.bind(this)
            }, "Start battle"), !Options_1.default.debugMode ? null : React.DOM.button({
                className: "battle-prep-controls-button",
                onClick: function () {
                    var battle = battlePrep.makeBattle();
                    var simulator = new BattleSimulator_2.default(battle);
                    simulator.simulateBattle();
                    simulator.finishBattle();
                    eventManager_20.default.dispatchEvent("setCameraToCenterOn", battle.battleData.location);
                    eventManager_20.default.dispatchEvent("switchScene", "galaxyMap");
                }.bind(this)
            }, "Simulate battle")), React.DOM.div({ className: "battle-prep-left-lower" }, leftLowerElement)), UnitList_1.default({
                units: battlePrep.availableUnits,
                selectedUnit: this.state.selectedUnit,
                reservedUnits: battlePrep.alreadyPlaced,
                hoveredUnit: this.state.hoveredUnit,
                checkTimesActed: true,
                isDraggable: this.state.leftLowerElement === "playerFormation",
                onDragStart: this.handleDragStart,
                onDragEnd: this.handleDragEnd,
                onRowChange: this.handleSelectRow,
                onMouseEnterUnit: this.handleMouseEnterUnit,
                onMouseLeave: this.handleMouseLeaveUnit
            })));
        };
        return BattlePrepComponent;
    }(React.Component));
    exports.BattlePrepComponent = BattlePrepComponent;
    var Factory = React.createFactory(BattlePrepComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/BattleSceneUnit", ["require", "exports", "src/options"], function (require, exports, options_5) {
    "use strict";
    var BattleSceneUnit = (function () {
        function BattleSceneUnit(container, renderer) {
            this.unitState = 3;
            this.hasSFXSprite = false;
            this.container = container;
            this.renderer = renderer;
            this.initLayers();
        }
        BattleSceneUnit.prototype.destroy = function () {
        };
        BattleSceneUnit.prototype.initLayers = function () {
            this.spriteContainer = new PIXI.Container;
            this.container.addChild(this.spriteContainer);
        };
        BattleSceneUnit.prototype.changeActiveUnit = function (unit, afterChangedCallback) {
            if (this.hasSFXSprite) {
                if (unit) {
                    this.enterUnitSpriteWithoutAnimation(unit);
                }
                else {
                    this.exitUnitSpriteWithoutAnimation();
                }
                this.hasSFXSprite = false;
            }
            else if (!unit && this.activeUnit) {
                this.onFinishExit = afterChangedCallback;
                this.exitUnitSprite();
            }
            else if (unit && unit !== this.activeUnit) {
                this.onFinishEnter = afterChangedCallback;
                this.enterUnitSprite(unit);
            }
            else if (afterChangedCallback) {
                afterChangedCallback();
            }
        };
        BattleSceneUnit.prototype.setSFX = function (SFXTemplate, user, target) {
            if (this.activeUnit) {
                var duration = SFXTemplate.duration * options_5.default.battleAnimationTiming.effectDuration;
                if (this.activeUnit === user && SFXTemplate.userSprite) {
                    this.setSFXSprite(SFXTemplate.userSprite, duration);
                }
                else if (this.activeUnit === target && SFXTemplate.enemySprite) {
                    this.setSFXSprite(SFXTemplate.enemySprite, duration);
                }
                else {
                }
            }
            else {
            }
        };
        BattleSceneUnit.prototype.resize = function () {
            if (this.spriteContainer.children.length > 0) {
                this.setContainerPosition();
            }
        };
        BattleSceneUnit.prototype.enterUnitSpriteWithoutAnimation = function (unit) {
            this.setUnit(unit);
            this.setUnitSprite(unit);
            this.finishUnitSpriteEnter();
        };
        BattleSceneUnit.prototype.exitUnitSpriteWithoutAnimation = function () {
            this.finishUnitSpriteExit();
        };
        BattleSceneUnit.prototype.enterUnitSprite = function (unit) {
            if (this.unitState === 1) {
                this.onFinishExit = this.startUnitSpriteEnter.bind(this, unit);
                this.exitUnitSprite();
            }
            else if (this.unitState === 2) {
                this.onFinishExit = this.startUnitSpriteEnter.bind(this, unit);
            }
            else {
                this.clearUnit();
                this.clearUnitSprite();
                this.startUnitSpriteEnter(unit);
            }
        };
        BattleSceneUnit.prototype.exitUnitSprite = function () {
            if (this.unitState === 0) {
                this.finishUnitSpriteExit();
            }
            else if (this.unitState === 1) {
                this.startUnitSpriteExit();
            }
            else if (this.unitState === 2) {
                this.onFinishExit = null;
            }
            else {
                console.warn("called exitUnitSprite with unintended animation state " + this.unitState);
            }
        };
        BattleSceneUnit.prototype.startUnitSpriteEnter = function (unit) {
            var enterAnimationDuration = options_5.default.battleAnimationTiming.unitEnter;
            if (enterAnimationDuration <= 0) {
                this.enterUnitSpriteWithoutAnimation(unit);
                return;
            }
            this.setUnit(unit);
            this.setUnitSprite(unit);
            this.unitState = 0;
            this.tween = this.makeEnterExitTween("enter", enterAnimationDuration, this.finishUnitSpriteEnter.bind(this));
            this.tween.start();
        };
        BattleSceneUnit.prototype.finishUnitSpriteEnter = function () {
            this.unitState = 1;
            this.clearTween();
            if (this.onFinishEnter) {
                this.onFinishEnter();
                this.onFinishEnter = null;
            }
        };
        BattleSceneUnit.prototype.startUnitSpriteExit = function () {
            var exitAnimationDuration = options_5.default.battleAnimationTiming.unitExit;
            if (exitAnimationDuration <= 0) {
                this.exitUnitSpriteWithoutAnimation();
                return;
            }
            this.unitState = 2;
            this.tween = this.makeEnterExitTween("exit", exitAnimationDuration, this.finishUnitSpriteExit.bind(this));
            this.tween.start();
        };
        BattleSceneUnit.prototype.finishUnitSpriteExit = function () {
            this.clearUnit();
            this.clearUnitSprite();
            if (this.onFinishExit) {
                this.onFinishExit();
                this.onFinishExit = null;
            }
        };
        BattleSceneUnit.prototype.getSFXParams = function (props) {
            var bounds = this.getSceneBounds();
            return ({
                user: props.unit,
                width: bounds.width,
                height: bounds.height,
                duration: props.duration,
                facingRight: props.unit.battleStats.side === "side1",
                renderer: this.renderer,
                triggerStart: props.triggerStart,
                triggerEnd: props.triggerEnd
            });
        };
        BattleSceneUnit.prototype.setContainerPosition = function (positionOffScreen) {
            if (positionOffScreen === void 0) { positionOffScreen = false; }
            var sceneBounds = this.getSceneBounds();
            var shouldReverse = this.activeUnit.battleStats.side === "side1";
            var container = this.spriteContainer;
            var containerBounds = container.getLocalBounds();
            var xPadding = 30;
            var yPadding = 40;
            container.y = Math.round(sceneBounds.height - containerBounds.height - containerBounds.y - yPadding);
            if (shouldReverse) {
                container.scale.x = -1;
                container.x = Math.round(containerBounds.width + containerBounds.x + xPadding);
            }
            else {
                container.x = Math.round(sceneBounds.width - containerBounds.width - containerBounds.x - xPadding);
            }
        };
        BattleSceneUnit.prototype.setUnit = function (unit) {
            this.clearUnit();
            this.activeUnit = unit;
        };
        BattleSceneUnit.prototype.clearUnit = function () {
            this.unitState = 3;
            this.activeUnit = null;
            this.clearTween();
        };
        BattleSceneUnit.prototype.makeUnitSprite = function (unit, SFXParams) {
            return unit.drawBattleScene(SFXParams);
        };
        BattleSceneUnit.prototype.addUnitSprite = function (sprite) {
            this.spriteContainer.addChild(sprite);
            this.setContainerPosition();
        };
        BattleSceneUnit.prototype.clearUnitSprite = function () {
            this.spriteContainer.removeChildren();
        };
        BattleSceneUnit.prototype.setUnitSprite = function (unit) {
            this.clearUnitSprite();
            var SFXParams = this.getSFXParams({
                unit: unit,
                triggerStart: this.addUnitSprite.bind(this)
            });
            this.makeUnitSprite(unit, SFXParams);
        };
        BattleSceneUnit.prototype.clearTween = function () {
            if (this.tween) {
                this.tween.stop();
                TWEEN.remove(this.tween);
                this.tween = null;
            }
        };
        BattleSceneUnit.prototype.makeEnterExitTween = function (direction, duration, onComplete) {
            var side = this.activeUnit.battleStats.side;
            var container = this.spriteContainer;
            var bounds = container.getBounds();
            var distanceToMove = bounds.width * 1.25;
            if (side === "side2") {
                distanceToMove *= -1;
            }
            var offscreenLocation = container.x - distanceToMove;
            var stationaryLocation = container.x;
            var startX = direction === "enter" ? offscreenLocation : stationaryLocation;
            var finishX = direction === "enter" ? stationaryLocation : offscreenLocation;
            container.x = startX;
            var tween = new TWEEN.Tween({
                x: startX
            }).to({
                x: finishX
            }, duration).onStart(function () {
                container.x = startX;
            }).onUpdate(function () {
                container.x = this.x;
            }).onComplete(onComplete);
            tween.start();
            return tween;
        };
        BattleSceneUnit.prototype.setSFXSprite = function (spriteDrawingFN, duration) {
            this.clearUnitSprite();
            var SFXParams = this.getSFXParams({
                unit: this.activeUnit,
                duration: duration,
                triggerStart: this.addUnitSprite.bind(this)
            });
            this.hasSFXSprite = true;
            spriteDrawingFN(SFXParams);
        };
        return BattleSceneUnit;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BattleSceneUnit;
});
define("src/BattleSceneUnitOverlay", ["require", "exports", "src/options"], function (require, exports, options_6) {
    "use strict";
    var BattleSceneUnitOverlay = (function () {
        function BattleSceneUnitOverlay(container, renderer) {
            this.animationIsActive = false;
            this.container = container;
            this.renderer = renderer;
            this.initLayers();
        }
        BattleSceneUnitOverlay.prototype.destroy = function () {
        };
        BattleSceneUnitOverlay.prototype.initLayers = function () {
            this.overlayContainer = new PIXI.Container;
            this.container.addChild(this.overlayContainer);
        };
        BattleSceneUnitOverlay.prototype.setSFX = function (SFXTemplate, user, target) {
            if (this.activeUnit) {
                var duration = SFXTemplate.duration * options_6.default.battleAnimationTiming.effectDuration;
                if (this.activeUnit === user && SFXTemplate.userOverlay) {
                    this.setOverlay(SFXTemplate.userOverlay, user, duration);
                }
                else if (this.activeUnit === target && SFXTemplate.enemyOverlay) {
                    this.setOverlay(SFXTemplate.enemyOverlay, target, duration);
                }
                else {
                }
            }
            else {
            }
        };
        BattleSceneUnitOverlay.prototype.setOverlay = function (overlayFN, unit, duration) {
            this.clearOverlay();
            if (duration <= 0) {
                return;
            }
            if (this.animationIsActive) {
                console.warn("Triggered new unit overlay animation without clearing previous one");
            }
            this.activeUnit = unit;
            var SFXParams = this.getSFXParams(duration, this.addOverlay.bind(this), this.finishAnimation.bind(this));
            overlayFN(SFXParams);
        };
        BattleSceneUnitOverlay.prototype.clearOverlay = function () {
            this.animationIsActive = false;
            this.onAnimationFinish = null;
            this.activeUnit = null;
            this.overlayContainer.removeChildren();
        };
        BattleSceneUnitOverlay.prototype.getSFXParams = function (duration, triggerStart, triggerEnd) {
            var bounds = this.getSceneBounds();
            return ({
                user: this.activeUnit,
                width: bounds.width,
                height: bounds.height,
                duration: duration,
                facingRight: this.activeUnit.battleStats.side === "side1",
                renderer: this.renderer,
                triggerStart: triggerStart,
                triggerEnd: triggerEnd
            });
        };
        BattleSceneUnitOverlay.prototype.setContainerPosition = function () {
            var sceneBounds = this.getSceneBounds();
            var shouldLockToRight = this.activeUnit.battleStats.side === "side2";
            var containerBounds = this.overlayContainer.getLocalBounds();
            this.overlayContainer.y = sceneBounds.height - containerBounds.height;
            if (shouldLockToRight) {
                this.overlayContainer.x = sceneBounds.width - containerBounds.width;
            }
        };
        BattleSceneUnitOverlay.prototype.addOverlay = function (overlay) {
            this.animationIsActive = true;
            this.overlayContainer.addChild(overlay);
            this.setContainerPosition();
        };
        BattleSceneUnitOverlay.prototype.finishAnimation = function () {
            if (this.onAnimationFinish) {
                this.onAnimationFinish();
            }
            this.clearOverlay();
        };
        return BattleSceneUnitOverlay;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BattleSceneUnitOverlay;
});
define("src/BattleScene", ["require", "exports", "src/BattleSceneUnit", "src/BattleSceneUnitOverlay", "src/options"], function (require, exports, BattleSceneUnit_1, BattleSceneUnitOverlay_1, options_7) {
    "use strict";
    var BattleScene = (function () {
        function BattleScene(pixiContainer) {
            this.side1UnitHasFinishedUpdating = false;
            this.side2UnitHasFinishedUpdating = false;
            this.isPaused = false;
            this.forceFrame = false;
            this.pixiContainer = pixiContainer;
            this.container = new PIXI.Container();
            var pixiContainerStyle = window.getComputedStyle(this.pixiContainer);
            this.renderer = PIXI.autoDetectRenderer(parseInt(pixiContainerStyle.width), parseInt(pixiContainerStyle.height), {
                autoResize: false,
                antialias: true,
                transparent: true
            });
            this.pixiContainer.appendChild(this.renderer.view);
            this.renderer.view.setAttribute("id", "battle-scene-pixi-canvas");
            this.initLayers();
            this.resizeListener = this.handleResize.bind(this);
            window.addEventListener("resize", this.resizeListener, false);
        }
        BattleScene.prototype.destroy = function () {
            this.container.renderable = false;
            this.pause();
            if (this.renderer) {
                this.renderer.destroy(true);
                this.renderer = null;
            }
            this.container.destroy(true);
            this.container = null;
            this.pixiContainer = null;
            window.removeEventListener("resize", this.resizeListener);
        };
        BattleScene.prototype.initLayers = function () {
            this.layers =
                {
                    battleOverlay: new PIXI.Container,
                    side1Container: new PIXI.Container,
                    side2Container: new PIXI.Container
                };
            this.side1Unit = new BattleSceneUnit_1.default(this.layers.side1Container, this.renderer);
            this.side2Unit = new BattleSceneUnit_1.default(this.layers.side2Container, this.renderer);
            this.side1Unit.getSceneBounds = this.side2Unit.getSceneBounds = this.getSceneBounds;
            this.side1Overlay = new BattleSceneUnitOverlay_1.default(this.layers.side1Container, this.renderer);
            this.side2Overlay = new BattleSceneUnitOverlay_1.default(this.layers.side2Container, this.renderer);
            this.side1Overlay.getSceneBounds = this.side2Overlay.getSceneBounds = this.getSceneBounds;
            this.container.addChild(this.layers.side1Container);
            this.container.addChild(this.layers.side2Container);
            this.container.addChild(this.layers.battleOverlay);
        };
        BattleScene.prototype.handleResize = function () {
            var w = this.pixiContainer.offsetWidth * window.devicePixelRatio;
            var h = this.pixiContainer.offsetHeight * window.devicePixelRatio;
            this.renderer.resize(w, h);
            this.side1Unit.resize();
            this.side2Unit.resize();
        };
        BattleScene.prototype.getSceneBounds = function () {
            return ({
                width: this.renderer.width,
                height: this.renderer.height
            });
        };
        BattleScene.prototype.getSFXParams = function (props) {
            var bounds = this.getSceneBounds();
            var duration = this.activeSFX.duration * options_7.default.battleAnimationTiming.effectDuration;
            return ({
                user: this.userUnit,
                target: this.targetUnit,
                width: bounds.width,
                height: bounds.height,
                duration: duration,
                facingRight: this.userUnit.battleStats.side === "side1",
                renderer: this.renderer,
                triggerStart: props.triggerStart,
                triggerEffect: this.executeTriggerEffectCallback.bind(this),
                triggerEnd: props.triggerEnd
            });
        };
        BattleScene.prototype.getHighestPriorityUnitForSide = function (side) {
            var units = [
                this.targetUnit,
                this.userUnit,
                this.activeUnit,
                this.hoveredUnit
            ];
            for (var i = 0; i < units.length; i++) {
                var unit = units[i];
                if (unit && unit.battleStats.side === side) {
                    return unit;
                }
            }
            return null;
        };
        BattleScene.prototype.haveBothUnitsFinishedUpdating = function () {
            return this.side1UnitHasFinishedUpdating && this.side2UnitHasFinishedUpdating;
        };
        BattleScene.prototype.executeIfBothUnitsHaveFinishedUpdating = function () {
            if (this.afterUnitsHaveFinishedUpdatingCallback && this.haveBothUnitsFinishedUpdating()) {
                var temp = this.afterUnitsHaveFinishedUpdatingCallback;
                this.afterUnitsHaveFinishedUpdatingCallback = null;
                temp();
            }
            else {
                return;
            }
        };
        BattleScene.prototype.finishUpdatingUnit = function (side) {
            if (side === "side1") {
                this.side1UnitHasFinishedUpdating = true;
            }
            else {
                this.side2UnitHasFinishedUpdating = true;
            }
            this.executeIfBothUnitsHaveFinishedUpdating();
        };
        BattleScene.prototype.handleAbilityUse = function (props) {
            this.clearActiveSFX();
            this.userUnit = props.user;
            this.targetUnit = props.target;
            this.activeSFX = props.SFXTemplate;
            this.abilityUseHasFinishedCallback = props.afterFinishedCallback;
            this.activeSFXHasFinishedCallback = this.cleanUpAfterSFX.bind(this);
            this.triggerEffectCallback = props.triggerEffectCallback;
            this.beforeUseDelayHasFinishedCallback = this.playSFX.bind(this);
            this.prepareSFX();
        };
        BattleScene.prototype.executeBeforeUseDelayHasFinishedCallback = function () {
            if (!this.beforeUseDelayHasFinishedCallback) {
                throw new Error("No callback set for 'before ability use delay' finish.");
            }
            var temp = this.beforeUseDelayHasFinishedCallback;
            this.beforeUseDelayHasFinishedCallback = null;
            temp();
        };
        BattleScene.prototype.executeTriggerEffectCallback = function () {
            if (!this.triggerEffectCallback) {
                return;
            }
            var temp = this.triggerEffectCallback;
            this.triggerEffectCallback = null;
            temp();
        };
        BattleScene.prototype.executeActiveSFXHasFinishedCallback = function () {
            if (!this.activeSFXHasFinishedCallback) {
                throw new Error("No callback set for active SFX finish.");
            }
            var temp = this.activeSFXHasFinishedCallback;
            this.activeSFXHasFinishedCallback = null;
            temp();
        };
        BattleScene.prototype.executeAfterUseDelayHasFinishedCallback = function () {
            if (!this.afterUseDelayHasFinishedCallback) {
                throw new Error("No callback set for 'after ability use delay' finish.");
            }
            var temp = this.afterUseDelayHasFinishedCallback;
            this.afterUseDelayHasFinishedCallback = null;
            temp();
        };
        BattleScene.prototype.executeAbilityUseHasFinishedCallback = function () {
            if (!this.abilityUseHasFinishedCallback) {
                throw new Error("No callback set for ability use finish.");
            }
            var temp = this.abilityUseHasFinishedCallback;
            this.abilityUseHasFinishedCallback = null;
            temp();
        };
        BattleScene.prototype.prepareSFX = function () {
            var beforeUseDelay = options_7.default.battleAnimationTiming.before;
            var afterUnitsHaveFinishedUpdatingCallback = function () {
                if (beforeUseDelay >= 0) {
                    window.setTimeout(this.executeBeforeUseDelayHasFinishedCallback.bind(this), beforeUseDelay);
                }
                else {
                    this.executeBeforeUseDelayHasFinishedCallback();
                }
            }.bind(this);
            this.updateUnits(afterUnitsHaveFinishedUpdatingCallback);
        };
        BattleScene.prototype.playSFX = function () {
            var SFXDuration = options_7.default.battleAnimationTiming.effectDuration *
                this.activeSFX.duration;
            if (SFXDuration <= 0) {
                this.executeTriggerEffectCallback();
                this.handleActiveSFXEnd();
            }
            else {
                this.triggerSFXStart(this.activeSFX, this.userUnit, this.targetUnit, this.handleActiveSFXEnd.bind(this));
            }
        };
        BattleScene.prototype.handleActiveSFXEnd = function () {
            this.activeSFX = null;
            this.clearBattleOverlay();
            this.clearUnitOverlays();
            this.executeActiveSFXHasFinishedCallback();
        };
        BattleScene.prototype.cleanUpAfterSFX = function () {
            var afterUseDelay = options_7.default.battleAnimationTiming.after;
            this.afterUseDelayHasFinishedCallback = function () {
                this.userUnit = null;
                this.targetUnit = null;
                this.updateUnits(this.executeAbilityUseHasFinishedCallback.bind(this));
            }.bind(this);
            if (afterUseDelay >= 0) {
                window.setTimeout(this.executeAfterUseDelayHasFinishedCallback.bind(this), afterUseDelay);
            }
            else {
                this.executeAfterUseDelayHasFinishedCallback();
            }
        };
        BattleScene.prototype.updateUnits = function (afterFinishedUpdatingCallback) {
            var boundAfterFinishFN1 = null;
            var boundAfterFinishFN2 = null;
            if (afterFinishedUpdatingCallback) {
                this.afterUnitsHaveFinishedUpdatingCallback = afterFinishedUpdatingCallback;
                boundAfterFinishFN1 = this.finishUpdatingUnit.bind(this, "side1");
                boundAfterFinishFN2 = this.finishUpdatingUnit.bind(this, "side2");
                this.side1UnitHasFinishedUpdating = false;
                this.side2UnitHasFinishedUpdating = false;
            }
            var activeSide1Unit = this.getHighestPriorityUnitForSide("side1");
            var activeSide2Unit = this.getHighestPriorityUnitForSide("side2");
            this.side1Unit.changeActiveUnit(activeSide1Unit, boundAfterFinishFN1);
            this.side1Overlay.activeUnit = activeSide1Unit;
            this.side2Unit.changeActiveUnit(activeSide2Unit, boundAfterFinishFN2);
            this.side2Overlay.activeUnit = activeSide2Unit;
        };
        BattleScene.prototype.clearActiveSFX = function () {
            this.activeSFX = null;
            this.userUnit = null;
            this.targetUnit = null;
            this.clearBattleOverlay();
            this.clearUnitOverlays();
        };
        BattleScene.prototype.triggerSFXStart = function (SFXTemplate, user, target, afterFinishedCallback) {
            this.activeSFX = SFXTemplate;
            this.side1Unit.setSFX(SFXTemplate, user, target);
            this.side2Unit.setSFX(SFXTemplate, user, target);
            this.side1Overlay.setSFX(SFXTemplate, user, target);
            this.side2Overlay.setSFX(SFXTemplate, user, target);
            this.makeBattleOverlay(afterFinishedCallback);
        };
        BattleScene.prototype.makeBattleOverlay = function (afterFinishedCallback) {
            if (afterFinishedCallback === void 0) { afterFinishedCallback = this.clearActiveSFX.bind(this); }
            if (!this.activeSFX.battleOverlay) {
                afterFinishedCallback();
            }
            else {
                var SFXParams = this.getSFXParams({
                    triggerStart: this.addBattleOverlay.bind(this),
                    triggerEnd: afterFinishedCallback
                });
                this.activeSFX.battleOverlay(SFXParams);
            }
        };
        BattleScene.prototype.addBattleOverlay = function (overlay) {
            this.layers.battleOverlay.addChild(overlay);
        };
        BattleScene.prototype.clearBattleOverlay = function () {
            this.layers.battleOverlay.removeChildren();
        };
        BattleScene.prototype.clearUnitOverlays = function () {
            this.side1Overlay.clearOverlay();
            this.side2Overlay.clearOverlay();
        };
        BattleScene.prototype.getBattleSceneUnit = function (unit) {
            switch (unit.battleStats.side) {
                case "side1":
                    {
                        return this.side1Unit;
                    }
                case "side2":
                    {
                        return this.side2Unit;
                    }
            }
        };
        BattleScene.prototype.getBattleSceneUnitOverlay = function (unit) {
            switch (unit.battleStats.side) {
                case "side1":
                    {
                        return this.side1Overlay;
                    }
                case "side2":
                    {
                        return this.side2Overlay;
                    }
            }
        };
        BattleScene.prototype.renderOnce = function () {
            this.forceFrame = true;
            this.render();
        };
        BattleScene.prototype.pause = function () {
            this.isPaused = true;
            this.forceFrame = false;
        };
        BattleScene.prototype.resume = function () {
            this.isPaused = false;
            this.forceFrame = false;
            this.render();
        };
        BattleScene.prototype.render = function (timeStamp) {
            if (this.isPaused) {
                if (this.forceFrame) {
                    this.forceFrame = false;
                }
                else {
                    return;
                }
            }
            this.renderer.render(this.container);
            TWEEN.update();
            window.requestAnimationFrame(this.render.bind(this));
        };
        return BattleScene;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BattleScene;
});
define("src/uicomponents/BattleSceneTester", ["require", "exports", "src/Unit", "src/Player", "src/Battle", "src/BattleScene", "src/utility", "src/App"], function (require, exports, Unit_5, Player_2, Battle_2, BattleScene_1, utility_27, App_27) {
    "use strict";
    var BattleSceneTesterComponent = (function (_super) {
        __extends(BattleSceneTesterComponent, _super);
        function BattleSceneTesterComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleSceneTester";
            this.idGenerator = 0;
            this.battle = null;
            this.battleScene = null;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        BattleSceneTesterComponent.prototype.bindMethods = function () {
            this.useSelectedAbility = this.useSelectedAbility.bind(this);
            this.makeBattle = this.makeBattle.bind(this);
            this.selectUnit = this.selectUnit.bind(this);
            this.makeUnitElements = this.makeUnitElements.bind(this);
            this.makeFormation = this.makeFormation.bind(this);
            this.handleTestAbility1 = this.handleTestAbility1.bind(this);
            this.makeUnit = this.makeUnit.bind(this);
            this.handleUnitHover = this.handleUnitHover.bind(this);
            this.handleClearHover = this.handleClearHover.bind(this);
            this.handleChangeDuration = this.handleChangeDuration.bind(this);
            this.makePlayer = this.makePlayer.bind(this);
            this.handleSelectSFXTemplate = this.handleSelectSFXTemplate.bind(this);
        };
        BattleSceneTesterComponent.prototype.getInitialStateTODO = function () {
            var side1Units = [];
            var side2Units = [];
            for (var i = 0; i < 5; i++) {
                side1Units.push(this.makeUnit());
                side2Units.push(this.makeUnit());
            }
            var side1Player = this.makePlayer();
            var side2Player = this.makePlayer();
            var battle = this.battle = this.makeBattle({
                side1Units: side1Units,
                side2Units: side2Units,
                side1Player: side1Player,
                side2Player: side2Player
            });
            battle.init();
            return ({
                activeUnit: side1Units[0],
                selectedSide1Unit: side1Units[0],
                selectedSide2Unit: side2Units[0],
                selectedSFXTemplateKey: "particleTest",
                duration: null
            });
        };
        BattleSceneTesterComponent.prototype.componentDidMount = function () {
            var battleScene = this.battleScene = new BattleScene_1.default(ReactDOM.findDOMNode(this.ref_TODO_main));
            battleScene.resume();
            battleScene.activeUnit = this.state.selectedSide1Unit;
            battleScene.updateUnits();
        };
        BattleSceneTesterComponent.prototype.makeUnit = function () {
            var template = utility_27.getRandomProperty(App_27.default.moduleData.Templates.Units);
            return new Unit_5.default(template, this.idGenerator++);
        };
        BattleSceneTesterComponent.prototype.makePlayer = function () {
            var player = new Player_2.default(false, this.idGenerator++);
            player.name = "player " + player.id;
            player.makeColorScheme();
            player.makeRandomFlag();
            return player;
        };
        BattleSceneTesterComponent.prototype.makeFormation = function (units) {
            var formation = [];
            var unitsIndex = 0;
            for (var i = 0; i < 2; i++) {
                formation.push([]);
                for (var j = 0; j < 3; j++) {
                    var unitToAdd = units[unitsIndex] ? units[unitsIndex] : null;
                    formation[i].push(unitToAdd);
                    unitsIndex++;
                }
            }
            return formation;
        };
        BattleSceneTesterComponent.prototype.makeBattle = function (props) {
            return new Battle_2.default({
                battleData: {
                    location: null,
                    building: null,
                    attacker: {
                        player: props.side1Player,
                        units: props.side1Units
                    },
                    defender: {
                        player: props.side2Player,
                        units: props.side2Units
                    }
                },
                side1: this.makeFormation(props.side1Units),
                side2: this.makeFormation(props.side2Units),
                side1Player: props.side1Player,
                side2Player: props.side2Player
            });
        };
        BattleSceneTesterComponent.prototype.handleUnitHover = function (unit) {
            this.battleScene.hoveredUnit = unit;
            this.battleScene.updateUnits();
        };
        BattleSceneTesterComponent.prototype.handleClearHover = function () {
            this.battleScene.hoveredUnit = null;
            this.battleScene.updateUnits();
        };
        BattleSceneTesterComponent.prototype.selectUnit = function (unit) {
            var statePropForSide = unit.battleStats.side === "side1" ? "selectedSide1Unit" : "selectedSide2Unit";
            var statePropForOtherSide = unit.battleStats.side === "side1" ? "selectedSide2Unit" : "selectedSide1Unit";
            var previousSelectedUnit = this.state[statePropForSide];
            var newSelectedUnit = (previousSelectedUnit === unit) ? null : unit;
            var newStateObj = {};
            newStateObj[statePropForSide] = newSelectedUnit;
            var newActiveUnit = newSelectedUnit || this.state[statePropForOtherSide] || null;
            newStateObj.activeUnit = newActiveUnit;
            this.setState(newStateObj);
            this.battleScene.activeUnit = newActiveUnit;
            this.battleScene.updateUnits();
        };
        BattleSceneTesterComponent.prototype.handleSelectSFXTemplate = function (e) {
            var target = e.target;
            this.setState({
                selectedSFXTemplateKey: target.value
            });
        };
        BattleSceneTesterComponent.prototype.handleChangeDuration = function (e) {
            var target = e.target;
            this.setState({
                duration: parseInt(target.value)
            });
        };
        BattleSceneTesterComponent.prototype.handleTestAbility1 = function () {
            var overlayTestFN = function (color, params) {
                var renderTexture = new PIXI.RenderTexture(params.renderer, params.width, params.height);
                var sprite = new PIXI.Sprite(renderTexture);
                var container = new PIXI.Container();
                var text = new PIXI.Text("" + params.duration, { fill: color });
                text.y -= 50;
                container.addChild(text);
                var alphaPerMillisecond = 1 / params.duration;
                var currentTime = Date.now();
                var startTime = currentTime;
                var endTime = currentTime + params.duration;
                var lastTime = currentTime;
                function animate() {
                    currentTime = Date.now();
                    var elapsedTime = currentTime - lastTime;
                    lastTime = currentTime;
                    renderTexture.clear();
                    renderTexture.render(container);
                    if (currentTime < endTime) {
                        if (currentTime > startTime) {
                            text.text = "" + (endTime - currentTime);
                        }
                        window.requestAnimationFrame(animate);
                    }
                    else {
                        params.triggerEnd();
                    }
                }
                params.triggerStart(container);
                animate();
            };
            var spriteTestFN = function (params) {
                var container = new PIXI.Container;
                var gfx = new PIXI.Graphics();
                gfx.beginFill(0x0000FF);
                gfx.drawRect(0, 0, 200, 200);
                gfx.endFill();
                container.addChild(gfx);
                params.triggerStart(container);
            };
            var testSFX = {
                duration: 1000,
                battleOverlay: App_27.default.moduleData.Templates.BattleSFX["guard"].battleOverlay,
                userOverlay: overlayTestFN.bind(null, 0xFF0000),
                enemyOverlay: overlayTestFN.bind(null, 0x00FF00),
                userSprite: spriteTestFN
            };
            var user = this.state.activeUnit;
            var target = user === this.state.selectedSide1Unit ? this.state.selectedSide2Unit : this.state.selectedSide1Unit;
            var bs = this.battleScene;
            var SFXTemplate = testSFX;
            bs.handleAbilityUse({
                user: user,
                target: target,
                SFXTemplate: SFXTemplate,
                triggerEffectCallback: function () { console.log("triggerEffect"); },
                afterFinishedCallback: function () { console.log("afterFinishedCallback"); }
            });
        };
        BattleSceneTesterComponent.prototype.useSelectedAbility = function () {
            var user = this.state.activeUnit;
            var target = user === this.state.selectedSide1Unit ? this.state.selectedSide2Unit : this.state.selectedSide1Unit;
            var bs = this.battleScene;
            var SFXTemplate = utility_27.extendObject(App_27.default.moduleData.Templates.BattleSFX[this.state.selectedSFXTemplateKey]);
            if (this.state.duration) {
                SFXTemplate.duration = this.state.duration;
            }
            bs.handleAbilityUse({
                user: user,
                target: target,
                SFXTemplate: SFXTemplate,
                triggerEffectCallback: function () { console.log("triggerEffect"); },
                afterFinishedCallback: function () { console.log("afterFinishedCallback"); }
            });
        };
        BattleSceneTesterComponent.prototype.makeUnitElements = function (units) {
            var unitElements = [];
            for (var i = 0; i < units.length; i++) {
                var unit = units[i];
                var style = {};
                if (unit === this.state.activeUnit) {
                    style.border = "1px solid red";
                }
                if (unit === this.state.selectedSide1Unit || unit === this.state.selectedSide2Unit) {
                    style.backgroundColor = "yellow";
                }
                unitElements.push(React.DOM.div({
                    className: "battle-scene-test-controls-units-unit",
                    onMouseEnter: this.handleUnitHover.bind(this, unit),
                    onMouseLeave: this.handleClearHover.bind(this, unit),
                    onClick: this.selectUnit.bind(this, unit),
                    key: "" + unit.id,
                    style: style
                }, unit.name));
            }
            return unitElements;
        };
        BattleSceneTesterComponent.prototype.render = function () {
            var _this = this;
            var battle = this.battle;
            var side1UnitElements = this.makeUnitElements(battle.unitsBySide["side1"]);
            var side2UnitElements = this.makeUnitElements(battle.unitsBySide["side2"]);
            var SFXTemplateSelectOptions = [];
            SFXTemplateSelectOptions.push(React.DOM.option({
                value: null,
                key: "null"
            }, "null"));
            for (var key in App_27.default.moduleData.Templates.BattleSFX) {
                var template = App_27.default.moduleData.Templates.BattleSFX[key];
                SFXTemplateSelectOptions.push(React.DOM.option({
                    value: key,
                    key: key
                }, key));
            }
            return (React.DOM.div({
                className: "battle-scene-test"
            }, React.DOM.div({
                className: "battle-scene-test-pixi-container",
                ref: function (component) {
                    _this.ref_TODO_main = component;
                }
            }, null), React.DOM.div({
                className: "battle-scene-test-controls"
            }, React.DOM.div({
                className: "battle-scene-test-controls-units"
            }, React.DOM.div({
                className: "battle-scene-test-controls-units-side1"
            }, side1UnitElements), React.DOM.div({
                className: "battle-scene-test-controls-units-side2"
            }, side2UnitElements)), React.DOM.select({
                value: this.state.selectedSFXTemplateKey,
                onChange: this.handleSelectSFXTemplate
            }, SFXTemplateSelectOptions), React.DOM.button({
                className: "battle-scene-test-ability2",
                onClick: this.useSelectedAbility,
                disabled: !this.state.selectedSFXTemplateKey || !(this.state.selectedSide1Unit && this.state.selectedSide2Unit)
            }, "use ability"), React.DOM.input({
                type: "number",
                step: 100,
                min: 100,
                max: 20000,
                value: "" + this.state.duration,
                onChange: this.handleChangeDuration,
                placeholder: "duration"
            }, null))));
        };
        return BattleSceneTesterComponent;
    }(React.Component));
    exports.BattleSceneTesterComponent = BattleSceneTesterComponent;
    var Factory = React.createFactory(BattleSceneTesterComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/FlagPicker", ["require", "exports", "src/App"], function (require, exports, App_28) {
    "use strict";
    var FlagPickerComponent = (function (_super) {
        __extends(FlagPickerComponent, _super);
        function FlagPickerComponent(props) {
            _super.call(this, props);
            this.displayName = "FlagPicker";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        FlagPickerComponent.prototype.bindMethods = function () {
            this.clearSelectedEmblem = this.clearSelectedEmblem.bind(this);
            this.handleSelectEmblem = this.handleSelectEmblem.bind(this);
            this.handleUpload = this.handleUpload.bind(this);
            this.makeEmblemElement = this.makeEmblemElement.bind(this);
        };
        FlagPickerComponent.prototype.getInitialStateTODO = function () {
            var initialEmblem = null;
            if (this.props.flag.foregroundEmblem) {
                initialEmblem = this.props.flag.foregroundEmblem.inner;
            }
            return ({
                selectedEmblem: initialEmblem
            });
        };
        FlagPickerComponent.prototype.handleSelectEmblem = function (emblemTemplate) {
            if (this.state.selectedEmblem === emblemTemplate && emblemTemplate !== null) {
                this.clearSelectedEmblem();
                return;
            }
            ReactDOM.findDOMNode(this.ref_TODO_imageUploader).value = null;
            this.props.handleSelectEmblem(emblemTemplate);
            this.setState({ selectedEmblem: emblemTemplate });
        };
        FlagPickerComponent.prototype.clearSelectedEmblem = function () {
            this.handleSelectEmblem(null);
        };
        FlagPickerComponent.prototype.handleUpload = function () {
            if (!this.props.uploadFiles)
                throw new Error();
            var files = ReactDOM.findDOMNode(this.ref_TODO_imageUploader).files;
            this.props.uploadFiles(files);
        };
        FlagPickerComponent.prototype.makeEmblemElement = function (template) {
            var className = "emblem-picker-image";
            if (this.state.selectedEmblem &&
                this.state.selectedEmblem.key === template.key) {
                className += " selected-emblem";
            }
            return (React.DOM.div({
                className: "emblem-picker-container",
                key: template.key,
                onClick: this.handleSelectEmblem.bind(this, template)
            }, React.DOM.img({
                className: className,
                src: App_28.default.images[template.src].src
            })));
        };
        FlagPickerComponent.prototype.render = function () {
            var _this = this;
            var emblemElements = [];
            for (var emblemType in App_28.default.moduleData.Templates.SubEmblems) {
                var template = App_28.default.moduleData.Templates.SubEmblems[emblemType];
                emblemElements.push(this.makeEmblemElement(template));
            }
            var imageInfoMessage;
            if (this.props.hasImageFailMessage) {
                imageInfoMessage =
                    React.DOM.div({ className: "image-info-message image-loading-fail-message" }, "Linked image failed to load. Try saving it to your own computer " +
                        "and uploading it.");
            }
            else {
                imageInfoMessage =
                    React.DOM.div({ className: "image-info-message" }, "Upload or drag image here to set it as your flag");
            }
            return (React.DOM.div({
                className: "flag-picker"
            }, React.DOM.div({
                className: "flag-image-uploader"
            }, React.DOM.div({ className: "flag-picker-title" }, "Upload image"), React.DOM.div({
                className: "flag-image-uploader-content"
            }, React.DOM.input({
                className: "flag-image-upload-button",
                type: "file",
                ref: function (component) {
                    _this.ref_TODO_imageUploader = component;
                },
                onChange: this.handleUpload
            }), imageInfoMessage)), React.DOM.div({
                className: "emblem-picker"
            }, React.DOM.div({ className: "flag-picker-title" }, "Emblems"), React.DOM.div({ className: "emblem-picker-emblem-list" }, emblemElements))));
        };
        return FlagPickerComponent;
    }(React.Component));
    exports.FlagPickerComponent = FlagPickerComponent;
    var Factory = React.createFactory(FlagPickerComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/mixins/FocusTimer", ["require", "exports"], function (require, exports) {
    "use strict";
    var FocusTimer = (function () {
        function FocusTimer(owner) {
            this.owner = owner;
            this.setFocusTimer = this.setFocusTimer.bind(this);
        }
        Object.defineProperty(FocusTimer.prototype, "props", {
            get: function () {
                return this.owner.props.focusTimerProps;
            },
            enumerable: true,
            configurable: true
        });
        FocusTimer.prototype.componentDidMount = function () {
            this.setFocusTimer();
        };
        FocusTimer.prototype.registerListener = function () {
            window.addEventListener("focus", this.setFocusTimer, false);
        };
        FocusTimer.prototype.clearListener = function () {
            window.removeEventListener("focus", this.setFocusTimer);
        };
        FocusTimer.prototype.isWithinGracePeriod = function () {
            var graceTime = this.props && isFinite(this.props.graceTime) ? this.props.graceTime : 500;
            return Date.now() < this.lastFocusTime + graceTime;
        };
        FocusTimer.prototype.setFocusTimer = function () {
            this.lastFocusTime = Date.now();
        };
        return FocusTimer;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = FocusTimer;
});
define("src/uicomponents/setupgame/FlagSetter", ["require", "exports", "src/uicomponents/setupgame/FlagPicker", "src/uicomponents/PlayerFlag", "src/Flag", "src/Emblem", "src/uicomponents/mixins/FocusTimer", "src/uicomponents/mixins/applyMixins"], function (require, exports, FlagPicker_1, PlayerFlag_3, Flag_3, Emblem_3, FocusTimer_1, applyMixins_7) {
    "use strict";
    var FlagSetterComponent = (function (_super) {
        __extends(FlagSetterComponent, _super);
        function FlagSetterComponent(props) {
            _super.call(this, props);
            this.displayName = "FlagSetter";
            this.isMountedTODO = false;
            this.state = this.getInitialStateTODO();
            this.focusTimer = new FocusTimer_1.default(this);
            applyMixins_7.default(this, this.focusTimer);
            this.bindMethods();
        }
        FlagSetterComponent.prototype.bindMethods = function () {
            this.getFirstValidImageFromFiles = this.getFirstValidImageFromFiles.bind(this);
            this.displayImageLoadingFailMessage = this.displayImageLoadingFailMessage.bind(this);
            this.setAsInactive = this.setAsInactive.bind(this);
            this.setForegroundEmblem = this.setForegroundEmblem.bind(this);
            this.clearImageLoadingFailMessage = this.clearImageLoadingFailMessage.bind(this);
            this.handleClick = this.handleClick.bind(this);
            this.setCustomImageFromFile = this.setCustomImageFromFile.bind(this);
            this.handleUpdate = this.handleUpdate.bind(this);
            this.handleUpload = this.handleUpload.bind(this);
            this.handleDrop = this.handleDrop.bind(this);
            this.toggleActive = this.toggleActive.bind(this);
            this.stopEvent = this.stopEvent.bind(this);
        };
        FlagSetterComponent.prototype.getInitialStateTODO = function () {
            var flag = new Flag_3.default({
                width: 46,
                mainColor: this.props.mainColor,
                secondaryColor: this.props.subColor,
                tetriaryColor: this.props.tetriaryColor
            });
            return ({
                flag: flag,
                hasImageFailMessage: false
            });
        };
        FlagSetterComponent.prototype.componentDidMount = function () {
            this.isMountedTODO = true;
        };
        FlagSetterComponent.prototype.componentWillUnmount = function () {
            this.isMountedTODO = false;
            window.clearTimeout(this.imageLoadingFailTimeoutHandle);
            document.removeEventListener("click", this.handleClick);
            this.focusTimer.clearListener();
        };
        FlagSetterComponent.prototype.displayImageLoadingFailMessage = function () {
            var _this = this;
            this.setState({ hasImageFailMessage: true });
            this.imageLoadingFailTimeoutHandle = window.setTimeout(function () {
                _this.setState({ hasImageFailMessage: false });
            }, 10000);
        };
        FlagSetterComponent.prototype.clearImageLoadingFailMessage = function () {
            if (this.imageLoadingFailTimeoutHandle) {
                window.clearTimeout(this.imageLoadingFailTimeoutHandle);
            }
            this.setState({ hasImageFailMessage: false });
        };
        FlagSetterComponent.prototype.handleClick = function (e) {
            if (this.focusTimer.isWithinGracePeriod())
                return;
            var node = ReactDOM.findDOMNode(this.ref_TODO_main);
            var target = e.target;
            if (target === node || node.contains(target)) {
                return;
            }
            else {
                this.setAsInactive();
            }
        };
        FlagSetterComponent.prototype.toggleActive = function () {
            if (this.state.isActive) {
                this.setAsInactive();
            }
            else {
                if (this.props.setActiveColorPicker) {
                    this.props.setActiveColorPicker(this);
                }
                this.setState({ isActive: true });
                document.addEventListener("click", this.handleClick, false);
                this.focusTimer.registerListener();
            }
        };
        FlagSetterComponent.prototype.setAsInactive = function () {
            if (this.isMountedTODO && this.state.isActive) {
                this.setState({ isActive: false });
                document.removeEventListener("click", this.handleClick);
                this.focusTimer.clearListener();
            }
        };
        FlagSetterComponent.prototype.setForegroundEmblem = function (emblemTemplate) {
            var shouldUpdate = emblemTemplate || this.state.flag.foregroundEmblem;
            var emblem = null;
            if (emblemTemplate) {
                emblem = new Emblem_3.default(undefined, 1, emblemTemplate);
            }
            this.state.flag.setForegroundEmblem(emblem);
            if (shouldUpdate) {
                this.handleUpdate();
            }
        };
        FlagSetterComponent.prototype.stopEvent = function (e) {
            e.stopPropagation();
            e.preventDefault();
        };
        FlagSetterComponent.prototype.handleDrop = function (e) {
            if (e.dataTransfer) {
                this.stopEvent(e);
                var files = e.dataTransfer.files;
                var image = this.getFirstValidImageFromFiles(files);
                if (!image) {
                    var htmlContent = e.dataTransfer.getData("text/html");
                    var imageSource = htmlContent.match(/src\s*=\s*"(.+?)"/)[1];
                    if (!imageSource) {
                        console.error("None of the files provided are valid images");
                        return;
                    }
                    else {
                        var getImageDataUrl = function (image) {
                            var canvas = document.createElement("canvas");
                            var ctx = canvas.getContext("2d");
                            canvas.width = image.width;
                            canvas.height = image.height;
                            ctx.drawImage(image, 0, 0);
                            return canvas.toDataURL();
                        };
                        var img = new Image();
                        img.crossOrigin = "Anonymous";
                        img.onload = function (e) {
                            this.state.flag.setCustomImage(getImageDataUrl(img));
                            this.handleUpdate();
                        }.bind(this);
                        img.onerror = function (e) {
                            this.displayImageLoadingFailMessage();
                        }.bind(this);
                        img.src = imageSource;
                        if (img.complete || img.complete === undefined) {
                            this.state.flag.setCustomImage(getImageDataUrl(img));
                            this.handleUpdate();
                        }
                    }
                }
                else {
                    this.setCustomImageFromFile(image);
                }
            }
        };
        FlagSetterComponent.prototype.handleUpload = function (files) {
            var image = this.getFirstValidImageFromFiles(files);
            if (!image)
                return false;
            this.setCustomImageFromFile(image);
            return true;
        };
        FlagSetterComponent.prototype.getFirstValidImageFromFiles = function (files) {
            var image;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                if (file.type.indexOf("image") !== -1) {
                    image = file;
                    break;
                }
            }
            return image;
        };
        FlagSetterComponent.prototype.setCustomImageFromFile = function (file) {
            var setImageFN = function (file) {
                var reader = new FileReader();
                reader.onloadend = function () {
                    this.state.flag.setCustomImage(reader.result);
                    this.handleUpdate();
                }.bind(this);
                reader.readAsDataURL(file);
            }.bind(this, file);
            var fileSizeInMegaBytes = file.size / 1024 / 1024;
            if (fileSizeInMegaBytes > 20) {
                if (window.confirm("Are you sure you want to load an image that is " +
                    fileSizeInMegaBytes.toFixed(2) + "MB in size?\n" +
                    "(The image won't be stored online, " +
                    "but processing it might take a while)")) {
                    setImageFN();
                }
            }
            else {
                setImageFN();
            }
        };
        FlagSetterComponent.prototype.componentWillReceiveProps = function (newProps) {
            var oldProps = this.props;
            this.state.flag.setColorScheme(newProps.mainColor, newProps.subColor, newProps.tetriaryColor);
            var colorHasUpdated;
            ["mainColor", "subColor", "tetriaryColor"].forEach(function (prop) {
                if (oldProps[prop] !== newProps[prop]) {
                    colorHasUpdated = true;
                    return;
                }
            });
            if (colorHasUpdated) {
                this.handleUpdate(true);
                return;
            }
        };
        FlagSetterComponent.prototype.handleUpdate = function (dontTriggerParentUpdates) {
            this.clearImageLoadingFailMessage();
            if (this.state.flag.customImage) {
                if (this.ref_TODO_flagPicker) {
                    this.ref_TODO_flagPicker.clearSelectedEmblem();
                }
            }
            if (!dontTriggerParentUpdates) {
                this.props.toggleCustomImage(this.state.flag.customImage);
            }
            this.forceUpdate();
        };
        FlagSetterComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "flag-setter",
                ref: function (component) {
                    _this.ref_TODO_main = component;
                },
                onDragEnter: this.stopEvent,
                onDragOver: this.stopEvent,
                onDrop: this.handleDrop
            }, PlayerFlag_3.default({
                flag: this.state.flag,
                isMutable: true,
                props: {
                    className: "flag-setter-display",
                    onClick: this.toggleActive
                }
            }), this.state.isActive ?
                FlagPicker_1.default({
                    ref: function (component) {
                        _this.ref_TODO_flagPicker = component;
                    },
                    flag: this.state.flag,
                    handleSelectEmblem: this.setForegroundEmblem,
                    hasImageFailMessage: this.state.hasImageFailMessage,
                    uploadFiles: this.handleUpload
                }) : null));
        };
        return FlagSetterComponent;
    }(React.Component));
    exports.FlagSetterComponent = FlagSetterComponent;
    var Factory = React.createFactory(FlagSetterComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/ColorPicker", ["require", "exports", "src/Color"], function (require, exports, Color_4) {
    "use strict";
    var ColorPickerComponent = (function (_super) {
        __extends(ColorPickerComponent, _super);
        function ColorPickerComponent(props) {
            _super.call(this, props);
            this.displayName = "ColorPicker";
            this.onChangeTimeoutHandle = null;
            this.baseElementID = "color-picker";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        ColorPickerComponent.prototype.bindMethods = function () {
            this.setHue = this.setHue.bind(this);
            this.setPosition = this.setPosition.bind(this);
            this.setSat = this.setSat.bind(this);
            this.makeHsvInputs = this.makeHsvInputs.bind(this);
            this.autoGenerateColor = this.autoGenerateColor.bind(this);
            this.updateFromHex = this.updateFromHex.bind(this);
            this.updateFromHsv = this.updateFromHsv.bind(this);
            this.makeGradientStyle = this.makeGradientStyle.bind(this);
            this.getHueGradientString = this.getHueGradientString.bind(this);
            this.triggerParentOnChange = this.triggerParentOnChange.bind(this);
            this.setHex = this.setHex.bind(this);
            this.setVal = this.setVal.bind(this);
            this.makeGradientString = this.makeGradientString.bind(this);
            this.nullifyColor = this.nullifyColor.bind(this);
        };
        ColorPickerComponent.prototype.getInitialStateTODO = function () {
            var color = isFinite(this.props.hexColor) ? Color_4.default.fromHex(this.props.hexColor) : new Color_4.default(1, 1, 1);
            var hexColor = this.props.hexColor || 0xFFFFFF;
            var hexString = "#" + color.getHexString();
            var hsvColor = Color_4.default.convertScalarsToDegrees(color.getHSV());
            return ({
                hexColor: color.getHex(),
                hexString: hexString,
                lastValidHexString: hexString,
                hue: hsvColor[0],
                sat: hsvColor[1],
                val: hsvColor[2]
            });
        };
        ColorPickerComponent.prototype.componentDidMount = function () {
            window.addEventListener("resize", this.setPosition);
            this.setPosition();
        };
        ColorPickerComponent.prototype.componentWillUnmount = function () {
            window.removeEventListener("resize", this.setPosition);
        };
        ColorPickerComponent.prototype.setPosition = function () {
            var parentRect = this.props.getParentPosition();
            var domNode = ReactDOM.findDOMNode(this);
            domNode.style.top = "" + parentRect.bottom + "px";
            domNode.style.left = "" + parentRect.left + "px";
        };
        ColorPickerComponent.prototype.triggerParentOnChange = function (color, isNull) {
            var _this = this;
            if (this.onChangeTimeoutHandle) {
                window.clearTimeout(this.onChangeTimeoutHandle);
                this.onChangeTimeoutHandle = null;
            }
            this.onChangeTimeoutHandle = window.setTimeout(function () {
                _this.props.onChange(color, isNull);
            }, 50);
        };
        ColorPickerComponent.prototype.updateFromHsv = function (hue, sat, val, e) {
            var color = Color_4.default.fromHSV.apply(null, Color_4.default.convertDegreesToScalars([hue, sat, val]));
            var hexString = "#" + color.getHexString();
            this.setState({
                hexColor: color.getHex(),
                hexString: hexString,
                lastValidHexString: hexString
            });
            if (this.props.onChange) {
                var target = e.target;
                if (!this.props.limitUpdates ||
                    (!this.props.flagHasCustomImage ||
                        target.type !== "range" ||
                        e.type !== "input")) {
                    this.triggerParentOnChange(color, false);
                }
            }
        };
        ColorPickerComponent.prototype.updateFromHex = function (hexColor) {
            var color = Color_4.default.fromHex(hexColor);
            var hsvColor = Color_4.default.convertScalarsToDegrees(color.getHSV());
            this.setState({
                hue: Math.round(hsvColor[0]),
                sat: Math.round(hsvColor[1]),
                val: Math.round(hsvColor[2])
            });
            if (this.props.onChange) {
                this.triggerParentOnChange(color, false);
            }
        };
        ColorPickerComponent.prototype.setHex = function (e) {
            e.stopPropagation();
            e.preventDefault();
            var target = e.target;
            var hexString;
            if (e.type === "paste") {
                var e2 = e;
                hexString = e2.clipboardData.getData("text");
            }
            else {
                hexString = target.value;
            }
            if (hexString[0] !== "#") {
                hexString = "#" + hexString;
            }
            var isValid = /^#[0-9A-F]{6}$/i.test(hexString);
            var hexColor = Color_4.default.fromHexString(hexString).getHex();
            this.setState({
                hexString: hexString,
                lastValidHexString: isValid ? hexString : this.state.lastValidHexString,
                hexColor: isValid ? hexColor : this.state.hexColor
            });
            if (isValid) {
                this.updateFromHex(hexColor);
            }
        };
        ColorPickerComponent.prototype.setHue = function (e) {
            var target = e.target;
            var hue = Math.round(parseInt(target.value) % 361);
            if (hue < 0)
                hue = 360;
            this.setState({ hue: hue });
            this.updateFromHsv(hue, this.state.sat, this.state.val, e);
        };
        ColorPickerComponent.prototype.setSat = function (e) {
            var target = e.target;
            var sat = Math.round(parseInt(target.value) % 101);
            if (sat < 0)
                sat = 100;
            this.setState({ sat: sat });
            this.updateFromHsv(this.state.hue, sat, this.state.val, e);
        };
        ColorPickerComponent.prototype.setVal = function (e) {
            var target = e.target;
            var val = Math.round(parseInt(target.value) % 101);
            if (val < 0)
                val = 100;
            this.setState({ val: val });
            this.updateFromHsv(this.state.hue, this.state.sat, val, e);
        };
        ColorPickerComponent.prototype.autoGenerateColor = function () {
            var color = this.props.generateColor();
            var hexColor = color.getHex();
            var hexString = "#" + color.getHexString();
            this.setState({
                hexString: hexString,
                lastValidHexString: hexString,
                hexColor: hexColor
            });
            this.updateFromHex(hexColor);
        };
        ColorPickerComponent.prototype.nullifyColor = function () {
            if (this.props.onChange) {
                this.triggerParentOnChange(Color_4.default.fromHex(this.state.hexColor), true);
            }
        };
        ColorPickerComponent.prototype.getHueGradientString = function () {
            if (this.hueGradientString)
                return this.hueGradientString;
            var steps = 10;
            var gradeStep = 100 / (steps - 1);
            var hueStep = 360 / steps;
            var gradientString = "linear-gradient(to right, ";
            for (var i = 0; i < steps; i++) {
                var hue = hueStep * i;
                var grade = gradeStep * i;
                var colorString = "hsl(" + hue + ", 100%, 50%) " + grade + "%";
                if (i < steps - 1) {
                    colorString += ",";
                }
                else {
                    colorString += ")";
                }
                gradientString += colorString;
            }
            this.hueGradientString = gradientString;
            return gradientString;
        };
        ColorPickerComponent.prototype.makeGradientString = function (min, max) {
            return ("linear-gradient(to right, " +
                min + " 0%, " +
                max + " 100%)");
        };
        ColorPickerComponent.prototype.makeHexStringFromHSVDegreeArray = function (hsv) {
            var color = Color_4.default.fromHSV.apply(null, Color_4.default.convertDegreesToScalars(hsv));
            return color.getHexString();
        };
        ColorPickerComponent.prototype.makeGradientStyle = function (type) {
            var hue = this.state.hue;
            var sat = this.state.sat;
            var val = this.state.val;
            switch (type) {
                case "hue":
                    {
                        return ({
                            background: this.getHueGradientString()
                        });
                    }
                case "sat":
                    {
                        var min = "#" + this.makeHexStringFromHSVDegreeArray([hue, 0, val]);
                        var max = "#" + this.makeHexStringFromHSVDegreeArray([hue, 100, val]);
                        return ({
                            background: this.makeGradientString(min, max)
                        });
                    }
                case "val":
                    {
                        var min = "#" + this.makeHexStringFromHSVDegreeArray([hue, sat, 0]);
                        var max = "#" + this.makeHexStringFromHSVDegreeArray([hue, sat, 100]);
                        return ({
                            background: this.makeGradientString(min, max)
                        });
                    }
                default:
                    {
                        return null;
                    }
            }
        };
        ColorPickerComponent.prototype.makeHsvInputs = function (type) {
            var label = "" + type[0].toUpperCase() + ":";
            var max = type === "hue" ? 360 : 100;
            var updateFunctions = {
                hue: this.setHue,
                sat: this.setSat,
                val: this.setVal
            };
            return (React.DOM.div({ className: "color-picker-input-container", key: type }, React.DOM.label({ className: "color-picker-label", htmlFor: "" + this.baseElementID + type }, label), React.DOM.div({
                className: "color-picker-slider-background",
                style: this.makeGradientStyle(type)
            }, React.DOM.input({
                className: "color-picker-slider",
                id: "" + this.baseElementID + type,
                ref: type,
                type: "range",
                min: 0,
                max: max,
                step: 1,
                value: this.state[type],
                onChange: updateFunctions[type],
                onMouseUp: updateFunctions[type],
                onTouchEnd: updateFunctions[type]
            })), React.DOM.input({
                className: "color-picker-input",
                type: "number",
                step: 1,
                value: "" + Math.round(this.state[type]),
                onChange: updateFunctions[type]
            })));
        };
        ColorPickerComponent.prototype.render = function () {
            return (React.DOM.div({ className: "color-picker" }, React.DOM.div({ className: "color-picker-hsv" }, this.makeHsvInputs("hue"), this.makeHsvInputs("sat"), this.makeHsvInputs("val")), React.DOM.div({ className: "color-picker-input-container", key: "hex" }, React.DOM.label({ className: "color-picker-label", htmlFor: "" + this.baseElementID + "hex" }, "Hex:"), !this.props.generateColor ? null :
                React.DOM.button({
                    className: "color-picker-button",
                    onClick: this.autoGenerateColor
                }, "Auto"), React.DOM.button({
                className: "color-picker-button",
                onClick: this.nullifyColor
            }, "Clear"), React.DOM.input({
                className: "color-picker-input color-picker-input-hex",
                type: "string",
                step: 1,
                value: this.state.hexString,
                onChange: this.setHex,
                onPaste: this.setHex
            }))));
        };
        return ColorPickerComponent;
    }(React.Component));
    exports.ColorPickerComponent = ColorPickerComponent;
    var Factory = React.createFactory(ColorPickerComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/ColorSetter", ["require", "exports", "src/uicomponents/setupgame/ColorPicker", "src/uicomponents/mixins/FocusTimer", "src/uicomponents/mixins/applyMixins"], function (require, exports, ColorPicker_1, FocusTimer_2, applyMixins_8) {
    "use strict";
    var ColorSetterComponent = (function (_super) {
        __extends(ColorSetterComponent, _super);
        function ColorSetterComponent(props) {
            _super.call(this, props);
            this.displayName = "ColorSetter";
            this.isMountedTODO = false;
            this.state = this.getInitialStateTODO();
            this.focusTimer = new FocusTimer_2.default(this);
            applyMixins_8.default(this, this.focusTimer);
            this.bindMethods();
        }
        ColorSetterComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
            this.toggleActive = this.toggleActive.bind(this);
            this.setAsInactive = this.setAsInactive.bind(this);
            this.getClientRect = this.getClientRect.bind(this);
        };
        ColorSetterComponent.prototype.getInitialStateTODO = function () {
            return ({
                isActive: false
            });
        };
        ColorSetterComponent.prototype.componentDidMount = function () {
            this.isMountedTODO = true;
        };
        ColorSetterComponent.prototype.componentWillUnmount = function () {
            this.isMountedTODO = false;
            document.removeEventListener("click", this.handleClick);
            this.focusTimer.clearListener();
        };
        ColorSetterComponent.prototype.handleClick = function (e) {
            if (this.focusTimer.isWithinGracePeriod())
                return;
            var node = ReactDOM.findDOMNode(this.ref_TODO_main);
            var target = e.target;
            if (target === node || node.contains(target)) {
                return;
            }
            else {
                this.setAsInactive();
            }
        };
        ColorSetterComponent.prototype.toggleActive = function () {
            if (this.state.isActive) {
                this.setAsInactive();
            }
            else {
                if (this.props.setActiveColorPicker) {
                    this.props.setActiveColorPicker(this);
                }
                this.setState({ isActive: true });
                document.addEventListener("click", this.handleClick, false);
                this.focusTimer.registerListener();
            }
        };
        ColorSetterComponent.prototype.setAsInactive = function () {
            if (this.isMountedTODO && this.state.isActive) {
                this.setState({ isActive: false });
                document.removeEventListener("click", this.handleClick);
                this.focusTimer.clearListener();
            }
        };
        ColorSetterComponent.prototype.updateColor = function (color, isNull) {
            this.props.onChange(color, isNull);
        };
        ColorSetterComponent.prototype.getClientRect = function () {
            var ownNode = ReactDOM.findDOMNode(this);
            var firstChild = ownNode.firstChild;
            return firstChild.getBoundingClientRect();
        };
        ColorSetterComponent.prototype.render = function () {
            var _this = this;
            var displayElement = this.props.color === null ?
                React.DOM.img({
                    className: "color-setter-display",
                    src: "img/icons/nullcolor.png",
                    onClick: this.toggleActive
                }) :
                React.DOM.div({
                    className: "color-setter-display",
                    style: {
                        backgroundColor: "#" + this.props.color.getHexString()
                    },
                    onClick: this.toggleActive
                });
            return (React.DOM.div({ className: "color-setter", ref: function (component) {
                    _this.ref_TODO_main = component;
                } }, displayElement, this.state.isActive ?
                ColorPicker_1.default({
                    hexColor: this.props.color ? this.props.color.getHex() : null,
                    generateColor: this.props.generateColor,
                    onChange: this.props.onChange,
                    flagHasCustomImage: this.props.flagHasCustomImage,
                    getParentPosition: this.getClientRect
                }) : null));
        };
        return ColorSetterComponent;
    }(React.Component));
    exports.ColorSetterComponent = ColorSetterComponent;
    var Factory = React.createFactory(ColorSetterComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/PlayerSetup", ["require", "exports", "src/Player", "src/uicomponents/setupgame/FlagSetter", "src/uicomponents/setupgame/ColorSetter", "src/colorGeneration"], function (require, exports, Player_3, FlagSetter_1, ColorSetter_1, colorGeneration_2) {
    "use strict";
    var PlayerSetupComponent = (function (_super) {
        __extends(PlayerSetupComponent, _super);
        function PlayerSetupComponent(props) {
            _super.call(this, props);
            this.displayName = "PlayerSetup";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        PlayerSetupComponent.prototype.bindMethods = function () {
            this.randomize = this.randomize.bind(this);
            this.setSubColor = this.setSubColor.bind(this);
            this.generateSubColor = this.generateSubColor.bind(this);
            this.setMainColor = this.setMainColor.bind(this);
            this.generateMainColor = this.generateMainColor.bind(this);
            this.handleRemove = this.handleRemove.bind(this);
            this.handleNameChange = this.handleNameChange.bind(this);
            this.makePlayer = this.makePlayer.bind(this);
            this.handleSetHuman = this.handleSetHuman.bind(this);
            this.handleSetCustomImage = this.handleSetCustomImage.bind(this);
        };
        PlayerSetupComponent.prototype.getInitialStateTODO = function () {
            return ({
                name: this.props.initialName,
                mainColor: null,
                subColor: null,
                flagHasCustomImage: false
            });
        };
        PlayerSetupComponent.prototype.generateMainColor = function (subColor) {
            if (subColor === void 0) { subColor = this.state.subColor; }
            if (subColor === null) {
                return colorGeneration_2.generateMainColor();
            }
            else {
                return colorGeneration_2.generateSecondaryColor(subColor);
            }
        };
        PlayerSetupComponent.prototype.generateSubColor = function (mainColor) {
            if (mainColor === void 0) { mainColor = this.state.mainColor; }
            if (mainColor === null) {
                return colorGeneration_2.generateMainColor();
            }
            else {
                return colorGeneration_2.generateSecondaryColor(mainColor);
            }
        };
        PlayerSetupComponent.prototype.handleSetHuman = function () {
            this.props.setHuman(this.props.keyTODO);
        };
        PlayerSetupComponent.prototype.handleNameChange = function (e) {
            var target = e.target;
            this.setState({ name: target.value });
        };
        PlayerSetupComponent.prototype.setMainColor = function (color, isNull) {
            this.setState({ mainColor: isNull ? null : color });
        };
        PlayerSetupComponent.prototype.setSubColor = function (color, isNull) {
            this.setState({ subColor: isNull ? null : color });
        };
        PlayerSetupComponent.prototype.handleRemove = function () {
            this.props.removePlayers([this.props.keyTODO]);
        };
        PlayerSetupComponent.prototype.handleSetCustomImage = function (image) {
            this.setState({ flagHasCustomImage: Boolean(image) });
        };
        PlayerSetupComponent.prototype.randomize = function () {
            if (!this.state.flagHasCustomImage) {
                this.ref_TODO_flagSetter.state.flag.generateRandom();
            }
            var mainColor = colorGeneration_2.generateMainColor();
            this.setState({
                mainColor: mainColor,
                subColor: colorGeneration_2.generateSecondaryColor(mainColor)
            });
        };
        PlayerSetupComponent.prototype.makePlayer = function () {
            var player = new Player_3.default(!this.props.isHuman);
            player.initTechnologies();
            player.name = this.state.name;
            player.color = this.state.mainColor === null ?
                this.generateMainColor() : this.state.mainColor;
            player.secondaryColor = this.state.subColor === null ?
                this.generateSubColor(player.color) : this.state.subColor;
            var flag = this.ref_TODO_flagSetter.state.flag;
            player.flag = flag;
            player.flag.setColorScheme(player.color, player.secondaryColor, flag.tetriaryColor);
            if (this.state.mainColor === null && this.state.subColor === null &&
                !flag.customImage && !flag.foregroundEmblem) {
                flag.generateRandom();
            }
            this.setState({
                mainColor: player.color,
                subColor: player.secondaryColor
            });
            return player;
        };
        PlayerSetupComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "player-setup" + (this.props.isHuman ? " human-player-setup" : "")
            }, React.DOM.input({
                className: "player-setup-is-human",
                type: "checkbox",
                checked: this.props.isHuman,
                onChange: this.handleSetHuman
            }), React.DOM.input({
                className: "player-setup-name",
                value: this.state.name,
                onChange: this.handleNameChange
            }), ColorSetter_1.default({
                onChange: this.setMainColor,
                setActiveColorPicker: this.props.setActiveSetterComponent,
                generateColor: this.generateMainColor,
                flagHasCustomImage: this.state.flagHasCustomImage,
                color: this.state.mainColor
            }), ColorSetter_1.default({
                onChange: this.setSubColor,
                setActiveColorPicker: this.props.setActiveSetterComponent,
                generateColor: this.generateSubColor,
                flagHasCustomImage: this.state.flagHasCustomImage,
                color: this.state.subColor
            }), FlagSetter_1.default({
                ref: function (component) {
                    _this.ref_TODO_flagSetter = component;
                },
                mainColor: this.state.mainColor,
                subColor: this.state.subColor,
                setActiveColorPicker: this.props.setActiveSetterComponent,
                toggleCustomImage: this.handleSetCustomImage
            }), React.DOM.button({
                className: "player-setup-remove-player",
                onClick: this.handleRemove
            }, "X")));
        };
        return PlayerSetupComponent;
    }(React.Component));
    exports.PlayerSetupComponent = PlayerSetupComponent;
    var Factory = React.createFactory(PlayerSetupComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/SetupGamePlayers", ["require", "exports", "src/uicomponents/setupgame/PlayerSetup"], function (require, exports, PlayerSetup_1) {
    "use strict";
    var SetupGamePlayersComponent = (function (_super) {
        __extends(SetupGamePlayersComponent, _super);
        function SetupGamePlayersComponent(props) {
            _super.call(this, props);
            this.displayName = "SetupGamePlayers";
            this.newPlayerID = 0;
            this.playerSetupComponentsByID = {};
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        SetupGamePlayersComponent.prototype.bindMethods = function () {
            this.makeNewPlayers = this.makeNewPlayers.bind(this);
            this.makeAllPlayers = this.makeAllPlayers.bind(this);
            this.setActiveColorSetter = this.setActiveColorSetter.bind(this);
            this.setHumanPlayer = this.setHumanPlayer.bind(this);
            this.randomizeAllPlayers = this.randomizeAllPlayers.bind(this);
            this.removePlayers = this.removePlayers.bind(this);
        };
        SetupGamePlayersComponent.prototype.getInitialStateTODO = function () {
            var players = [];
            for (var i = 0; i < this.props.maxPlayers; i++) {
                players.push(this.newPlayerID++);
            }
            return ({
                playerKeys: players,
                activeColorSetter: null
            });
        };
        SetupGamePlayersComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.minPlayers > this.state.playerKeys.length) {
                this.makeNewPlayers(newProps.minPlayers - this.state.playerKeys.length);
            }
            else if (newProps.maxPlayers < this.state.playerKeys.length) {
                var overflowCount = this.state.playerKeys.length - newProps.maxPlayers;
                this.removePlayers(this.state.playerKeys.slice(-overflowCount));
            }
        };
        SetupGamePlayersComponent.prototype.makeNewPlayers = function (amountToMake) {
            if (amountToMake === void 0) { amountToMake = 1; }
            if (this.state.playerKeys.length >= this.props.maxPlayers) {
                return;
            }
            var newIds = [];
            for (var i = 0; i < amountToMake; i++) {
                newIds.push(this.newPlayerID++);
            }
            this.setState({
                playerKeys: this.state.playerKeys.concat(newIds)
            });
        };
        SetupGamePlayersComponent.prototype.setHumanPlayer = function (playerId) {
            var index = this.state.playerKeys.indexOf(playerId);
            var newPlayerOrder = this.state.playerKeys.slice(0);
            newPlayerOrder.unshift(newPlayerOrder.splice(index, 1)[0]);
            this.setState({ playerKeys: newPlayerOrder });
        };
        SetupGamePlayersComponent.prototype.removePlayers = function (toRemove) {
            if (this.state.playerKeys.length <= this.props.minPlayers) {
                return;
            }
            this.setState({
                playerKeys: this.state.playerKeys.filter(function (playerId) {
                    return toRemove.indexOf(playerId) === -1;
                })
            });
        };
        SetupGamePlayersComponent.prototype.setActiveColorSetter = function (colorSetter) {
            if (this.state.activeColorSetter) {
                this.state.activeColorSetter.setAsInactive();
            }
            this.setState({ activeColorSetter: colorSetter });
        };
        SetupGamePlayersComponent.prototype.randomizeAllPlayers = function () {
            for (var id in this.playerSetupComponentsByID) {
                var player = this.playerSetupComponentsByID[id];
                player.randomize();
            }
        };
        SetupGamePlayersComponent.prototype.makeAllPlayers = function () {
            var players = [];
            for (var id in this.playerSetupComponentsByID) {
                players.push(this.playerSetupComponentsByID[id].makePlayer());
            }
            return players;
        };
        SetupGamePlayersComponent.prototype.render = function () {
            var _this = this;
            var playerSetups = [];
            var _loop_1 = function(i) {
                playerSetups.push(PlayerSetup_1.default({
                    key: this_1.state.playerKeys[i],
                    keyTODO: this_1.state.playerKeys[i],
                    ref: function (component) {
                        _this.playerSetupComponentsByID[i] = component;
                    },
                    removePlayers: this_1.removePlayers,
                    setActiveSetterComponent: this_1.setActiveColorSetter,
                    initialName: "Player " + this_1.state.playerKeys[i],
                    isHuman: i === 0,
                    setHuman: this_1.setHumanPlayer
                }));
            };
            var this_1 = this;
            for (var i = 0; i < this.state.playerKeys.length; i++) {
                _loop_1(i);
            }
            var canAddPlayers = this.state.playerKeys.length < this.props.maxPlayers;
            return (React.DOM.div({ className: "setup-game-players" }, React.DOM.div({
                className: "player-setup setup-game-players-header"
            }, React.DOM.div({
                className: "player-setup-is-human"
            }), React.DOM.div({
                className: "player-setup-name"
            }, "Name"), React.DOM.div({
                className: "color-setter"
            }, "Color 1"), React.DOM.div({
                className: "color-setter"
            }, "Color 2"), React.DOM.div({
                className: "flag-setter"
            }, "Flag"), React.DOM.div({
                className: "player-setup-remove-player"
            }, "Remove")), React.DOM.div({
                className: "player-setup-players-list"
            }, playerSetups), React.DOM.div({
                className: "setup-game-players-buttons"
            }, React.DOM.button({
                className: "setup-game-button",
                onClick: this.randomizeAllPlayers
            }, "Randomize"), React.DOM.button({
                className: "setup-game-players-add-new" + (canAddPlayers ? "" : " disabled"),
                onClick: this.makeNewPlayers.bind(this, 1),
                disabled: !canAddPlayers
            }, "Add new player"))));
        };
        return SetupGamePlayersComponent;
    }(React.Component));
    exports.SetupGamePlayersComponent = SetupGamePlayersComponent;
    var Factory = React.createFactory(SetupGamePlayersComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/galaxymap/OptionsGroup", ["require", "exports"], function (require, exports) {
    "use strict";
    var OptionsGroupComponent = (function (_super) {
        __extends(OptionsGroupComponent, _super);
        function OptionsGroupComponent(props) {
            _super.call(this, props);
            this.displayName = "OptionsGroup";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        OptionsGroupComponent.prototype.bindMethods = function () {
            this.toggleCollapse = this.toggleCollapse.bind(this);
        };
        OptionsGroupComponent.prototype.getInitialStateTODO = function () {
            return ({
                isCollapsed: this.props.isCollapsedInitially || false
            });
        };
        OptionsGroupComponent.prototype.toggleCollapse = function () {
            this.setState({
                isCollapsed: !this.state.isCollapsed
            });
        };
        OptionsGroupComponent.prototype.render = function () {
            var rows = [];
            if (!this.state.isCollapsed) {
                for (var i = 0; i < this.props.options.length; i++) {
                    var option = this.props.options[i];
                    rows.push(React.DOM.div({
                        className: "option-container",
                        key: option.key
                    }, option.content));
                }
            }
            var resetButton = null;
            if (this.props.resetFN) {
                resetButton = React.DOM.button({
                    className: "reset-options-button",
                    onClick: this.props.resetFN
                }, "reset");
            }
            var header = this.props.header || resetButton ?
                React.DOM.div({
                    className: "option-group-header"
                }, React.DOM.div({
                    className: "option-group-header-title collapsible" + (this.state.isCollapsed ? " collapsed" : ""),
                    onClick: this.toggleCollapse
                }, this.props.header), resetButton) :
                null;
            return (React.DOM.div({ className: "option-group" }, header, rows));
        };
        return OptionsGroupComponent;
    }(React.Component));
    exports.OptionsGroupComponent = OptionsGroupComponent;
    var Factory = React.createFactory(OptionsGroupComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/MapGenOption", ["require", "exports", "src/utility"], function (require, exports, utility_28) {
    "use strict";
    var MapGenOptionComponent = (function (_super) {
        __extends(MapGenOptionComponent, _super);
        function MapGenOptionComponent(props) {
            _super.call(this, props);
            this.displayName = "MapGenOption";
            this.bindMethods();
        }
        MapGenOptionComponent.prototype.handleChange = function (e) {
            var target = e.target;
            var option = this.props.option;
            var newValue = utility_28.clamp(parseFloat(target.value), option.range.min, option.range.max);
            this.props.onChange(this.props.id, newValue);
        };
        MapGenOptionComponent.prototype.shouldComponentUpdate = function (newProps) {
            return newProps.value !== this.props.value;
        };
        MapGenOptionComponent.prototype.bindMethods = function () {
            this.handleChange = this.handleChange.bind(this);
        };
        MapGenOptionComponent.prototype.render = function () {
            var option = this.props.option;
            var range = option.range;
            var id = "mapGenOption_" + this.props.id;
            ["min", "max", "step"].forEach(function (prop) {
                if (!range[prop]) {
                    throw new Error("No property " + prop + " specified on map gen option " + this.props.id);
                }
            }.bind(this));
            return (React.DOM.div({
                className: "map-gen-option"
            }, React.DOM.label({
                className: "map-gen-option-label",
                title: option.displayName,
                htmlFor: id
            }, option.displayName), React.DOM.input({
                className: "map-gen-option-slider",
                id: id,
                type: "range",
                min: range.min,
                max: range.max,
                step: range.step,
                value: "" + this.props.value,
                onChange: this.handleChange
            }), React.DOM.input({
                className: "map-gen-option-value",
                title: option.displayName,
                type: "number",
                min: range.min,
                max: range.max,
                step: range.step,
                value: "" + this.props.value,
                onChange: this.handleChange
            })));
        };
        return MapGenOptionComponent;
    }(React.Component));
    exports.MapGenOptionComponent = MapGenOptionComponent;
    var Factory = React.createFactory(MapGenOptionComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/MapGenOptions", ["require", "exports", "src/uicomponents/galaxymap/OptionsGroup", "src/uicomponents/setupgame/MapGenOption", "src/utility"], function (require, exports, OptionsGroup_1, MapGenOption_1, utility_29) {
    "use strict";
    var MapGenOptionsComponent = (function (_super) {
        __extends(MapGenOptionsComponent, _super);
        function MapGenOptionsComponent(props) {
            _super.call(this, props);
            this.displayName = "MapGenOptions";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        MapGenOptionsComponent.prototype.bindMethods = function () {
            this.resetValuesToDefault = this.resetValuesToDefault.bind(this);
            this.handleOptionChange = this.handleOptionChange.bind(this);
            this.getDefaultValues = this.getDefaultValues.bind(this);
            this.getOptionValue = this.getOptionValue.bind(this);
            this.randomizeOptions = this.randomizeOptions.bind(this);
            this.getOptionValuesForTemplate = this.getOptionValuesForTemplate.bind(this);
        };
        MapGenOptionsComponent.prototype.getInitialStateTODO = function () {
            return this.getDefaultValues(this.props.mapGenTemplate);
        };
        MapGenOptionsComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.mapGenTemplate.key !== this.props.mapGenTemplate.key) {
                this.setState(this.getDefaultValues(newProps.mapGenTemplate));
            }
        };
        MapGenOptionsComponent.prototype.getDefaultValues = function (mapGenTemplate, unsetOnly) {
            if (unsetOnly === void 0) { unsetOnly = true; }
            var defaultValues = {};
            ["defaultOptions", "basicOptions", "advancedOptions"].forEach(function (optionGroup) {
                var options = mapGenTemplate.options[optionGroup];
                if (!options)
                    return;
                for (var optionName in options) {
                    var option = options[optionName].range;
                    var value;
                    if (unsetOnly && this.state && isFinite(this.getOptionValue(optionName))) {
                        if (!this.props.mapGenTemplate.options[optionGroup])
                            continue;
                        var oldOption = this.props.mapGenTemplate.options[optionGroup][optionName];
                        if (!oldOption)
                            continue;
                        var oldValuePercentage = utility_29.getRelativeValue(this.getOptionValue(optionName), oldOption.range.min, oldOption.range.max);
                        value = option.min + (option.max - option.min) * oldValuePercentage;
                    }
                    else {
                        value = isFinite(option.defaultValue) ? option.defaultValue : (option.min + option.max) / 2;
                    }
                    value = utility_29.clamp(utility_29.roundToNearestMultiple(value, option.step), option.min, option.max);
                    defaultValues["optionValue_" + optionName] = value;
                }
            }.bind(this));
            return defaultValues;
        };
        MapGenOptionsComponent.prototype.resetValuesToDefault = function () {
            this.setState(this.getDefaultValues(this.props.mapGenTemplate, false));
        };
        MapGenOptionsComponent.prototype.handleOptionChange = function (optionName, newValue) {
            var changedState = {};
            changedState["optionValue_" + optionName] = newValue;
            this.setState(changedState);
        };
        MapGenOptionsComponent.prototype.getOptionValue = function (optionName) {
            return this.state["optionValue_" + optionName];
        };
        MapGenOptionsComponent.prototype.randomizeOptions = function () {
            var newValues = {};
            var optionGroups = this.props.mapGenTemplate.options;
            for (var optionGroupName in optionGroups) {
                var optionGroup = optionGroups[optionGroupName];
                for (var optionName in optionGroup) {
                    var option = optionGroup[optionName].range;
                    var optionValue = utility_29.clamp(utility_29.roundToNearestMultiple(utility_29.randInt(option.min, option.max), option.step), option.min, option.max);
                    newValues["optionValue_" + optionName] = optionValue;
                }
            }
            this.setState(newValues);
        };
        MapGenOptionsComponent.prototype.getOptionValuesForTemplate = function () {
            var optionValues = utility_29.extendObject(this.props.mapGenTemplate.options);
            for (var groupName in optionValues) {
                var optionsGroup = optionValues[groupName];
                for (var optionName in optionsGroup) {
                    var optionValue = this.getOptionValue(optionName);
                    if (!isFinite(optionValue)) {
                        throw new Error("Value " + optionValue + " for option " + optionName + " is invalid.");
                    }
                    optionValues[groupName][optionName] = optionValue;
                }
            }
            return optionValues;
        };
        MapGenOptionsComponent.prototype.render = function () {
            var optionGroups = [];
            var optionGroupsInfo = {
                defaultOptions: {
                    title: "Default Options",
                    isCollapsedInitially: false
                },
                basicOptions: {
                    title: "Basic Options",
                    isCollapsedInitially: false
                },
                advancedOptions: {
                    title: "Advanced Options",
                    isCollapsedInitially: true
                }
            };
            for (var groupName in optionGroupsInfo) {
                if (!this.props.mapGenTemplate.options[groupName])
                    continue;
                var options = [];
                for (var optionName in this.props.mapGenTemplate.options[groupName]) {
                    var option = this.props.mapGenTemplate.options[groupName][optionName];
                    options.push({
                        key: optionName,
                        content: MapGenOption_1.default({
                            key: optionName,
                            id: optionName,
                            option: option,
                            value: this.getOptionValue(optionName),
                            onChange: this.handleOptionChange
                        })
                    });
                }
                optionGroups.push(OptionsGroup_1.default({
                    key: groupName,
                    header: optionGroupsInfo[groupName].title,
                    options: options,
                    isCollapsedInitially: optionGroupsInfo[groupName].isCollapsedInitially
                }));
            }
            return (React.DOM.div({
                className: "map-gen-options"
            }, React.DOM.div({
                className: "map-gen-options-option-groups"
            }, optionGroups), React.DOM.div({
                className: "map-gen-options-buttons"
            }, React.DOM.button({
                className: "map-gen-options-button",
                onClick: this.randomizeOptions
            }, "randomize"), React.DOM.button({
                className: "map-gen-options-button",
                onClick: this.resetValuesToDefault
            }, "reset"))));
        };
        return MapGenOptionsComponent;
    }(React.Component));
    exports.MapGenOptionsComponent = MapGenOptionsComponent;
    var Factory = React.createFactory(MapGenOptionsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/MapSetup", ["require", "exports", "src/App", "src/uicomponents/setupgame/MapGenOptions"], function (require, exports, App_29, MapGenOptions_1) {
    "use strict";
    var MapSetupComponent = (function (_super) {
        __extends(MapSetupComponent, _super);
        function MapSetupComponent(props) {
            _super.call(this, props);
            this.displayName = "MapSetup";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        MapSetupComponent.prototype.bindMethods = function () {
            this.setTemplate = this.setTemplate.bind(this);
            this.getMapSetupInfo = this.getMapSetupInfo.bind(this);
            this.updatePlayerLimits = this.updatePlayerLimits.bind(this);
        };
        MapSetupComponent.prototype.getInitialStateTODO = function () {
            var mapGenTemplates = [];
            for (var template in App_29.default.moduleData.Templates.MapGen) {
                if (App_29.default.moduleData.Templates.MapGen[template].key) {
                    mapGenTemplates.push(App_29.default.moduleData.Templates.MapGen[template]);
                }
            }
            return ({
                templates: mapGenTemplates,
                selectedTemplate: mapGenTemplates[0]
            });
        };
        MapSetupComponent.prototype.componentDidMount = function () {
            this.updatePlayerLimits();
        };
        MapSetupComponent.prototype.updatePlayerLimits = function () {
            this.props.setPlayerLimits({
                min: this.state.selectedTemplate.minPlayers,
                max: this.state.selectedTemplate.maxPlayers
            });
        };
        MapSetupComponent.prototype.setTemplate = function (e) {
            var target = e.target;
            this.setState({
                selectedTemplate: App_29.default.moduleData.Templates.MapGen[target.value]
            }, this.updatePlayerLimits);
        };
        MapSetupComponent.prototype.getMapSetupInfo = function () {
            return ({
                template: this.state.selectedTemplate,
                optionValues: this.ref_TODO_mapGenOptions.getOptionValuesForTemplate()
            });
        };
        MapSetupComponent.prototype.render = function () {
            var _this = this;
            var mapGenTemplateOptions = [];
            for (var i = 0; i < this.state.templates.length; i++) {
                var template = this.state.templates[i];
                mapGenTemplateOptions.push(React.DOM.option({
                    value: template.key,
                    key: template.key,
                    title: template.description
                }, template.displayName));
            }
            return (React.DOM.div({
                className: "map-setup"
            }, React.DOM.select({
                className: "map-setup-template-selector",
                value: this.state.selectedTemplate.key,
                onChange: this.setTemplate
            }, mapGenTemplateOptions), React.DOM.div({
                className: "map-setup-player-limit"
            }, "Players: " + this.state.selectedTemplate.minPlayers + "-" +
                this.state.selectedTemplate.maxPlayers), React.DOM.div({
                className: "map-setup-description"
            }, this.state.selectedTemplate.description), MapGenOptions_1.default({
                mapGenTemplate: this.state.selectedTemplate,
                ref: function (component) {
                    _this.ref_TODO_mapGenOptions = component;
                }
            })));
        };
        return MapSetupComponent;
    }(React.Component));
    exports.MapSetupComponent = MapSetupComponent;
    var Factory = React.createFactory(MapSetupComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/setupgame/SetupGame", ["require", "exports", "src/App", "src/uicomponents/setupgame/SetupGamePlayers", "src/uicomponents/setupgame/MapSetup"], function (require, exports, App_30, SetupGamePlayers_1, MapSetup_1) {
    "use strict";
    var SetupGameComponent = (function (_super) {
        __extends(SetupGameComponent, _super);
        function SetupGameComponent(props) {
            _super.call(this, props);
            this.displayName = "SetupGame";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        SetupGameComponent.prototype.bindMethods = function () {
            this.startGame = this.startGame.bind(this);
            this.randomize = this.randomize.bind(this);
            this.setPlayerLimits = this.setPlayerLimits.bind(this);
        };
        SetupGameComponent.prototype.getInitialStateTODO = function () {
            return ({
                minPlayers: 1,
                maxPlayers: 5
            });
        };
        SetupGameComponent.prototype.setPlayerLimits = function (props) {
            this.setState({
                minPlayers: props.min,
                maxPlayers: props.max
            });
        };
        SetupGameComponent.prototype.startGame = function () {
            var players = this.ref_TODO_players.makeAllPlayers();
            var mapSetupInfo = this.ref_TODO_mapSetup.getMapSetupInfo();
            var mapGenFunction = mapSetupInfo.template.mapGenFunction;
            var mapGenResult = mapGenFunction(mapSetupInfo.optionValues, players);
            var map = mapGenResult.makeMap();
            App_30.default.makeGameFromSetup(map, players);
        };
        SetupGameComponent.prototype.randomize = function () {
            this.ref_TODO_players.randomizeAllPlayers();
            this.ref_TODO_mapSetup.ref_TODO_mapGenOptions.randomizeOptions();
        };
        SetupGameComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "setup-game-wrapper"
            }, React.DOM.div({
                className: "setup-game"
            }, React.DOM.div({
                className: "setup-game-options"
            }, SetupGamePlayers_1.default({
                ref: function (component) {
                    _this.ref_TODO_players = component;
                },
                minPlayers: this.state.minPlayers,
                maxPlayers: this.state.maxPlayers
            }), MapSetup_1.default({
                setPlayerLimits: this.setPlayerLimits,
                ref: function (component) {
                    _this.ref_TODO_mapSetup = component;
                }
            })), React.DOM.div({
                className: "setup-game-buttons"
            }, React.DOM.button({
                className: "setup-game-button setup-game-button-randomize",
                onClick: this.randomize
            }, "Randomize"), React.DOM.button({
                className: "setup-game-button setup-game-button-start",
                onClick: this.startGame
            }, "Start game")))));
        };
        return SetupGameComponent;
    }(React.Component));
    exports.SetupGameComponent = SetupGameComponent;
    var Factory = React.createFactory(SetupGameComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/TurnOrder", ["require", "exports"], function (require, exports) {
    "use strict";
    var TurnOrderComponent = (function (_super) {
        __extends(TurnOrderComponent, _super);
        function TurnOrderComponent(props) {
            _super.call(this, props);
            this.displayName = "TurnOrder";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        TurnOrderComponent.prototype.bindMethods = function () {
            this.setMaxUnits = this.setMaxUnits.bind(this);
        };
        TurnOrderComponent.prototype.getInitialStateTODO = function () {
            return ({
                maxUnits: 7
            });
        };
        TurnOrderComponent.prototype.componentDidMount = function () {
            this.setMaxUnits();
            window.addEventListener("resize", this.setMaxUnits);
        };
        TurnOrderComponent.prototype.componentWillUnmount = function () {
            window.removeEventListener("resize", this.setMaxUnits);
        };
        TurnOrderComponent.prototype.setMaxUnits = function () {
            var minUnits = 7;
            var containerElement = ReactDOM.findDOMNode(this);
            var containerWidth = containerElement.getBoundingClientRect().width - 30;
            var unitElementWidth = 160;
            var ceil = Math.ceil(containerWidth / unitElementWidth);
            this.setState({
                maxUnits: Math.max(ceil, minUnits)
            });
        };
        TurnOrderComponent.prototype.render = function () {
            var _this = this;
            var needsExtraSpaceForGhost = this.props.turnOrderDisplayData.some(function (d, i) {
                return d.isGhost && i < _this.state.maxUnits;
            });
            var maxUnitsWithGhost = needsExtraSpaceForGhost ? this.state.maxUnits + 1 : this.state.maxUnits;
            var filteredTurnOrderDisplayData = this.props.turnOrderDisplayData.filter(function (d, i) {
                return i < maxUnitsWithGhost || d.isGhost;
            });
            var toRender = [];
            for (var i = 0; i < filteredTurnOrderDisplayData.length; i++) {
                var displayData = filteredTurnOrderDisplayData[i];
                if (displayData.isGhost) {
                    toRender.push(React.DOM.div({
                        className: "turn-order-arrow",
                        key: "" + i
                    }));
                    continue;
                }
                var data = {
                    key: "" + i,
                    className: "turn-order-unit",
                    title: "delay: " + displayData.moveDelay + "\n",
                    onMouseEnter: this.props.onMouseEnterUnit.bind(null, displayData.unit),
                    onMouseLeave: this.props.onMouseLeaveUnit
                };
                if (this.props.unitsBySide.side1.indexOf(displayData.unit) > -1) {
                    data.className += " turn-order-unit-friendly";
                }
                else {
                    data.className += " turn-order-unit-enemy";
                }
                if (this.props.hoveredUnit && displayData.unit === this.props.hoveredUnit) {
                    data.className += " turn-order-unit-hover";
                }
                toRender.push(React.DOM.div(data, displayData.unit.name));
            }
            return (React.DOM.div({ className: "turn-order-container" }, toRender));
        };
        return TurnOrderComponent;
    }(React.Component));
    exports.TurnOrderComponent = TurnOrderComponent;
    var Factory = React.createFactory(TurnOrderComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/TurnCounter", ["require", "exports"], function (require, exports) {
    "use strict";
    var TurnCounterComponent = (function (_super) {
        __extends(TurnCounterComponent, _super);
        function TurnCounterComponent(props) {
            _super.call(this, props);
            this.displayName = "TurnCounter";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
        }
        TurnCounterComponent.prototype.render = function () {
            var turnsLeft = this.props.turnsLeft;
            var turns = [];
            var usedTurns = this.props.maxTurns - turnsLeft;
            for (var i = 0; i < usedTurns; i++) {
                turns.push(React.DOM.div({
                    key: "used" + i,
                    className: "turn-counter used-turn"
                }));
            }
            for (var i = 0; i < turnsLeft; i++) {
                turns.push(React.DOM.div({
                    key: "available" + i,
                    className: "turn-counter available-turn"
                }));
            }
            return (React.DOM.div({
                className: "turns-container",
                title: "Turns left: " + turnsLeft
            }, turns));
        };
        return TurnCounterComponent;
    }(React.Component));
    exports.TurnCounterComponent = TurnCounterComponent;
    var Factory = React.createFactory(TurnCounterComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/BattleScore", ["require", "exports", "src/uicomponents/PlayerFlag"], function (require, exports, PlayerFlag_4) {
    "use strict";
    var BattleScoreComponent = (function (_super) {
        __extends(BattleScoreComponent, _super);
        function BattleScoreComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleScore";
        }
        BattleScoreComponent.prototype.shouldComponentUpdate = function (newProps) {
            var oldEvaluation = this.lastEvaluation;
            this.lastEvaluation = newProps.battle.getEvaluation();
            return this.lastEvaluation !== oldEvaluation;
        };
        BattleScoreComponent.prototype.componentWillMount = function () {
            this.lastEvaluation = this.props.battle.getEvaluation();
        };
        BattleScoreComponent.prototype.render = function () {
            var battle = this.props.battle;
            var evaluation = this.lastEvaluation;
            var evaluationPercentage = 50 + evaluation * 50;
            return (React.DOM.div({
                className: "battle-score-wrapper"
            }, React.DOM.div({
                className: "battle-score-container"
            }, React.DOM.img({
                className: "battle-score-mid-point",
                src: "img/icons/battleScoreMidPoint.png"
            }, null), PlayerFlag_4.default({
                props: {
                    className: "battle-score-flag"
                },
                flag: battle.side1Player.flag
            }), React.DOM.div({
                className: "battle-score-bar-container"
            }, React.DOM.div({
                className: "battle-score-bar-value battle-score-bar-side1",
                style: {
                    width: "" + evaluationPercentage + "%",
                    backgroundColor: "#" + battle.side1Player.color.getHexString(),
                    borderColor: "#" + battle.side1Player.secondaryColor.getHexString()
                }
            }), React.DOM.div({
                className: "battle-score-bar-value battle-score-bar-side2",
                style: {
                    width: "" + (100 - evaluationPercentage) + "%",
                    backgroundColor: "#" + battle.side2Player.color.getHexString(),
                    borderColor: "#" + battle.side2Player.secondaryColor.getHexString()
                }
            })), PlayerFlag_4.default({
                props: {
                    className: "battle-score-flag"
                },
                flag: battle.side2Player.flag
            }))));
        };
        return BattleScoreComponent;
    }(React.Component));
    exports.BattleScoreComponent = BattleScoreComponent;
    var Factory = React.createFactory(BattleScoreComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/battlesceneflag", ["require", "exports"], function (require, exports) {
    "use strict";
    var BattleSceneFlagComponent = (function (_super) {
        __extends(BattleSceneFlagComponent, _super);
        function BattleSceneFlagComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleSceneFlag";
            this.flagCanvas = null;
            this.bindMethods();
        }
        BattleSceneFlagComponent.prototype.bindMethods = function () {
            this.handleResize = this.handleResize.bind(this);
            this.setFlag = this.setFlag.bind(this);
            this.drawFlag = this.drawFlag.bind(this);
        };
        BattleSceneFlagComponent.prototype.componentDidMount = function () {
            this.setFlag();
            window.addEventListener("resize", this.handleResize, false);
        };
        BattleSceneFlagComponent.prototype.componentWillUnmount = function () {
            window.removeEventListener("resize", this.handleResize);
        };
        BattleSceneFlagComponent.prototype.handleResize = function () {
            this.setFlag();
        };
        BattleSceneFlagComponent.prototype.setFlag = function () {
            var DOMNode = ReactDOM.findDOMNode(this);
            if (this.flagCanvas) {
                DOMNode.removeChild(this.flagCanvas);
            }
            this.flagCanvas = this.drawFlag();
            ReactDOM.findDOMNode(this).appendChild(this.flagCanvas);
        };
        BattleSceneFlagComponent.prototype.drawFlag = function () {
            var bounds = ReactDOM.findDOMNode(this).getBoundingClientRect();
            var width = bounds.width;
            var canvas = this.props.flag.getCanvas(width, bounds.height, true, false);
            var context = canvas.getContext("2d");
            context.globalCompositeOperation = "destination-out";
            var gradient;
            if (this.props.facingRight) {
                gradient = context.createLinearGradient(0, 0, width, 0);
            }
            else {
                gradient = context.createLinearGradient(width, 0, 0, 0);
            }
            gradient.addColorStop(0.0, "rgba(255, 255, 255, 0.3)");
            gradient.addColorStop(0.6, "rgba(255, 255, 255, 0.5)");
            gradient.addColorStop(0.8, "rgba(255, 255, 255, 0.8)");
            gradient.addColorStop(1.0, "rgba(255, 255, 255, 1.0)");
            context.fillStyle = gradient;
            context.fillRect(0, 0, width, bounds.height);
            canvas.classList.add("battle-scene-start-player-flag");
            return canvas;
        };
        BattleSceneFlagComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "battle-scene-flag-container"
            }, null));
        };
        return BattleSceneFlagComponent;
    }(React.Component));
    exports.BattleSceneFlagComponent = BattleSceneFlagComponent;
    var Factory = React.createFactory(BattleSceneFlagComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/BattleScene", ["require", "exports", "src/BattleScene", "src/uicomponents/battle/battlesceneflag"], function (require, exports, BattleScene_2, BattleSceneFlag_1) {
    "use strict";
    var bs;
    var BattleSceneComponent = (function (_super) {
        __extends(BattleSceneComponent, _super);
        function BattleSceneComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleScene";
        }
        BattleSceneComponent.prototype.shouldComponentUpdate = function (newProps) {
            var shouldTriggerUpdate = {
                battleState: true
            };
            for (var key in newProps) {
                if (shouldTriggerUpdate[key] && newProps[key] !== this.props[key]) {
                    return true;
                }
            }
            return false;
        };
        BattleSceneComponent.prototype.componentWillReceiveProps = function (newProps) {
            bs = this;
            var self = this;
            if (this.props.battleState === "start" && newProps.battleState === "active") {
                this.battleScene = new BattleScene_2.default(ReactDOM.findDOMNode(this));
                this.battleScene.resume();
            }
            else if (this.props.battleState === "active" && newProps.battleState === "finish") {
                this.battleScene.destroy();
                this.battleScene = null;
            }
            var battleScene = this.battleScene;
            if (battleScene) {
                var activeSFXChanged = newProps.activeSFX !== this.props.activeSFX;
                var shouldPlaySFX = Boolean(newProps.activeSFX &&
                    (activeSFXChanged ||
                        newProps.targetUnit !== this.props.targetUnit ||
                        newProps.userUnit !== this.props.userUnit));
                if (shouldPlaySFX) {
                    battleScene.handleAbilityUse({
                        user: newProps.userUnit,
                        target: newProps.targetUnit,
                        SFXTemplate: newProps.activeSFX,
                        afterFinishedCallback: newProps.afterAbilityFinishedCallback,
                        triggerEffectCallback: newProps.triggerEffectCallback
                    });
                }
                else if (activeSFXChanged) {
                    battleScene.clearActiveSFX();
                }
                var unitsHaveUpdated = false;
                [
                    "targetUnit",
                    "userUnit",
                    "activeUnit",
                    "hoveredUnit"
                ].forEach(function (unitKey) {
                    if (battleScene[unitKey] !== newProps[unitKey]) {
                        unitsHaveUpdated = true;
                    }
                    battleScene[unitKey] = newProps[unitKey];
                });
                if (unitsHaveUpdated && !shouldPlaySFX && !newProps.activeSFX) {
                    battleScene.updateUnits();
                }
            }
        };
        BattleSceneComponent.prototype.render = function () {
            var componentToRender;
            switch (this.props.battleState) {
                case "start":
                    {
                        componentToRender = React.DOM.div({
                            className: "battle-scene-flags-container"
                        }, BattleSceneFlag_1.default({
                            flag: this.props.side1Player.flag,
                            facingRight: true
                        }), BattleSceneFlag_1.default({
                            flag: this.props.side2Player.flag,
                            facingRight: false
                        }));
                        break;
                    }
                case "active":
                    {
                        componentToRender = null;
                        break;
                    }
                case "finish":
                    {
                        componentToRender = React.DOM.div({
                            className: "battle-scene-finish-container"
                        }, React.DOM.h1({
                            className: "battle-scene-finish-header"
                        }, this.props.humanPlayerWonBattle ? "You win" : "You lose"), React.DOM.h3({
                            className: "battle-scene-finish-subheader"
                        }, "Click to continue"));
                        break;
                    }
            }
            return (React.DOM.div({
                className: "battle-scene"
            }, componentToRender));
        };
        return BattleSceneComponent;
    }(React.Component));
    exports.BattleSceneComponent = BattleSceneComponent;
    var Factory = React.createFactory(BattleSceneComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/BattleDisplayStrength", ["require", "exports"], function (require, exports) {
    "use strict";
    var BattleDisplayStrengthComponent = (function (_super) {
        __extends(BattleDisplayStrengthComponent, _super);
        function BattleDisplayStrengthComponent(props) {
            _super.call(this, props);
            this.displayName = "BattleDisplayStrength";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        BattleDisplayStrengthComponent.prototype.bindMethods = function () {
            this.updateDisplayStrength = this.updateDisplayStrength.bind(this);
            this.animateDisplayedStrength = this.animateDisplayedStrength.bind(this);
        };
        BattleDisplayStrengthComponent.prototype.getInitialStateTODO = function () {
            return ({
                displayedStrength: this.props.from,
            });
        };
        BattleDisplayStrengthComponent.prototype.componentDidMount = function () {
            this.animateDisplayedStrength(this.props.from, this.props.to, this.props.delay);
        };
        BattleDisplayStrengthComponent.prototype.componentWillUnmount = function () {
            if (this.activeTween) {
                this.activeTween.stop();
            }
        };
        BattleDisplayStrengthComponent.prototype.updateDisplayStrength = function (newAmount) {
            this.setState({
                displayedStrength: newAmount
            });
        };
        BattleDisplayStrengthComponent.prototype.animateDisplayedStrength = function (from, newAmount, time) {
            var self = this;
            var stopped = false;
            if (this.activeTween) {
                this.activeTween.stop();
            }
            if (from === newAmount)
                return;
            var animateTween = function () {
                if (stopped) {
                    return;
                }
                TWEEN.update();
                self.animationFrameHandle = window.requestAnimationFrame(animateTween);
            };
            var tween = new TWEEN.Tween({
                health: from
            }).to({
                health: newAmount
            }, time).onUpdate(function () {
                self.setState({
                    displayedStrength: this.health
                });
            }).easing(TWEEN.Easing.Sinusoidal.Out);
            tween.onStop(function () {
                cancelAnimationFrame(self.animationFrameHandle);
                stopped = true;
                TWEEN.remove(tween);
            });
            this.activeTween = tween;
            tween.start();
            animateTween();
        };
        BattleDisplayStrengthComponent.prototype.render = function () {
            return (React.DOM.div({ className: "unit-strength-battle-display" }, Math.ceil(this.state.displayedStrength)));
        };
        return BattleDisplayStrengthComponent;
    }(React.Component));
    exports.BattleDisplayStrengthComponent = BattleDisplayStrengthComponent;
    var Factory = React.createFactory(BattleDisplayStrengthComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/AbilityTooltip", ["require", "exports"], function (require, exports) {
    "use strict";
    var AbilityTooltipComponent = (function (_super) {
        __extends(AbilityTooltipComponent, _super);
        function AbilityTooltipComponent(props) {
            _super.call(this, props);
            this.displayName = "AbilityTooltip";
        }
        AbilityTooltipComponent.prototype.shouldComponentUpdate = function (newProps) {
            for (var prop in newProps) {
                if (prop !== "activeTargets") {
                    if (this.props[prop] !== newProps[prop]) {
                        return true;
                    }
                }
            }
            return false;
        };
        AbilityTooltipComponent.prototype.render = function () {
            var abilities = this.props.activeTargets[this.props.targetUnit.id];
            var abilityElements = [];
            var containerProps = {
                className: "ability-tooltip",
                onMouseLeave: this.props.handleMouseLeave
            };
            var parentRect = this.props.parentElement.getBoundingClientRect();
            containerProps.style =
                {
                    position: "fixed",
                    top: parentRect.top
                };
            if (this.props.facesLeft) {
                containerProps.className += " ability-tooltip-faces-left";
                containerProps.style.left = parentRect.left;
            }
            else {
                containerProps.className += " ability-tooltip-faces-right";
                containerProps.style.left = parentRect.right - 128;
            }
            for (var i = 0; i < abilities.length; i++) {
                var ability = abilities[i];
                var data = {};
                data.className = "ability-tooltip-ability";
                data.key = i;
                data.onClick = this.props.handleAbilityUse.bind(null, ability, this.props.targetUnit);
                data.onMouseEnter = this.props.handleMouseEnterAbility.bind(null, ability);
                data.onMouseLeave = this.props.handleMouseLeaveAbility;
                if (ability.description) {
                    data.title = ability.description;
                }
                abilityElements.push(React.DOM.div(data, ability.displayName));
            }
            return (React.DOM.div(containerProps, abilityElements));
        };
        return AbilityTooltipComponent;
    }(React.Component));
    exports.AbilityTooltipComponent = AbilityTooltipComponent;
    var Factory = React.createFactory(AbilityTooltipComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/battle/Battle", ["require", "exports", "src/uicomponents/battle/TurnOrder", "src/uicomponents/battle/TurnCounter", "src/uicomponents/battle/BattleBackground", "src/MCTree", "src/battleAbilityTargeting", "src/uicomponents/battle/BattleScore", "src/uicomponents/battle/BattleScene", "src/uicomponents/battle/Formation", "src/uicomponents/battle/BattleDisplayStrength", "src/uicomponents/battle/AbilityTooltip"], function (require, exports, TurnOrder_1, TurnCounter_1, BattleBackground_2, MCTree_2, battleAbilityTargeting_3, BattleScore_1, BattleScene_3, Formation_2, BattleDisplayStrength_1, AbilityTooltip_1) {
    "use strict";
    var BattleComponent = (function (_super) {
        __extends(BattleComponent, _super);
        function BattleComponent(props) {
            _super.call(this, props);
            this.displayName = "Battle";
            this.tempHoveredUnit = null;
            this.idGenerator = 0;
            this.MCTree = null;
            this.battleStartStartTime = undefined;
            this.battleEndStartTime = undefined;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        BattleComponent.prototype.bindMethods = function () {
            this.clearHoveredUnit = this.clearHoveredUnit.bind(this);
            this.getBlurArea = this.getBlurArea.bind(this);
            this.handleMouseEnterUnit = this.handleMouseEnterUnit.bind(this);
            this.clearBattleEffect = this.clearBattleEffect.bind(this);
            this.handleMouseEnterAbility = this.handleMouseEnterAbility.bind(this);
            this.usePreparedAbility = this.usePreparedAbility.bind(this);
            this.useAIAbility = this.useAIAbility.bind(this);
            this.handleMouseLeaveAbility = this.handleMouseLeaveAbility.bind(this);
            this.handleTurnEnd = this.handleTurnEnd.bind(this);
            this.handleMouseLeaveUnit = this.handleMouseLeaveUnit.bind(this);
            this.setBattleSceneUnits = this.setBattleSceneUnits.bind(this);
            this.usePlayerAbility = this.usePlayerAbility.bind(this);
            this.endBattleStart = this.endBattleStart.bind(this);
            this.getUnitElement = this.getUnitElement.bind(this);
            this.handleAbilityUse = this.handleAbilityUse.bind(this);
            this.playBattleEffect = this.playBattleEffect.bind(this);
            this.finishBattle = this.finishBattle.bind(this);
        };
        BattleComponent.prototype.getInitialStateTODO = function () {
            return ({
                abilityTooltip: {
                    parentElement: null,
                    facesLeft: null
                },
                targetsInPotentialArea: [],
                potentialDelayID: undefined,
                potentialDelayAmount: undefined,
                hoveredAbility: null,
                targetUnit: null,
                userUnit: null,
                hoveredUnit: null,
                highlightedUnit: null,
                battleSceneUnit1StartingStrength: null,
                battleSceneUnit2StartingStrength: null,
                battleSceneUnit1: null,
                battleSceneUnit2: null,
                playingBattleEffect: false,
                battleEffectDuration: null,
                battleEffectSFX: null,
                afterAbilityFinishedCallback: null,
                triggerEffectCallback: null,
                battleIsStarting: true
            });
        };
        BattleComponent.prototype.componentDidMount = function () {
            this.battleStartStartTime = Date.now();
        };
        BattleComponent.prototype.endBattleStart = function () {
            if (Date.now() < this.battleStartStartTime + 1000)
                return;
            this.setState({
                battleIsStarting: false
            }, this.setBattleSceneUnits.bind(this, this.state.hoveredUnit));
            if (this.props.battle.getActivePlayer() !== this.props.humanPlayer) {
                this.useAIAbility();
            }
        };
        BattleComponent.prototype.getBlurArea = function () {
            return ReactDOM.findDOMNode(this.ref_TODO_formationsContainer).getBoundingClientRect();
        };
        BattleComponent.prototype.clearHoveredUnit = function () {
            this.tempHoveredUnit = null;
            this.setState({
                hoveredUnit: null,
                highlightedUnit: null,
                abilityTooltip: {
                    parentElement: null
                },
                hoveredAbility: null,
                potentialDelayID: undefined,
                potentialDelayAmount: undefined,
                targetsInPotentialArea: []
            });
            this.setBattleSceneUnits(null);
        };
        BattleComponent.prototype.handleMouseLeaveUnit = function (e) {
            if (!this.state.hoveredUnit || this.state.playingBattleEffect) {
                this.tempHoveredUnit = null;
                return;
            }
            var nativeEvent = e.nativeEvent;
            var toElement = nativeEvent.toElement || nativeEvent.relatedTarget;
            if (!toElement) {
                this.clearHoveredUnit();
                return;
            }
            if (!this.ref_TODO_abilityTooltip) {
                this.clearHoveredUnit();
                return;
            }
            var tooltipElement = ReactDOM.findDOMNode(this.ref_TODO_abilityTooltip);
            if (toElement !== this.state.abilityTooltip.parentElement &&
                (this.ref_TODO_abilityTooltip && toElement !== tooltipElement) &&
                toElement.parentElement !== tooltipElement) {
                this.clearHoveredUnit();
            }
        };
        BattleComponent.prototype.handleMouseEnterUnit = function (unit) {
            this.tempHoveredUnit = unit;
            if (this.props.battle.ended || this.state.playingBattleEffect)
                return;
            var facesLeft = unit.battleStats.side === "side2";
            var parentElement = this.getUnitElement(unit);
            this.setState({
                abilityTooltip: {
                    parentElement: parentElement,
                    facesLeft: facesLeft
                },
                hoveredUnit: unit,
                highlightedUnit: unit
            });
            this.setBattleSceneUnits(unit);
        };
        BattleComponent.prototype.getUnitElement = function (unit) {
            return document.getElementById("unit-id_" + unit.id);
        };
        BattleComponent.prototype.setBattleSceneUnits = function (hoveredUnit) {
            if (this.state.playingBattleEffect)
                return;
            var activeUnit = this.props.battle.activeUnit;
            if (!activeUnit) {
                this.setState({
                    battleSceneUnit1: null,
                    battleSceneUnit2: null
                });
                return;
            }
            var shouldDisplayHovered = (hoveredUnit &&
                hoveredUnit.battleStats.side !== activeUnit.battleStats.side);
            var unit1, unit2;
            if (activeUnit.battleStats.side === "side1") {
                unit1 = activeUnit;
                unit2 = shouldDisplayHovered ? hoveredUnit : null;
            }
            else {
                unit1 = shouldDisplayHovered ? hoveredUnit : null;
                unit2 = activeUnit;
            }
            this.setState({
                battleSceneUnit1: unit1,
                battleSceneUnit2: unit2
            });
        };
        BattleComponent.prototype.handleAbilityUse = function (ability, target, wasByPlayer) {
        };
        BattleComponent.prototype.playBattleEffect = function (abilityData, i) {
        };
        BattleComponent.prototype.clearBattleEffect = function () {
            var newHoveredUnit = null;
            if (this.tempHoveredUnit && this.tempHoveredUnit.isActiveInBattle()) {
                newHoveredUnit = this.tempHoveredUnit;
                this.tempHoveredUnit = null;
            }
            var afterStateUpdateCallback = newHoveredUnit ?
                this.handleMouseEnterUnit.bind(this, newHoveredUnit) : this.clearHoveredUnit;
            this.setState({
                playingBattleEffect: false,
                battleEffectDuration: null,
                battleEffectSFX: null,
                afterAbilityFinishedCallback: null,
                triggerEffectCallback: null,
                hoveredUnit: null,
                highlightedUnit: null,
                targetUnit: null,
                userUnit: null
            }, afterStateUpdateCallback);
        };
        BattleComponent.prototype.handleTurnEnd = function () {
            if (this.state.hoveredUnit && this.state.hoveredUnit.isTargetable()) {
                this.forceUpdate();
            }
            else {
                this.clearHoveredUnit();
            }
            this.props.battle.endTurn();
            this.setBattleSceneUnits(this.state.hoveredUnit);
            if (this.props.battle.activeUnit && this.props.battle.activeUnit.battleStats.queuedAction) {
                this.usePreparedAbility();
            }
            else if (this.props.battle.getActivePlayer() !== this.props.humanPlayer) {
                this.useAIAbility();
            }
        };
        BattleComponent.prototype.usePreparedAbility = function () {
            var unit = this.props.battle.activeUnit;
            var action = unit.battleStats.queuedAction;
            var target = this.props.battle.unitsById[action.targetId];
            var userIsHuman = this.props.battle.getActivePlayer() === this.props.humanPlayer;
            this.handleAbilityUse(action.ability, target, userIsHuman);
        };
        BattleComponent.prototype.usePlayerAbility = function (ability, target) {
            this.handleAbilityUse(ability, target, true);
        };
        BattleComponent.prototype.useAIAbility = function () {
            if (!this.props.battle.activeUnit || this.props.battle.ended)
                return;
            if (!this.MCTree)
                this.MCTree = new MCTree_2.default(this.props.battle, this.props.battle.activeUnit.battleStats.side, false);
            var move = this.MCTree.getBestMoveAndAdvance(1000);
            var target = this.props.battle.unitsById[move.targetId];
            this.handleAbilityUse(move.ability, target, false);
        };
        BattleComponent.prototype.finishBattle = function () {
            if (Date.now() < this.battleEndStartTime + 1000)
                return;
            var battle = this.props.battle;
            if (!battle.ended)
                throw new Error();
            battle.finishBattle();
        };
        BattleComponent.prototype.handleMouseEnterAbility = function (ability) {
            var abilityUseDelay = ability.preparation ?
                ability.preparation.prepDelay * ability.preparation.turnsToPrep :
                ability.moveDelay;
            this.setState({
                hoveredAbility: ability,
                potentialDelayID: this.props.battle.activeUnit.id,
                potentialDelayAmount: this.props.battle.activeUnit.battleStats.moveDelay + abilityUseDelay,
            });
        };
        BattleComponent.prototype.handleMouseLeaveAbility = function () {
            this.setState({
                hoveredAbility: null,
                potentialDelayID: undefined,
                potentialDelayAmount: undefined,
                targetsInPotentialArea: []
            });
        };
        BattleComponent.prototype.render = function () {
            var _this = this;
            var battle = this.props.battle;
            if (!battle.ended) {
                var activeTargets = battleAbilityTargeting_3.getTargetsForAllAbilities(battle, battle.activeUnit);
            }
            var abilityTooltip = null;
            if (!battle.ended &&
                !this.state.playingBattleEffect &&
                this.state.hoveredUnit &&
                activeTargets[this.state.hoveredUnit.id]) {
                abilityTooltip = AbilityTooltip_1.default({
                    handleAbilityUse: this.usePlayerAbility,
                    handleMouseLeave: this.handleMouseLeaveUnit,
                    handleMouseEnterAbility: this.handleMouseEnterAbility,
                    handleMouseLeaveAbility: this.handleMouseLeaveAbility,
                    targetUnit: this.state.hoveredUnit,
                    parentElement: this.state.abilityTooltip.parentElement,
                    facesLeft: this.state.abilityTooltip.facesLeft,
                    activeTargets: activeTargets,
                    ref: function (component) {
                        _this.ref_TODO_abilityTooltip = component;
                    },
                    key: this.state.hoveredUnit.id
                });
            }
            ;
            var activeEffectUnits = [];
            if (this.state.playingBattleEffect) {
                activeEffectUnits = [this.state.battleSceneUnit1, this.state.battleSceneUnit2];
            }
            var upperFooterElement;
            if (this.state.battleIsStarting) {
                upperFooterElement = null;
            }
            else if (!this.state.playingBattleEffect) {
                var turnOrderDisplayData = battle.turnOrder.getDisplayData(this.state.potentialDelayAmount, this.state.potentialDelayID);
                upperFooterElement = TurnOrder_1.default({
                    key: "turnOrder",
                    turnOrderDisplayData: turnOrderDisplayData,
                    unitsBySide: battle.unitsBySide,
                    hoveredUnit: this.state.highlightedUnit,
                    onMouseEnterUnit: this.handleMouseEnterUnit,
                    onMouseLeaveUnit: this.handleMouseLeaveUnit
                });
            }
            else {
                upperFooterElement = React.DOM.div({
                    key: "battleDisplayStrength",
                    className: "battle-display-strength-container"
                }, React.DOM.div({
                    className: "battle-display-strength battle-display-strength-side1"
                }, this.state.battleSceneUnit1 ? BattleDisplayStrength_1.default({
                    key: "" + this.state.battleSceneUnit1.id + Date.now(),
                    delay: this.state.battleEffectDuration,
                    from: this.state.battleSceneUnit1StartingStrength,
                    to: this.state.battleSceneUnit1.currentHealth
                }) : null), React.DOM.div({
                    className: "battle-display-strength battle-display-strength-side2"
                }, this.state.battleSceneUnit2 ? BattleDisplayStrength_1.default({
                    key: "" + this.state.battleSceneUnit2.id + Date.now(),
                    delay: this.state.battleEffectDuration,
                    from: this.state.battleSceneUnit2StartingStrength,
                    to: this.state.battleSceneUnit2.currentHealth
                }) : null));
            }
            var upperFooter = upperFooterElement;
            var overlayContainer = null;
            var playerWonBattle = null;
            if (this.state.battleIsStarting) {
                overlayContainer = React.DOM.div({
                    className: "battle-start-overlay",
                    onClick: this.endBattleStart
                });
            }
            else if (battle.ended) {
                if (!this.battleEndStartTime)
                    this.battleEndStartTime = Date.now();
                overlayContainer = React.DOM.div({
                    className: "battle-start-overlay",
                    onClick: this.finishBattle
                });
                playerWonBattle = this.props.humanPlayer === battle.getVictor();
            }
            var battleState;
            if (this.state.battleIsStarting) {
                battleState = "start";
            }
            else if (battle.ended) {
                battleState = "finish";
            }
            else {
                battleState = "active";
            }
            return (BattleBackground_2.default({
                renderer: this.props.renderer,
                backgroundSeed: this.props.battle.battleData.location.getSeed(),
                getBlurArea: this.getBlurArea
            }, React.DOM.div({
                className: "battle-container"
            }, overlayContainer, React.DOM.div({
                className: "battle-upper"
            }, BattleScore_1.default({
                battle: battle
            }), upperFooter, BattleScene_3.default({
                battleState: battleState,
                targetUnit: this.state.targetUnit,
                userUnit: this.state.userUnit,
                activeUnit: battle.activeUnit,
                hoveredUnit: this.state.hoveredUnit,
                activeSFX: this.state.battleEffectSFX,
                afterAbilityFinishedCallback: this.state.afterAbilityFinishedCallback,
                triggerEffectCallback: this.state.triggerEffectCallback,
                humanPlayerWonBattle: playerWonBattle,
                side1Player: battle.side1Player,
                side2Player: battle.side2Player
            })), React.DOM.div({
                className: "formations-container",
                ref: function (container) {
                    _this.ref_TODO_formationsContainer = container;
                }
            }, Formation_2.default({
                battle: battle,
                formation: battle.side1,
                facesLeft: false,
                activeUnit: battle.activeUnit,
                hoveredUnit: this.state.highlightedUnit,
                hoveredAbility: this.state.hoveredAbility,
                activeTargets: activeTargets,
                targetsInPotentialArea: this.state.targetsInPotentialArea,
                handleMouseEnterUnit: this.handleMouseEnterUnit,
                handleMouseLeaveUnit: this.handleMouseLeaveUnit,
                activeEffectUnits: activeEffectUnits
            }), TurnCounter_1.default({
                turnsLeft: battle.turnsLeft,
                maxTurns: battle.maxTurns
            }), Formation_2.default({
                battle: battle,
                formation: battle.side2,
                facesLeft: true,
                activeUnit: battle.activeUnit,
                hoveredUnit: this.state.highlightedUnit,
                hoveredAbility: this.state.hoveredAbility,
                activeTargets: activeTargets,
                targetsInPotentialArea: this.state.targetsInPotentialArea,
                handleMouseEnterUnit: this.handleMouseEnterUnit,
                handleMouseLeaveUnit: this.handleMouseLeaveUnit,
                activeEffectUnits: activeEffectUnits
            }), abilityTooltip, this.state.playingBattleEffect ?
                React.DOM.div({ className: "battle-formations-darken" }, null) :
                null))));
        };
        return BattleComponent;
    }(React.Component));
    exports.BattleComponent = BattleComponent;
    var Factory = React.createFactory(BattleComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/mapmodes/MapRendererLayersListItem", ["require", "exports", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, DragPositioner_7, applyMixins_9) {
    "use strict";
    var MapRendererLayersListItemComponent = (function (_super) {
        __extends(MapRendererLayersListItemComponent, _super);
        function MapRendererLayersListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "MapRendererLayersListItem";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.state = this.getInitialStateTODO();
            this.bindMethods();
            this.dragPositioner = new DragPositioner_7.default(this, this.props.dragPositionerProps);
            this.dragPositioner.onDragStart = this.onDragStart;
            this.dragPositioner.onDragMove = this.onDragMove;
            this.dragPositioner.onDragEnd = this.onDragEnd;
            applyMixins_9.default(this, this.dragPositioner);
        }
        MapRendererLayersListItemComponent.prototype.bindMethods = function () {
            this.onDragEnd = this.onDragEnd.bind(this);
            this.handleHover = this.handleHover.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
            this.onDragMove = this.onDragMove.bind(this);
            this.clearHover = this.clearHover.bind(this);
            this.setLayerAlpha = this.setLayerAlpha.bind(this);
        };
        MapRendererLayersListItemComponent.prototype.getInitialStateTODO = function () {
            return ({
                hoverSide: null
            });
        };
        MapRendererLayersListItemComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.listItemIsDragging !== this.props.listItemIsDragging) {
                this.cachedMidPoint = undefined;
                this.clearHover();
            }
        };
        MapRendererLayersListItemComponent.prototype.onDragStart = function () {
            this.props.onDragStart(this.props.layer);
        };
        MapRendererLayersListItemComponent.prototype.onDragMove = function (x, y) {
            this.dragPositioner.dragPos.y = y;
            this.dragPositioner.updateDOMNodeStyle();
        };
        MapRendererLayersListItemComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        MapRendererLayersListItemComponent.prototype.handleHover = function (e) {
            if (!this.cachedMidPoint) {
                var rect = ReactDOM.findDOMNode(this).getBoundingClientRect();
                this.cachedMidPoint = rect.top + rect.height / 2;
            }
            var isAbove = e.clientY < this.cachedMidPoint;
            var hoverSide = isAbove ? "top" : "bottom";
            this.setState({
                hoverSide: hoverSide
            });
            this.props.setHoverPosition(this.props.layer, hoverSide);
        };
        MapRendererLayersListItemComponent.prototype.clearHover = function () {
            this.setState({
                hoverSide: null
            });
        };
        MapRendererLayersListItemComponent.prototype.setLayerAlpha = function (e) {
            var target = e.target;
            var value = parseFloat(target.value);
            if (isFinite(value)) {
                this.props.updateLayer(this.props.layer);
                this.props.layer.alpha = value;
            }
            this.forceUpdate();
        };
        MapRendererLayersListItemComponent.prototype.render = function () {
            var divProps = {
                className: "map-renderer-layers-list-item draggable draggable-container",
                onMouseDown: this.dragPositioner.handleReactDownEvent,
                onTouchStart: this.dragPositioner.handleReactDownEvent
            };
            if (this.dragPositioner.isDragging) {
                divProps.style = this.dragPositioner.getStyleAttributes();
                divProps.className += " dragging";
            }
            if (this.props.listItemIsDragging) {
                divProps.onMouseMove = this.handleHover;
                divProps.onMouseLeave = this.clearHover;
                if (this.state.hoverSide) {
                    divProps.className += " insert-" + this.state.hoverSide;
                }
            }
            return (React.DOM.li(divProps, React.DOM.input({
                type: "checkbox",
                className: "map-renderer-layers-list-item-checkbox",
                checked: this.props.isActive,
                onChange: this.props.toggleActive
            }), React.DOM.span({
                className: "map-renderer-layers-list-item-name draggable-container"
            }, this.props.layerName), React.DOM.input({
                className: "map-renderer-layers-list-item-alpha",
                type: "number",
                min: 0,
                max: 1,
                step: 0.05,
                value: "" + this.props.layer.alpha,
                onChange: this.setLayerAlpha
            })));
        };
        return MapRendererLayersListItemComponent;
    }(React.Component));
    exports.MapRendererLayersListItemComponent = MapRendererLayersListItemComponent;
    var Factory = React.createFactory(MapRendererLayersListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/mapmodes/MapRendererLayersList", ["require", "exports", "src/uicomponents/mapmodes/MapRendererLayersListItem"], function (require, exports, MapRendererLayersListItem_1) {
    "use strict";
    var MapRendererLayersListComponent = (function (_super) {
        __extends(MapRendererLayersListComponent, _super);
        function MapRendererLayersListComponent(props) {
            _super.call(this, props);
            this.displayName = "MapRendererLayersList";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        MapRendererLayersListComponent.prototype.bindMethods = function () {
            this.handleDragEnd = this.handleDragEnd.bind(this);
            this.handleToggleActive = this.handleToggleActive.bind(this);
            this.updateLayer = this.updateLayer.bind(this);
            this.handleSetHoverPosition = this.handleSetHoverPosition.bind(this);
            this.handleDragStart = this.handleDragStart.bind(this);
        };
        MapRendererLayersListComponent.prototype.getInitialStateTODO = function () {
            return ({
                currentDraggingLayer: null,
                layerKeyToInsertNextTo: null,
                insertPosition: null
            });
        };
        MapRendererLayersListComponent.prototype.handleDragStart = function (layer) {
            this.setState({
                currentDraggingLayer: layer
            });
        };
        MapRendererLayersListComponent.prototype.handleDragEnd = function () {
            var mapRenderer = this.props.mapRenderer;
            var toInsert = this.state.currentDraggingLayer;
            var insertTarget = mapRenderer.layers[this.state.layerKeyToInsertNextTo];
            mapRenderer.currentMapMode.insertLayerNextToLayer(toInsert, insertTarget, this.state.insertPosition);
            mapRenderer.resetMapModeLayersPosition();
            this.setState({
                currentDraggingLayer: null,
                layerKeyToInsertNextTo: null,
                insertPosition: null
            });
        };
        MapRendererLayersListComponent.prototype.handleToggleActive = function (layer) {
            var mapRenderer = this.props.mapRenderer;
            mapRenderer.currentMapMode.toggleLayer(layer);
            mapRenderer.updateMapModeLayers([layer]);
            this.forceUpdate();
        };
        MapRendererLayersListComponent.prototype.handleSetHoverPosition = function (layer, position) {
            this.setState({
                layerKeyToInsertNextTo: layer.template.key,
                insertPosition: position
            });
        };
        MapRendererLayersListComponent.prototype.updateLayer = function (layer) {
            var mapRenderer = this.props.mapRenderer;
            mapRenderer.setLayerAsDirty(layer.template.key);
        };
        MapRendererLayersListComponent.prototype.render = function () {
            var mapRenderer = this.props.mapRenderer;
            var mapMode = this.props.currentMapMode;
            if (!mapMode)
                return null;
            var layersData = mapMode.layers;
            var activeLayers = mapMode.getActiveLayers();
            var listItems = [];
            for (var i = 0; i < layersData.length; i++) {
                var layer = layersData[i];
                var layerKey = layer.template.key;
                listItems.push(MapRendererLayersListItem_1.default({
                    layer: layer,
                    layerName: layer.template.displayName,
                    isActive: mapMode.activeLayers[layerKey],
                    key: layerKey,
                    toggleActive: this.handleToggleActive.bind(this, layer),
                    listItemIsDragging: Boolean(this.state.currentDraggingLayer),
                    onDragStart: this.handleDragStart,
                    onDragEnd: this.handleDragEnd,
                    setHoverPosition: this.handleSetHoverPosition,
                    updateLayer: this.updateLayer,
                    dragPositionerProps: {
                        containerElement: this,
                        containerDragOnly: true,
                    }
                }));
            }
            return (React.DOM.ol({
                className: "map-renderer-layers-list"
            }, listItems));
        };
        return MapRendererLayersListComponent;
    }(React.Component));
    exports.MapRendererLayersListComponent = MapRendererLayersListComponent;
    var Factory = React.createFactory(MapRendererLayersListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/mapmodes/MapModeSelector", ["require", "exports"], function (require, exports) {
    "use strict";
    var MapModeSelectorComponent = (function (_super) {
        __extends(MapModeSelectorComponent, _super);
        function MapModeSelectorComponent(props) {
            _super.call(this, props);
            this.displayName = "MapModeSelector";
            this.bindMethods();
        }
        MapModeSelectorComponent.prototype.handleChange = function (e) {
            var target = e.target;
            var value = target.value;
            this.props.mapRenderer.setMapModeByKey(value);
            if (this.props.onUpdate) {
                this.props.onUpdate();
            }
        };
        MapModeSelectorComponent.prototype.bindMethods = function () {
            this.makeOptions = this.makeOptions.bind(this);
            this.handleChange = this.handleChange.bind(this);
        };
        MapModeSelectorComponent.prototype.makeOptions = function () {
            var mapRenderer = this.props.mapRenderer;
            var options = [];
            for (var key in mapRenderer.mapModes) {
                var mapMode = mapRenderer.mapModes[key];
                options.push(React.DOM.option({
                    value: key,
                    key: key
                }, mapMode.displayName));
            }
            return options;
        };
        MapModeSelectorComponent.prototype.render = function () {
            var mapRenderer = this.props.mapRenderer;
            return (React.DOM.select({
                className: "map-mode-selector",
                value: mapRenderer.currentMapMode.template.key,
                onChange: this.handleChange
            }, this.makeOptions()));
        };
        return MapModeSelectorComponent;
    }(React.Component));
    exports.MapModeSelectorComponent = MapModeSelectorComponent;
    var Factory = React.createFactory(MapModeSelectorComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/mapmodes/MapModeSettings", ["require", "exports", "src/uicomponents/mapmodes/MapRendererLayersList", "src/uicomponents/mapmodes/MapModeSelector"], function (require, exports, MapRendererLayersList_1, MapModeSelector_1) {
    "use strict";
    var MapModeSettingsComponent = (function (_super) {
        __extends(MapModeSettingsComponent, _super);
        function MapModeSettingsComponent(props) {
            _super.call(this, props);
            this.displayName = "MapModeSettings";
            this.bindMethods();
        }
        MapModeSettingsComponent.prototype.bindMethods = function () {
            this.handleReset = this.handleReset.bind(this);
        };
        MapModeSettingsComponent.prototype.handleReset = function () {
            var mapRenderer = this.props.mapRenderer;
            mapRenderer.currentMapMode.resetLayers();
            mapRenderer.resetMapModeLayersPosition();
            mapRenderer.setAllLayersAsDirty();
            this.ref_TODO_layersList.forceUpdate();
        };
        MapModeSettingsComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "map-mode-settings"
            }, MapModeSelector_1.default({
                mapRenderer: this.props.mapRenderer,
                onUpdate: this.forceUpdate.bind(this)
            }), React.DOM.button({
                className: "reset-map-mode-button",
                onClick: this.handleReset
            }, "Reset"), MapRendererLayersList_1.default({
                mapRenderer: this.props.mapRenderer,
                currentMapMode: this.props.mapRenderer.currentMapMode,
                ref: function (component) {
                    _this.ref_TODO_layersList = component;
                }
            })));
        };
        return MapModeSettingsComponent;
    }(React.Component));
    exports.MapModeSettingsComponent = MapModeSettingsComponent;
    var Factory = React.createFactory(MapModeSettingsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/galaxymap/PlayerMoney", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_21) {
    "use strict";
    var PlayerMoneyComponent = (function (_super) {
        __extends(PlayerMoneyComponent, _super);
        function PlayerMoneyComponent(props) {
            _super.call(this, props);
            this.displayName = "PlayerMoney";
            this.lastAmountRendered = undefined;
            this.bindMethods();
        }
        PlayerMoneyComponent.prototype.bindMethods = function () {
            this.handlePlayerMoneyUpdated = this.handlePlayerMoneyUpdated.bind(this);
        };
        PlayerMoneyComponent.prototype.componentDidMount = function () {
            eventManager_21.default.addEventListener("playerMoneyUpdated", this.handlePlayerMoneyUpdated);
        };
        PlayerMoneyComponent.prototype.componentWillUnmount = function () {
            eventManager_21.default.removeEventListener("playerMoneyUpdated", this.handlePlayerMoneyUpdated);
        };
        PlayerMoneyComponent.prototype.handlePlayerMoneyUpdated = function () {
            if (this.props.player.money !== this.lastAmountRendered) {
                this.forceUpdate();
            }
        };
        PlayerMoneyComponent.prototype.render = function () {
            this.lastAmountRendered = this.props.player.money;
            return (React.DOM.div({
                className: "player-money"
            }, "Money: " + this.props.player.money));
        };
        return PlayerMoneyComponent;
    }(React.Component));
    exports.PlayerMoneyComponent = PlayerMoneyComponent;
    var Factory = React.createFactory(PlayerMoneyComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("modules/defaultmapmodes/maplayertemplates/resources", ["require", "exports"], function (require, exports) {
    "use strict";
    var resources = {
        key: "resources",
        displayName: "Resources",
        interactive: false,
        drawingFunction: function (map) {
            var self = this;
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                if (!star.resource)
                    continue;
                var text = new PIXI.Text(star.resource.displayName, {
                    fill: "#FFFFFF",
                    stroke: "#000000",
                    strokeThickness: 2
                });
                text.x = star.x;
                text.x -= text.width / 2;
                text.y = star.y + 8;
                doc.addChild(text);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = resources;
});
define("src/uicomponents/galaxymap/Resource", ["require", "exports"], function (require, exports) {
    "use strict";
    var ResourceComponent = (function (_super) {
        __extends(ResourceComponent, _super);
        function ResourceComponent(props) {
            _super.call(this, props);
            this.displayName = "Resource";
        }
        ResourceComponent.prototype.render = function () {
            var sign = this.props.income < 0 ? "-" : "+";
            return (React.DOM.div({
                className: "resource",
                title: this.props.resource.displayName + ""
            }, React.DOM.img({
                className: "resource-icon",
                src: this.props.resource.icon
            }, null), React.DOM.div({
                className: "resource-amount"
            }, "" + this.props.amount + " (" + sign + this.props.income + ")")));
        };
        return ResourceComponent;
    }(React.Component));
    exports.ResourceComponent = ResourceComponent;
    var Factory = React.createFactory(ResourceComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/galaxymap/TopBarResources", ["require", "exports", "src/App", "src/uicomponents/galaxymap/Resource", "src/eventManager"], function (require, exports, App_31, Resource_1, eventManager_22) {
    "use strict";
    var TopBarResourcesComponent = (function (_super) {
        __extends(TopBarResourcesComponent, _super);
        function TopBarResourcesComponent(props) {
            _super.call(this, props);
            this.displayName = "TopBarResources";
            this.updateListener = undefined;
        }
        TopBarResourcesComponent.prototype.componentDidMount = function () {
            this.updateListener = eventManager_22.default.addEventListener("builtBuildingWithEffect_resourceIncome", this.forceUpdate.bind(this));
        };
        TopBarResourcesComponent.prototype.componentWillUnmount = function () {
            eventManager_22.default.removeEventListener("builtBuildingWithEffect_resourceIncome", this.updateListener);
        };
        TopBarResourcesComponent.prototype.render = function () {
            var player = this.props.player;
            var resourceElements = [];
            var resourceIncome = player.getResourceIncome();
            var resourceTypes = Object.keys(player.resources);
            for (var resourceType in resourceIncome) {
                if (resourceTypes.indexOf(resourceType) === -1) {
                    resourceTypes.push(resourceType);
                }
            }
            for (var i = 0; i < resourceTypes.length; i++) {
                var resourceType = resourceTypes[i];
                var amount = player.resources[resourceType] || 0;
                var income = resourceIncome[resourceType].amount || 0;
                if (amount === 0 && income === 0)
                    continue;
                var resourceData = {
                    resource: App_31.default.moduleData.Templates.Resources[resourceType],
                    amount: amount,
                    income: income,
                    key: resourceType
                };
                resourceElements.push(Resource_1.default(resourceData));
            }
            return (React.DOM.div({
                className: "top-bar-resources"
            }, resourceElements));
        };
        return TopBarResourcesComponent;
    }(React.Component));
    exports.TopBarResourcesComponent = TopBarResourcesComponent;
    var Factory = React.createFactory(TopBarResourcesComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("src/uicomponents/galaxymap/TopBar", ["require", "exports", "src/uicomponents/PlayerFlag", "src/uicomponents/galaxymap/PlayerMoney", "src/uicomponents/galaxymap/TopBarResources", "src/eventManager"], function (require, exports, PlayerFlag_5, PlayerMoney_1, TopBarResources_1, eventManager_23) {
    "use strict";
    var TopBarComponent = (function (_super) {
        __extends(TopBarComponent, _super);
        function TopBarComponent(props) {
            _super.call(this, props);
            this.displayName = "TopBar";
            this.updateListener = undefined;
        }
        TopBarComponent.prototype.componentDidMount = function () {
            this.updateListener = eventManager_23.default.addEventListener("builtBuildingWithEffect_income", this.forceUpdate.bind(this));
        };
        TopBarComponent.prototype.componentWillUnmount = function () {
            eventManager_23.default.removeEventListener("builtBuildingWithEffect_income", this.updateListener);
        };
        TopBarComponent.prototype.render = function () {
            var player = this.props.player;
            var income = player.getIncome();
            var incomeClass = "top-bar-money-income";
            if (income < 0)
                incomeClass += " negative";
            return (React.DOM.div({
                className: "top-bar"
            }, React.DOM.div({
                className: "top-bar-info"
            }, React.DOM.div({
                className: "top-bar-player"
            }, PlayerFlag_5.default({
                props: {
                    className: "top-bar-player-icon"
                },
                flag: player.flag
            }), React.DOM.div({
                className: "top-bar-turn-number"
            }, "Turn " + this.props.game.turnNumber)), React.DOM.div({
                className: "top-bar-money"
            }, PlayerMoney_1.default({
                player: player
            }), React.DOM.div({
                className: incomeClass
            }, "(+" + player.getIncome() + ")")), TopBarResources_1.default({
                player: player
            }))));
        };
        return TopBarComponent;
    }(React.Component));
    exports.TopBarComponent = TopBarComponent;
    var Factory = React.createFactory(TopBarComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("modules/defaultnotifications/notifications/uicomponents/BattleFinishNotification", ["require", "exports"], function (require, exports) {
    "use strict";
    var BattleFinishNotification = (function (_super) {
        __extends(BattleFinishNotification, _super);
        function BattleFinishNotification(props) {
            _super.call(this, props);
            this.displayName = "BattleFinishNotification";
        }
        BattleFinishNotification.prototype.render = function () {
            var notification = this.props.notification;
            var p = notification.props;
            var attacker = p.attacker;
            var defender = p.defender;
            var victor = p.victor;
            var location = p.location;
            var message = notification.makeMessage();
            var attackSuccessString = victor === attacker ? " succesfully " : " unsuccesfully ";
            var attackerGainedControl = location.owner === attacker;
            var controllerString = attackerGainedControl ? " now controls " :
                " maintains control of ";
            return (React.DOM.div({
                className: "battle-finish-notification draggable-container"
            }, message + ".", React.DOM.br(null), React.DOM.br(null), "" + attacker.name + attackSuccessString + "attacked " + defender.name + " in " +
                location.name + ". " + victor.name + controllerString + location.name + "."));
        };
        return BattleFinishNotification;
    }(React.Component));
    var Factory = React.createFactory(BattleFinishNotification);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("modules/defaultnotifications/notifications/battleFinishNotification", ["require", "exports", "modules/defaultnotifications/notifications/uicomponents/BattleFinishNotification", "src/NotificationFilterState"], function (require, exports, BattleFinishNotification_1, NotificationFilterState_2) {
    "use strict";
    var battleFinishNotification = {
        key: "battleFinishNotification",
        displayName: "Battle finished",
        category: "combat",
        defaultFilterState: [NotificationFilterState_2.default.neverShow],
        iconSrc: "modules/common/resourcetemplates/img/test1.png",
        eventListeners: ["makeBattleFinishNotification"],
        contentConstructor: BattleFinishNotification_1.default,
        messageConstructor: function (props) {
            var message = "A battle was fought in " + props.location.name + " between " +
                props.attacker.name + " and " + props.defender.name;
            return message;
        },
        serializeProps: function (props) {
            return ({
                attackerId: props.attacker.id,
                defenderId: props.defender.id,
                locationId: props.location.id,
                victorId: props.victor.id
            });
        },
        deserializeProps: function (props, gameLoader) {
            return ({
                attacker: gameLoader.playersById[props.attackerId],
                defender: gameLoader.playersById[props.defenderId],
                location: gameLoader.starsById[props.locationId],
                victor: gameLoader.playersById[props.victorId]
            });
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = battleFinishNotification;
});
define("modules/defaultnotifications/notifications/uicomponents/PlayerDiedNotification", ["require", "exports"], function (require, exports) {
    "use strict";
    var PlayerDiedNotification = (function (_super) {
        __extends(PlayerDiedNotification, _super);
        function PlayerDiedNotification(props) {
            _super.call(this, props);
            this.displayName = "PlayerDiedNotification";
        }
        PlayerDiedNotification.prototype.render = function () {
            var notification = this.props.notification;
            return (React.DOM.div({
                className: "player-died-notification draggable-container"
            }, "Here lies " + notification.props.deadPlayerName + ".", React.DOM.br(null), React.DOM.br(null), "He never scored."));
        };
        return PlayerDiedNotification;
    }(React.Component));
    var Factory = React.createFactory(PlayerDiedNotification);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("modules/defaultnotifications/notifications/playerDiedNotification", ["require", "exports", "modules/defaultnotifications/notifications/uicomponents/PlayerDiedNotification", "src/NotificationFilterState"], function (require, exports, PlayerDiedNotification_1, NotificationFilterState_3) {
    "use strict";
    var playerDiedNotification = {
        key: "playerDiedNotification",
        displayName: "Player died",
        category: "game",
        defaultFilterState: [NotificationFilterState_3.default.alwaysShow],
        iconSrc: "modules/common/resourcetemplates/img/test1.png",
        eventListeners: ["makePlayerDiedNotification"],
        contentConstructor: PlayerDiedNotification_1.default,
        messageConstructor: function (props) {
            var message = "Player " + props.deadPlayerName + " died";
            return message;
        },
        serializeProps: function (props) {
            return ({
                deadPlayerName: props.deadPlayerName
            });
        },
        deserializeProps: function (props, gameLoader) {
            return ({
                deadPlayerName: props.deadPlayerName
            });
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = playerDiedNotification;
});
define("modules/defaultnotifications/notifications/uicomponents/WarDeclarationNotification", ["require", "exports"], function (require, exports) {
    "use strict";
    var WarDeclarationNotification = (function (_super) {
        __extends(WarDeclarationNotification, _super);
        function WarDeclarationNotification(props) {
            _super.call(this, props);
            this.displayName = "WarDeclarationNotification";
        }
        WarDeclarationNotification.prototype.render = function () {
            var notification = this.props.notification;
            var p = notification.props;
            return (React.DOM.div({
                className: "war-declaration-notification draggable-container"
            }, null));
        };
        return WarDeclarationNotification;
    }(React.Component));
    var Factory = React.createFactory(WarDeclarationNotification);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
});
define("modules/defaultnotifications/notifications/warDeclarationNotification", ["require", "exports", "modules/defaultnotifications/notifications/uicomponents/WarDeclarationNotification", "src/NotificationFilterState"], function (require, exports, WarDeclarationNotification_1, NotificationFilterState_4) {
    "use strict";
    var WarDeclarationNotification = {
        key: "WarDeclarationNotification",
        displayName: "War declaration",
        category: "diplomacy",
        defaultFilterState: [NotificationFilterState_4.default.showIfInvolved],
        iconSrc: "modules/common/resourcetemplates/img/test2.png",
        eventListeners: ["makeWarDeclarationNotification"],
        contentConstructor: WarDeclarationNotification_1.default,
        messageConstructor: function (props) {
            var message = props.player1.name + " declared war on " + props.player2.name;
            return message;
        },
        serializeProps: function (props) {
            return ({
                player1Id: props.player1.id,
                player2Id: props.player2.id,
            });
        },
        deserializeProps: function (props, gameLoader) {
            return ({
                player1: gameLoader.playersById[props.player1Id],
                player2: gameLoader.playersById[props.player2Id],
            });
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = WarDeclarationNotification;
});
define("modules/defaultnotifications/NotificationTemplates", ["require", "exports", "modules/defaultnotifications/notifications/battleFinishNotification", "modules/defaultnotifications/notifications/playerDiedNotification", "modules/defaultnotifications/notifications/warDeclarationNotification"], function (require, exports, battleFinishNotification_1, playerDiedNotification_1, warDeclarationNotification_1) {
    "use strict";
    var Notifications = (_a = {},
        _a[battleFinishNotification_1.default.key] = battleFinishNotification_1.default,
        _a[playerDiedNotification_1.default.key] = playerDiedNotification_1.default,
        _a[warDeclarationNotification_1.default.key] = warDeclarationNotification_1.default,
        _a
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Notifications;
    var _a;
});
define("src/uicomponents/notifications/Notification", ["require", "exports"], function (require, exports) {
    "use strict";
    var NotificationComponent = (function (_super) {
        __extends(NotificationComponent, _super);
        function NotificationComponent(props) {
            _super.call(this, props);
            this.displayName = "Notification";
            this.bindMethods();
        }
        NotificationComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
            this.handleClose = this.handleClose.bind(this);
            this.handleRightClick = this.handleRightClick.bind(this);
        };
        NotificationComponent.prototype.handleClose = function () {
            this.props.markAsRead(this.props.notification);
        };
        NotificationComponent.prototype.handleClick = function () {
            this.props.togglePopup(this.props.notification);
        };
        NotificationComponent.prototype.handleRightClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            this.handleClose();
        };
        NotificationComponent.prototype.render = function () {
            var notification = this.props.notification;
            return (React.DOM.li({
                className: "notification",
                onClick: this.handleClick,
                onContextMenu: this.handleRightClick
            }, React.DOM.img({
                className: "notification-image",
                src: notification.template.iconSrc
            }), React.DOM.span({
                className: "notification-message"
            }, notification.makeMessage())));
        };
        return NotificationComponent;
    }(React.Component));
    exports.NotificationComponent = NotificationComponent;
    var Factory = React.createFactory(NotificationComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/popups/ConfirmPopup", ["require", "exports", "src/utility"], function (require, exports, utility_30) {
    "use strict";
    var ConfirmPopupComponent = (function (_super) {
        __extends(ConfirmPopupComponent, _super);
        function ConfirmPopupComponent(props) {
            _super.call(this, props);
            this.displayName = "ConfirmPopup";
            this.bindMethods();
        }
        ConfirmPopupComponent.prototype.bindMethods = function () {
            this.handleOk = this.handleOk.bind(this);
            this.handleClose = this.handleClose.bind(this);
        };
        ConfirmPopupComponent.prototype.componentDidMount = function () {
            ReactDOM.findDOMNode(this.ref_TODO_okButton).focus();
        };
        ConfirmPopupComponent.prototype.handleOk = function () {
            if (!this.props.handleOk) {
                this.handleClose();
                return;
            }
            var callbackSuccesful = this.props.handleOk();
            if (callbackSuccesful !== false) {
                this.handleClose();
            }
        };
        ConfirmPopupComponent.prototype.handleClose = function () {
            if (this.props.handleClose) {
                this.props.handleClose();
            }
            this.props.closePopup();
        };
        ConfirmPopupComponent.prototype.render = function () {
            var _this = this;
            var content;
            if (this.props.contentText) {
                content = utility_30.splitMultilineText(this.props.contentText);
            }
            else if (this.props.contentConstructor) {
                content = this.props.contentConstructor(this.props.contentProps);
            }
            else {
                throw new Error("Confirm popup has no content");
            }
            return (React.DOM.div({
                className: "confirm-popup draggable-container"
            }, React.DOM.div({
                className: "confirm-popup-content"
            }, content), React.DOM.div({
                className: "popup-buttons draggable-container"
            }, React.DOM.button({
                className: "popup-button",
                onClick: this.handleOk,
                ref: function (component) {
                    _this.ref_TODO_okButton = component;
                }
            }, this.props.okText || "Confirm"), this.props.extraButtons, React.DOM.button({
                className: "popup-button",
                onClick: this.handleClose
            }, this.props.cancelText || "Cancel"))));
        };
        return ConfirmPopupComponent;
    }(React.Component));
    exports.ConfirmPopupComponent = ConfirmPopupComponent;
    var Factory = React.createFactory(ConfirmPopupComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/notifications/NotificationFilterListItem", ["require", "exports", "src/NotificationFilterState", "src/eventManager"], function (require, exports, NotificationFilterState_5, eventManager_24) {
    "use strict";
    var NotificationFilterListItemComponent = (function (_super) {
        __extends(NotificationFilterListItemComponent, _super);
        function NotificationFilterListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "NotificationFilterListItem";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        NotificationFilterListItemComponent.prototype.bindMethods = function () {
            this.handleChangeState = this.handleChangeState.bind(this);
        };
        NotificationFilterListItemComponent.prototype.getInitialStateTODO = function () {
            return ({
                filterState: this.props.filterState
            });
        };
        NotificationFilterListItemComponent.prototype.componentWillReceiveProps = function (newProps) {
            this.setState({
                filterState: newProps.filterState
            });
        };
        NotificationFilterListItemComponent.prototype.handleChangeState = function (state) {
            var filter = this.props.filter;
            filter.handleFilterStateChange(this.props.keyTODO, state);
            filter.save();
            this.setState({
                filterState: filter.filters[this.props.keyTODO]
            });
            eventManager_24.default.dispatchEvent("updateNotificationLog");
        };
        NotificationFilterListItemComponent.prototype.render = function () {
            var inputElements = [];
            var filterState = this.state.filterState;
            for (var state in NotificationFilterState_5.default) {
                var numericState = parseInt(state);
                if (!isFinite(numericState))
                    continue;
                var stateIsActive = filterState.indexOf(numericState) !== -1;
                inputElements.push(React.DOM.input({
                    className: "notification-filter-list-item-filter",
                    type: "checkbox",
                    id: this.props.keyTODO,
                    key: state,
                    checked: stateIsActive,
                    onChange: this.handleChangeState.bind(this, numericState),
                    title: NotificationFilterState_5.default[numericState]
                }));
            }
            return (React.DOM.div({
                className: "notification-filter-list-item" + (this.props.isHighlighted ? " highlighted" : "")
            }, React.DOM.label({
                className: "notification-filter-list-item-label",
                htmlFor: this.props.keyTODO
            }, this.props.displayName), React.DOM.div({
                className: "notification-filter-list-item-filters"
            }, inputElements)));
        };
        return NotificationFilterListItemComponent;
    }(React.Component));
    exports.NotificationFilterListItemComponent = NotificationFilterListItemComponent;
    var Factory = React.createFactory(NotificationFilterListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/notifications/notificationfilterlist", ["require", "exports", "src/uicomponents/galaxymap/OptionsGroup", "src/uicomponents/notifications/NotificationFilterListItem", "src/eventManager"], function (require, exports, OptionsGroup_2, NotificationFilterListItem_1, eventManager_25) {
    "use strict";
    var NotificationFilterListComponent = (function (_super) {
        __extends(NotificationFilterListComponent, _super);
        function NotificationFilterListComponent(props) {
            _super.call(this, props);
            this.displayName = "NotificationFilterList";
            this.bindMethods();
        }
        NotificationFilterListComponent.prototype.bindMethods = function () {
            this.scrollToHighlighted = this.scrollToHighlighted.bind(this);
            this.handleResetCategory = this.handleResetCategory.bind(this);
        };
        NotificationFilterListComponent.prototype.handleResetCategory = function (category) {
            var filter = this.props.filter;
            filter.setDefaultFilterStatesForCategory(category);
            filter.save();
            this.forceUpdate();
            eventManager_25.default.dispatchEvent("updateNotificationLog");
        };
        NotificationFilterListComponent.prototype.scrollToHighlighted = function () {
            if (this.props.highlightedOptionKey) {
                var domNode = this.ref_TODO_body.getDOMNode();
                var highlightedNode = domNode.getElementsByClassName("highlighted")[0];
                domNode.scrollTop = highlightedNode.offsetTop + domNode.scrollHeight / 3;
            }
        };
        NotificationFilterListComponent.prototype.render = function () {
            var _this = this;
            var filter = this.props.filter;
            var filtersByCategory = filter.getFiltersByCategory();
            var filterGroupElements = [];
            for (var category in filtersByCategory) {
                var filtersForCategory = filtersByCategory[category];
                var filterElementsForCategory = [];
                for (var i = 0; i < filtersForCategory.length; i++) {
                    var notificationTemplate = filtersForCategory[i].notificationTemplate;
                    var isHighlighted = Boolean(this.props.highlightedOptionKey &&
                        this.props.highlightedOptionKey === notificationTemplate.key);
                    filterElementsForCategory.push({
                        key: notificationTemplate.key,
                        content: NotificationFilterListItem_1.default({
                            displayName: notificationTemplate.displayName,
                            filter: filter,
                            filterState: filtersForCategory[i].filterState,
                            keyTODO: notificationTemplate.key,
                            isHighlighted: isHighlighted
                        })
                    });
                }
                filterGroupElements.push(OptionsGroup_2.default({
                    header: category,
                    options: filterElementsForCategory,
                    key: category,
                    resetFN: this.handleResetCategory.bind(this, category)
                }));
            }
            return (React.DOM.div({
                className: "notification-filter-list"
            }, React.DOM.div({
                className: "notification-filter-list-header"
            }, React.DOM.div({
                className: "notification-filter-list-item-label"
            }, "Show"), React.DOM.div({
                className: "notification-filter-list-item-filters"
            }, "Always", "Involved", "Never")), React.DOM.div({
                className: "notification-filter-list-body",
                ref: function (component) {
                    _this.ref_TODO_body = component;
                }
            }, filterGroupElements)));
        };
        return NotificationFilterListComponent;
    }(React.Component));
    exports.NotificationFilterListComponent = NotificationFilterListComponent;
    var Factory = React.createFactory(NotificationFilterListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/notifications/NotificationFilterButton", ["require", "exports", "src/uicomponents/popups/PopupManager", "src/uicomponents/notifications/notificationfilterlist", "src/uicomponents/popups/TopMenuPopup"], function (require, exports, PopupManager_3, NotificationFilterList_1, TopMenuPopup_3) {
    "use strict";
    var NotificationFilterButtonComponent = (function (_super) {
        __extends(NotificationFilterButtonComponent, _super);
        function NotificationFilterButtonComponent(props) {
            _super.call(this, props);
            this.displayName = "NotificationFilterButton";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        NotificationFilterButtonComponent.prototype.bindMethods = function () {
            this.makePopup = this.makePopup.bind(this);
            this.closePopup = this.closePopup.bind(this);
            this.togglePopup = this.togglePopup.bind(this);
        };
        NotificationFilterButtonComponent.prototype.getInitialStateTODO = function () {
            return ({
                notificationFilterPopup: undefined
            });
        };
        NotificationFilterButtonComponent.prototype.makePopup = function () {
            var scrollToHighlightedFN = function () {
                var popup = this.popupComponentsByID[this.popupId - 1];
                var content = popup.ref_TODO_content.ref_TODO_content;
                content.scrollToHighlighted();
            }.bind(this.ref_TODO_popupManager);
            var popupId = this.ref_TODO_popupManager.makePopup({
                contentConstructor: TopMenuPopup_3.default,
                contentProps: {
                    contentConstructor: NotificationFilterList_1.default,
                    contentProps: {
                        filter: this.props.filter,
                        highlightedOptionKey: this.props.highlightedOptionKey
                    },
                    handleClose: this.closePopup
                },
                popupProps: {
                    dragPositionerProps: {
                        containerDragOnly: true,
                        preventAutoResize: true,
                    },
                    resizable: true,
                    minWidth: 440,
                    minHeight: 150,
                    finishedMountingCallback: scrollToHighlightedFN
                }
            });
            this.setState({
                notificationFilterPopup: popupId
            });
        };
        NotificationFilterButtonComponent.prototype.closePopup = function () {
            this.ref_TODO_popupManager.closePopup(this.state.notificationFilterPopup);
            this.setState({
                notificationFilterPopup: undefined
            });
        };
        NotificationFilterButtonComponent.prototype.togglePopup = function () {
            if (isFinite(this.state.notificationFilterPopup)) {
                this.closePopup();
            }
            else {
                this.makePopup();
            }
        };
        NotificationFilterButtonComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "notification-filter-button-container"
            }, React.DOM.button({
                className: "notification-filter-button",
                onClick: this.togglePopup
            }, this.props.text), PopupManager_3.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            })));
        };
        return NotificationFilterButtonComponent;
    }(React.Component));
    exports.NotificationFilterButtonComponent = NotificationFilterButtonComponent;
    var Factory = React.createFactory(NotificationFilterButtonComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/notifications/NotificationLog", ["require", "exports", "src/uicomponents/notifications/Notification", "src/uicomponents/popups/ConfirmPopup", "src/uicomponents/notifications/NotificationFilterButton", "src/uicomponents/popups/PopupManager", "src/eventManager"], function (require, exports, Notification_3, ConfirmPopup_1, NotificationFilterButton_1, PopupManager_4, eventManager_26) {
    "use strict";
    var NotificationLogComponent = (function (_super) {
        __extends(NotificationLogComponent, _super);
        function NotificationLogComponent(props) {
            _super.call(this, props);
            this.displayName = "NotificationLog";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.updateListener = undefined;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        NotificationLogComponent.prototype.bindMethods = function () {
            this.makePopup = this.makePopup.bind(this);
            this.closePopup = this.closePopup.bind(this);
            this.getNotificationKey = this.getNotificationKey.bind(this);
            this.handleMarkAsRead = this.handleMarkAsRead.bind(this);
            this.togglePopup = this.togglePopup.bind(this);
        };
        NotificationLogComponent.prototype.getInitialStateTODO = function () {
            return ({});
        };
        NotificationLogComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.currentTurn !== this.props.currentTurn) {
                this.scrollTop = undefined;
            }
        };
        NotificationLogComponent.prototype.componentDidMount = function () {
            this.updateListener = eventManager_26.default.addEventListener("updateNotificationLog", this.forceUpdate.bind(this));
        };
        NotificationLogComponent.prototype.componentWillUnmount = function () {
            eventManager_26.default.removeEventListener("updateNotificationLog", this.updateListener);
        };
        NotificationLogComponent.prototype.componentDidUpdate = function () {
            var domNode = ReactDOM.findDOMNode(this);
            if (!isFinite(this.scrollTop)) {
                this.scrollTop = domNode.scrollTop;
            }
            domNode.scrollTop = domNode.scrollHeight;
        };
        NotificationLogComponent.prototype.getNotificationKey = function (notification) {
            return "" + notification.turn + this.props.log.byTurn[notification.turn].indexOf(notification);
        };
        NotificationLogComponent.prototype.handleMarkAsRead = function (notification) {
            this.props.log.markAsRead(notification);
            var notificationKey = this.getNotificationKey(notification);
            if (isFinite(this.state[notificationKey])) {
                this.closePopup(notificationKey);
            }
            else {
                this.forceUpdate();
            }
        };
        NotificationLogComponent.prototype.makePopup = function (notification, key) {
            var log = this.props.log;
            var popupId = this.ref_TODO_popupManager.makePopup({
                contentConstructor: ConfirmPopup_1.default,
                contentProps: {
                    contentConstructor: notification.template.contentConstructor,
                    contentProps: {
                        notification: notification
                    },
                    handleOk: this.handleMarkAsRead.bind(this, notification),
                    handleClose: this.closePopup.bind(this, key),
                    okText: "Mark as read",
                    cancelText: "Close",
                    extraButtons: [
                        NotificationFilterButton_1.default({
                            key: "notificationFilter",
                            filter: log.notificationFilter,
                            text: "Filter",
                            highlightedOptionKey: notification.template.key
                        })
                    ]
                },
                popupProps: {
                    dragPositionerProps: {
                        containerDragOnly: true,
                        preventAutoResize: true
                    }
                }
            });
            var stateObj = {};
            stateObj[key] = popupId;
            this.setState(stateObj);
        };
        NotificationLogComponent.prototype.closePopup = function (key) {
            this.ref_TODO_popupManager.closePopup(this.state[key]);
            var stateObj = {};
            stateObj[key] = undefined;
            this.setState(stateObj);
        };
        NotificationLogComponent.prototype.togglePopup = function (notification) {
            var key = this.getNotificationKey(notification);
            if (isFinite(this.state[key])) {
                this.closePopup(key);
            }
            else {
                this.makePopup(notification, key);
            }
        };
        NotificationLogComponent.prototype.render = function () {
            var _this = this;
            var log = this.props.log;
            var notifications = log.filterNotifications(log.unread);
            var items = [];
            for (var i = 0; i < notifications.length; i++) {
                items.push(Notification_3.default({
                    notification: notifications[i],
                    key: this.getNotificationKey(notifications[i]),
                    markAsRead: this.handleMarkAsRead,
                    togglePopup: this.togglePopup
                }));
            }
            return (React.DOM.div({
                className: "notification-log-container"
            }, React.DOM.ol({
                className: "notification-log"
            }, items.reverse()), PopupManager_4.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                }
            })));
        };
        return NotificationLogComponent;
    }(React.Component));
    exports.NotificationLogComponent = NotificationLogComponent;
    var Factory = React.createFactory(NotificationLogComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/notifications/Notifications", ["require", "exports", "src/uicomponents/notifications/NotificationLog"], function (require, exports, NotificationLog_2) {
    "use strict";
    var NotificationsComponent = (function (_super) {
        __extends(NotificationsComponent, _super);
        function NotificationsComponent(props) {
            _super.call(this, props);
            this.displayName = "Notifications";
        }
        NotificationsComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "notifications-container"
            }, NotificationLog_2.default({
                log: this.props.log,
                currentTurn: this.props.currentTurn,
                key: "log"
            })));
        };
        return NotificationsComponent;
    }(React.Component));
    exports.NotificationsComponent = NotificationsComponent;
    var Factory = React.createFactory(NotificationsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/StarInfo", ["require", "exports", "src/uicomponents/galaxymap/DefenceBuildingList", "src/options"], function (require, exports, DefenceBuildingList_2, Options_2) {
    "use strict";
    var StarInfoComponent = (function (_super) {
        __extends(StarInfoComponent, _super);
        function StarInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "StarInfo";
        }
        StarInfoComponent.prototype.shouldComponentUpdate = function (newProps) {
            return this.props.selectedStar !== newProps.selectedStar;
        };
        StarInfoComponent.prototype.render = function () {
            var star = this.props.selectedStar;
            if (!star)
                return null;
            var dumpDebugInfoButton = null;
            if (Options_2.default.debugMode) {
                dumpDebugInfoButton = React.DOM.button({
                    className: "star-info-dump-debug-button",
                    onClick: function (e) {
                        console.log(star);
                        console.log(star.mapGenData);
                    }
                }, "Debug");
            }
            return (React.DOM.div({
                className: "star-info"
            }, React.DOM.div({
                className: "star-info-name"
            }, star.name), React.DOM.div({
                className: "star-info-owner"
            }, star.owner ? star.owner.name : null), dumpDebugInfoButton, React.DOM.div({
                className: "star-info-location"
            }, "x: " + star.x.toFixed() +
                " y: " + star.y.toFixed()), React.DOM.div({
                className: "star-info-income"
            }, "Income: " + star.getIncome()), DefenceBuildingList_2.default({
                buildings: star.buildings["defence"]
            })));
        };
        return StarInfoComponent;
    }(React.Component));
    exports.StarInfoComponent = StarInfoComponent;
    var Factory = React.createFactory(StarInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/fleetcontrols", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_27) {
    "use strict";
    var FleetControlsComponent = (function (_super) {
        __extends(FleetControlsComponent, _super);
        function FleetControlsComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetControls";
            this.bindMethods();
        }
        FleetControlsComponent.prototype.bindMethods = function () {
            this.deselectFleet = this.deselectFleet.bind(this);
            this.selectFleet = this.selectFleet.bind(this);
            this.splitFleet = this.splitFleet.bind(this);
        };
        FleetControlsComponent.prototype.deselectFleet = function () {
            eventManager_27.default.dispatchEvent("deselectFleet", this.props.fleet);
        };
        FleetControlsComponent.prototype.selectFleet = function () {
            eventManager_27.default.dispatchEvent("selectFleets", [this.props.fleet]);
        };
        FleetControlsComponent.prototype.splitFleet = function () {
            eventManager_27.default.dispatchEvent("splitFleet", this.props.fleet);
        };
        FleetControlsComponent.prototype.render = function () {
            var fleet = this.props.fleet;
            var splitButtonProps = {
                className: "fleet-controls-split"
            };
            if (fleet.units.length > 1 && !this.props.isInspecting) {
                splitButtonProps.onClick = this.splitFleet;
            }
            else {
                splitButtonProps.className += " disabled";
                splitButtonProps.disabled = true;
            }
            return (React.DOM.div({
                className: "fleet-controls"
            }, React.DOM.button(splitButtonProps, "split"), React.DOM.button({
                className: "fleet-controls-deselect",
                onClick: this.deselectFleet
            }, "deselect"), !this.props.hasMultipleSelected ? null : React.DOM.button({
                className: "fleet-controls-select",
                onClick: this.selectFleet
            }, "select")));
        };
        return FleetControlsComponent;
    }(React.Component));
    exports.FleetControlsComponent = FleetControlsComponent;
    var Factory = React.createFactory(FleetControlsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/fleetinfo", ["require", "exports", "src/uicomponents/galaxymap/fleetcontrols"], function (require, exports, FleetControls_1) {
    "use strict";
    var FleetInfoComponent = (function (_super) {
        __extends(FleetInfoComponent, _super);
        function FleetInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetInfo";
            this.bindMethods();
        }
        FleetInfoComponent.prototype.setFleetName = function (e) {
            var target = e.target;
            this.props.fleet.name = target.value;
            this.forceUpdate();
        };
        FleetInfoComponent.prototype.bindMethods = function () {
            this.setFleetName = this.setFleetName.bind(this);
        };
        FleetInfoComponent.prototype.render = function () {
            var fleet = this.props.fleet;
            if (!fleet)
                return null;
            var totalHealth = fleet.getTotalHealth();
            var isNotDetected = this.props.isNotDetected;
            var healthRatio = totalHealth.current / totalHealth.max;
            var critThreshhold = 0.3;
            var healthStatus = "";
            if (!isNotDetected && healthRatio <= critThreshhold) {
                healthStatus += " critical";
            }
            else if (!isNotDetected && totalHealth.current < totalHealth.max) {
                healthStatus += " wounded";
            }
            return (React.DOM.div({
                className: "fleet-info" + (fleet.isStealthy ? " stealthy" : "")
            }, React.DOM.div({
                className: "fleet-info-header"
            }, React.DOM.input({
                className: "fleet-info-name",
                value: isNotDetected ? "Unidentified fleet" : fleet.name,
                onChange: isNotDetected ? null : this.setFleetName,
                readOnly: isNotDetected
            }), React.DOM.div({
                className: "fleet-info-strength"
            }, React.DOM.span({
                className: "fleet-info-strength-current" + healthStatus
            }, isNotDetected ? "???" : totalHealth.current), React.DOM.span({
                className: "fleet-info-strength-max"
            }, isNotDetected ? "/???" : "/" + totalHealth.max)), FleetControls_1.default({
                fleet: fleet,
                hasMultipleSelected: this.props.hasMultipleSelected,
                isInspecting: this.props.isInspecting
            })), React.DOM.div({
                className: "fleet-info-move-points"
            }, isNotDetected ? "Moves: ?/?" : "Moves: " + fleet.getMinCurrentMovePoints() + "/" +
                fleet.getMinMaxMovePoints())));
        };
        return FleetInfoComponent;
    }(React.Component));
    exports.FleetInfoComponent = FleetInfoComponent;
    var Factory = React.createFactory(FleetInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/FleetUnitInfoName", ["require", "exports"], function (require, exports) {
    "use strict";
    var FleetUnitInfoNameComponent = (function (_super) {
        __extends(FleetUnitInfoNameComponent, _super);
        function FleetUnitInfoNameComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetUnitInfoName";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        FleetUnitInfoNameComponent.prototype.bindMethods = function () {
            this.onChange = this.onChange.bind(this);
        };
        FleetUnitInfoNameComponent.prototype.getInitialStateTODO = function () {
            return ({
                inputElementValue: this.props.unit.name
            });
        };
        FleetUnitInfoNameComponent.prototype.onChange = function (e) {
            var target = e.target;
            this.setState({ inputElementValue: target.value });
            this.props.unit.name = target.value;
        };
        FleetUnitInfoNameComponent.prototype.render = function () {
            return (React.DOM.input({
                className: "fleet-unit-info-name",
                value: this.props.isNotDetected ? "Unidentified ship" : this.state.inputElementValue,
                onChange: this.props.isNotDetected ? null : this.onChange,
                readOnly: this.props.isNotDetected
            }));
        };
        return FleetUnitInfoNameComponent;
    }(React.Component));
    exports.FleetUnitInfoNameComponent = FleetUnitInfoNameComponent;
    var Factory = React.createFactory(FleetUnitInfoNameComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/FleetUnitInfo", ["require", "exports", "src/uicomponents/galaxymap/FleetUnitInfoName", "src/uicomponents/unit/UnitStrength", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, FleetUnitInfoName_1, UnitStrength_3, DragPositioner_8, applyMixins_10) {
    "use strict";
    var FleetUnitInfoComponent = (function (_super) {
        __extends(FleetUnitInfoComponent, _super);
        function FleetUnitInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetUnitInfo";
            this.bindMethods();
            if (this.props.isDraggable) {
                this.dragPositioner = new DragPositioner_8.default(this);
                this.dragPositioner.onDragStart = this.onDragStart;
                this.dragPositioner.onDragEnd = this.onDragEnd;
                applyMixins_10.default(this, this.dragPositioner);
            }
        }
        FleetUnitInfoComponent.prototype.bindMethods = function () {
            this.onDragEnd = this.onDragEnd.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
        };
        FleetUnitInfoComponent.prototype.onDragStart = function () {
            this.props.onDragStart(this.props.unit);
        };
        FleetUnitInfoComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        FleetUnitInfoComponent.prototype.render = function () {
            var unit = this.props.unit;
            var isNotDetected = !this.props.isIdentified;
            var divProps = {
                className: "fleet-unit-info"
            };
            if (this.props.isDraggable) {
                divProps.className += " draggable";
                divProps.onTouchStart = divProps.onMouseDown =
                    this.dragPositioner.handleReactDownEvent;
                if (this.dragPositioner.isDragging) {
                    divProps.style = this.dragPositioner.getStyleAttributes();
                    divProps.className += " dragging";
                }
            }
            return (React.DOM.div(divProps, React.DOM.div({
                className: "fleet-unit-info-icon-container"
            }, React.DOM.img({
                className: "fleet-unit-info-icon",
                src: isNotDetected ? "img/icons/unDetected.png" : unit.template.icon
            })), React.DOM.div({
                className: "fleet-unit-info-info"
            }, FleetUnitInfoName_1.default({
                unit: unit,
                isNotDetected: isNotDetected
            }), React.DOM.div({
                className: "fleet-unit-info-type"
            }, isNotDetected ? "???" : unit.template.displayName)), UnitStrength_3.default({
                maxHealth: unit.maxHealth,
                currentHealth: unit.currentHealth,
                isSquadron: true,
                isNotDetected: isNotDetected
            })));
        };
        return FleetUnitInfoComponent;
    }(React.Component));
    exports.FleetUnitInfoComponent = FleetUnitInfoComponent;
    var Factory = React.createFactory(FleetUnitInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/fleetcontents", ["require", "exports", "src/uicomponents/galaxymap/FleetUnitInfo"], function (require, exports, FleetUnitInfo_1) {
    "use strict";
    var FleetContentsComponent = (function (_super) {
        __extends(FleetContentsComponent, _super);
        function FleetContentsComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetContents";
            this.bindMethods();
        }
        FleetContentsComponent.prototype.bindMethods = function () {
            this.handleMouseUp = this.handleMouseUp.bind(this);
        };
        FleetContentsComponent.prototype.handleMouseUp = function () {
            if (!this.props.onMouseUp)
                return;
            this.props.onMouseUp(this.props.fleet);
        };
        FleetContentsComponent.prototype.render = function () {
            var fleetUnitInfos = [];
            var fleet = this.props.fleet;
            var hasDraggableContent = Boolean(this.props.onDragStart ||
                this.props.onDragEnd);
            for (var i = 0; i < fleet.units.length; i++) {
                var unit = fleet.units[i];
                fleetUnitInfos.push(FleetUnitInfo_1.default({
                    key: unit.id,
                    unit: unit,
                    isDraggable: hasDraggableContent,
                    onDragStart: this.props.onDragStart,
                    onDragEnd: this.props.onDragEnd,
                    isIdentified: this.props.player.unitIsIdentified(unit)
                }));
            }
            if (hasDraggableContent) {
                fleetUnitInfos.push(React.DOM.div({
                    className: "fleet-contents-dummy-unit",
                    key: "dummy"
                }));
            }
            return (React.DOM.div({
                className: "fleet-contents",
                onMouseUp: this.handleMouseUp
            }, fleetUnitInfos));
        };
        return FleetContentsComponent;
    }(React.Component));
    exports.FleetContentsComponent = FleetContentsComponent;
    var Factory = React.createFactory(FleetContentsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("modules/defaultmapmodes/maplayertemplates/fleets", ["require", "exports", "src/options", "src/eventManager"], function (require, exports, options_8, eventManager_28) {
    "use strict";
    var fleets = {
        key: "fleets",
        displayName: "Fleets",
        interactive: true,
        drawingFunction: function (map) {
            var self = this;
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getVisibleStars();
            }
            var mouseDownFN = function (event) {
                eventManager_28.default.dispatchEvent("mouseDown", event, this.location);
            };
            var mouseUpFN = function (event) {
                eventManager_28.default.dispatchEvent("mouseUp", event);
            };
            var mouseOverFN = function (fleet) {
                eventManager_28.default.dispatchEvent("hoverStar", fleet.location);
                if (options_8.default.debugMode && fleet.units.length > 0 && fleet.units[0].front) {
                    var objective = fleet.units[0].front.objective;
                    var target = objective.target ? objective.target.id : null;
                    console.log(objective.type, target, objective.priority);
                }
            };
            function fleetClickFn(event) {
                var originalEvent = event.data.originalEvent;
                ;
                if (originalEvent.button === 0) {
                    eventManager_28.default.dispatchEvent("selectFleets", [this]);
                }
            }
            function singleFleetDrawFN(fleet) {
                var fleetContainer = new PIXI.Container();
                var color = fleet.player.color.getHex();
                var fillAlpha = fleet.isStealthy ? 0.3 : 0.7;
                var textTexture = self.getFleetTextTexture(fleet);
                var text = new PIXI.Sprite(textTexture);
                var containerGfx = new PIXI.Graphics();
                containerGfx.lineStyle(1, 0x00000, 1);
                var front = fleet.units[0].front;
                if (front && options_8.default.debugMode) {
                    switch (front.objective.type) {
                        case "discovery":
                            {
                                containerGfx.lineStyle(5, 0xFF0000, 1);
                                break;
                            }
                        case "scoutingPerimeter":
                            {
                                containerGfx.lineStyle(5, 0x0000FF, 1);
                                break;
                            }
                    }
                }
                containerGfx.beginFill(color, fillAlpha);
                containerGfx.drawRect(0, 0, text.width + 4, text.height);
                containerGfx.endFill();
                fleetContainer.addChild(containerGfx);
                fleetContainer.addChild(text);
                text.x += 2;
                text.y -= 1;
                fleetContainer.interactive = true;
                var boundMouseDownFN = mouseDownFN.bind(fleet);
                var boundFleetClickFN = fleetClickFn.bind(fleet);
                fleetContainer.on("click", boundFleetClickFN);
                fleetContainer.on("tap", boundFleetClickFN);
                fleetContainer.on("mousedown", boundMouseDownFN);
                fleetContainer.on("mouseup", mouseUpFN);
                fleetContainer.on("rightdown", boundMouseDownFN);
                fleetContainer.on("rightup", mouseUpFN);
                fleetContainer.on("mouseover", mouseOverFN.bind(fleetContainer, fleet));
                return fleetContainer;
            }
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var fleets = star.getAllFleets();
                if (!fleets || fleets.length <= 0)
                    continue;
                var fleetsContainer = new PIXI.Container();
                fleetsContainer.x = star.x;
                fleetsContainer.y = star.y - 40;
                for (var j = 0; j < fleets.length; j++) {
                    if (fleets[j].units.length === 0) {
                        continue;
                    }
                    if (fleets[j].isStealthy && this.player && !this.player.starIsDetected(fleets[j].location)) {
                        continue;
                    }
                    var drawnFleet = singleFleetDrawFN(fleets[j]);
                    drawnFleet.position.x = fleetsContainer.width;
                    fleetsContainer.addChild(drawnFleet);
                }
                if (fleetsContainer.children.length > 0) {
                    fleetsContainer.x -= fleetsContainer.width / 2;
                    doc.addChild(fleetsContainer);
                }
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = fleets;
    var _a;
});
define("src/uicomponents/galaxymap/fleetreorganization", ["require", "exports", "src/uicomponents/galaxymap/fleetcontents", "src/eventManager"], function (require, exports, FleetContents_1, eventManager_29) {
    "use strict";
    var FleetReorganizationComponent = (function (_super) {
        __extends(FleetReorganizationComponent, _super);
        function FleetReorganizationComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetReorganization";
            this.hasClosed = false;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        FleetReorganizationComponent.prototype.bindMethods = function () {
            this.handleDrop = this.handleDrop.bind(this);
            this.handleDragEnd = this.handleDragEnd.bind(this);
            this.handleClose = this.handleClose.bind(this);
            this.handleDragStart = this.handleDragStart.bind(this);
        };
        FleetReorganizationComponent.prototype.getInitialStateTODO = function () {
            return ({
                currentDragUnit: null
            });
        };
        FleetReorganizationComponent.prototype.handleDragStart = function (unit) {
            this.setState({
                currentDragUnit: unit
            });
        };
        FleetReorganizationComponent.prototype.handleDragEnd = function () {
            this.setState({
                currentDragUnit: null
            });
        };
        FleetReorganizationComponent.prototype.handleDrop = function (fleet) {
            var draggingUnit = this.state.currentDragUnit;
            if (draggingUnit) {
                var oldFleet = draggingUnit.fleet;
                oldFleet.transferUnit(fleet, draggingUnit);
                eventManager_29.default.dispatchEvent("playerControlUpdated", null);
            }
            this.handleDragEnd();
        };
        FleetReorganizationComponent.prototype.handleClose = function () {
            this.hasClosed = true;
            this.props.closeReorganization();
        };
        FleetReorganizationComponent.prototype.componentWillUnmount = function () {
            if (this.hasClosed)
                return;
            eventManager_29.default.dispatchEvent("endReorganizingFleets");
        };
        FleetReorganizationComponent.prototype.render = function () {
            var selectedFleets = this.props.fleets;
            if (!selectedFleets || selectedFleets.length < 1) {
                return null;
            }
            return (React.DOM.div({
                className: "fleet-reorganization"
            }, React.DOM.div({
                className: "fleet-reorganization-header"
            }, "Reorganize fleets"), React.DOM.div({
                className: "fleet-reorganization-subheader"
            }, React.DOM.div({
                className: "fleet-reorganization-subheader-fleet-name" +
                    " fleet-reorganization-subheader-fleet-name-left",
            }, selectedFleets[0].name), React.DOM.div({
                className: "fleet-reorganization-subheader-center"
            }, null), React.DOM.div({
                className: "fleet-reorganization-subheader-fleet-name" +
                    " fleet-reorganization-subheader-fleet-name-right",
            }, selectedFleets[1].name)), React.DOM.div({
                className: "fleet-reorganization-contents"
            }, FleetContents_1.default({
                fleet: selectedFleets[0],
                onMouseUp: this.handleDrop,
                onDragStart: this.handleDragStart,
                onDragEnd: this.handleDragEnd,
                player: selectedFleets[0].player
            }), React.DOM.div({
                className: "fleet-reorganization-contents-divider"
            }, null), FleetContents_1.default({
                fleet: selectedFleets[1],
                onMouseUp: this.handleDrop,
                onDragStart: this.handleDragStart,
                onDragEnd: this.handleDragEnd,
                player: selectedFleets[0].player
            })), React.DOM.div({
                className: "fleet-reorganization-footer"
            }, React.DOM.button({
                className: "close-reorganization",
                onClick: this.handleClose
            }, "Close"))));
        };
        return FleetReorganizationComponent;
    }(React.Component));
    exports.FleetReorganizationComponent = FleetReorganizationComponent;
    var Factory = React.createFactory(FleetReorganizationComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/FleetSelection", ["require", "exports", "src/eventManager", "src/uicomponents/galaxymap/fleetinfo", "src/uicomponents/galaxymap/fleetcontents", "src/uicomponents/galaxymap/fleetreorganization"], function (require, exports, eventManager_30, FleetInfo_1, FleetContents_2, FleetReorganization_1) {
    "use strict";
    var FleetSelectionComponent = (function (_super) {
        __extends(FleetSelectionComponent, _super);
        function FleetSelectionComponent(props) {
            _super.call(this, props);
            this.displayName = "FleetSelection";
            this.bindMethods();
        }
        FleetSelectionComponent.prototype.bindMethods = function () {
            this.reorganizeFleets = this.reorganizeFleets.bind(this);
            this.mergeFleets = this.mergeFleets.bind(this);
            this.setElementPosition = this.setElementPosition.bind(this);
        };
        FleetSelectionComponent.prototype.mergeFleets = function () {
            eventManager_30.default.dispatchEvent("mergeFleets", null);
        };
        FleetSelectionComponent.prototype.reorganizeFleets = function () {
            eventManager_30.default.dispatchEvent("startReorganizingFleets", this.props.selectedFleets);
        };
        FleetSelectionComponent.prototype.setElementPosition = function () {
            if (!this.ref_TODO_selected)
                return;
            var domNode = ReactDOM.findDOMNode(this.ref_TODO_selected);
            if (!this.props.selectedStar) {
                domNode.style.left = "0";
            }
            else {
                var containerNode = document.getElementsByClassName("galaxy-map-ui-bottom-left")[0];
                var actionsNode = containerNode.firstChild.firstChild;
                var actionsRect = actionsNode.getBoundingClientRect();
                var rightMostNode = (containerNode.childElementCount > 1 ?
                    containerNode.lastChild.lastChild :
                    containerNode.lastChild);
                var rightMostRect = rightMostNode.getBoundingClientRect();
                var ownBottom = domNode.getBoundingClientRect().bottom;
                var first = ReactDOM.findDOMNode(this.ref_TODO_main).firstChild;
                if (ownBottom > actionsRect.top) {
                    var styleString = "" + (rightMostRect.right) + "px";
                    domNode.style.left = styleString;
                    first.style.left = styleString;
                    first.classList.add("fleet-selection-displaced");
                }
                else {
                    domNode.style.left = "0";
                    first.style.left = "0";
                    first.classList.remove("fleet-selection-displaced");
                }
            }
        };
        FleetSelectionComponent.prototype.componentDidMount = function () {
            this.setElementPosition();
            eventManager_30.default.addEventListener("possibleActionsUpdated", this.setElementPosition);
            window.addEventListener("resize", this.setElementPosition, false);
        };
        FleetSelectionComponent.prototype.componentDidUpdate = function () {
            this.setElementPosition();
        };
        FleetSelectionComponent.prototype.componentWillUnmount = function () {
            eventManager_30.default.removeEventListener("possibleActionsUpdated", this.setElementPosition);
            window.removeEventListener("resize", this.setElementPosition);
        };
        FleetSelectionComponent.prototype.render = function () {
            var _this = this;
            var selectedFleets = this.props.selectedFleets;
            if (!selectedFleets || selectedFleets.length <= 0) {
                return null;
            }
            var allFleetsInSameLocation = true;
            var hasMultipleSelected = selectedFleets.length >= 2;
            for (var i = 1; i < selectedFleets.length; i++) {
                if (selectedFleets[i].location !== selectedFleets[i - 1].location) {
                    allFleetsInSameLocation = false;
                    break;
                }
            }
            var fleetInfos = [];
            for (var i = 0; i < selectedFleets.length; i++) {
                var fleet = selectedFleets[i];
                fleetInfos.push(FleetInfo_1.default({
                    key: fleet.id,
                    fleet: fleet,
                    hasMultipleSelected: hasMultipleSelected,
                    isInspecting: this.props.isInspecting,
                    isNotDetected: this.props.isInspecting && !this.props.player.fleetIsFullyIdentified(fleet)
                }));
            }
            var fleetSelectionControls = null;
            if (hasMultipleSelected) {
                var fleetStealthsAreClashing = selectedFleets.length === 2 && selectedFleets[0].isStealthy !== selectedFleets[1].isStealthy;
                var mergeProps = {
                    className: "fleet-selection-controls-merge"
                };
                if (allFleetsInSameLocation && !this.props.isInspecting && !fleetStealthsAreClashing) {
                    mergeProps.onClick = this.mergeFleets;
                }
                else {
                    mergeProps.disabled = true;
                    mergeProps.className += " disabled";
                }
                var reorganizeProps = {
                    className: "fleet-selection-controls-reorganize"
                };
                if (allFleetsInSameLocation && selectedFleets.length === 2 && !this.props.isInspecting &&
                    !fleetStealthsAreClashing) {
                    reorganizeProps.onClick = this.reorganizeFleets;
                }
                else {
                    reorganizeProps.disabled = true;
                    reorganizeProps.className += " disabled";
                }
                fleetSelectionControls = React.DOM.div({
                    className: "fleet-selection-controls"
                }, React.DOM.button(reorganizeProps, "reorganize"), React.DOM.button(mergeProps, "merge"));
            }
            var fleetContents = null;
            if (!hasMultipleSelected) {
                fleetContents = FleetContents_2.default({
                    fleet: selectedFleets[0],
                    player: this.props.player
                });
            }
            var isReorganizing = this.props.currentlyReorganizing.length > 0;
            var reorganizeElement = null;
            if (isReorganizing) {
                reorganizeElement = FleetReorganization_1.default({
                    fleets: this.props.currentlyReorganizing,
                    closeReorganization: this.props.closeReorganization
                });
            }
            return (React.DOM.div({
                className: "fleet-selection",
                ref: function (component) {
                    _this.ref_TODO_main = component;
                }
            }, fleetSelectionControls, hasMultipleSelected ? null : fleetInfos, React.DOM.div({
                className: "fleet-selection-selected-wrapper"
            }, React.DOM.div({
                className: "fleet-selection-selected" + (isReorganizing ? " reorganizing" : ""),
                ref: function (component) {
                    _this.ref_TODO_selected = component;
                }
            }, hasMultipleSelected ? fleetInfos : null, fleetContents), reorganizeElement)));
        };
        return FleetSelectionComponent;
    }(React.Component));
    exports.FleetSelectionComponent = FleetSelectionComponent;
    var Factory = React.createFactory(FleetSelectionComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/technologies/technologyPrioritySlider", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_31) {
    "use strict";
    var TechnologyPrioritySliderComponent = (function (_super) {
        __extends(TechnologyPrioritySliderComponent, _super);
        function TechnologyPrioritySliderComponent(props) {
            _super.call(this, props);
            this.displayName = "TechnologyPrioritySlider";
            this.state =
                {};
            this.bindMethods();
        }
        ;
        TechnologyPrioritySliderComponent.prototype.bindMethods = function () {
            this.getPlayerPriority = this.getPlayerPriority.bind(this);
            this.updatePriority = this.updatePriority.bind(this);
            this.handlePriorityChange = this.handlePriorityChange.bind(this);
        };
        TechnologyPrioritySliderComponent.prototype.componentDidMount = function () {
            eventManager_31.default.addEventListener("technologyPrioritiesUpdated", this.updatePriority);
        };
        TechnologyPrioritySliderComponent.prototype.componentWillUnmount = function () {
            eventManager_31.default.removeEventListener("technologyPrioritiesUpdated", this.updatePriority);
        };
        TechnologyPrioritySliderComponent.prototype.isTechnologyLocked = function () {
            return this.props.playerTechnology.technologies[this.props.technology.key].priorityIsLocked;
        };
        TechnologyPrioritySliderComponent.prototype.getPlayerPriority = function () {
            return this.props.playerTechnology.technologies[this.props.technology.key].priority;
        };
        TechnologyPrioritySliderComponent.prototype.updatePriority = function () {
            this.setState({
                priority: this.getPlayerPriority()
            });
        };
        TechnologyPrioritySliderComponent.prototype.handlePriorityChange = function (e) {
            if (this.isTechnologyLocked()) {
                return;
            }
            var target = e.target;
            this.props.playerTechnology.setTechnologyPriority(this.props.technology, parseFloat(target.value));
        };
        TechnologyPrioritySliderComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "technology-progress-bar-priority-container"
            }, React.DOM.span({
                className: "technology-progress-bar-predicted-research"
            }, "+" + (this.props.researchPoints * this.state.priority).toFixed(1)), React.DOM.input({
                className: "technology-progress-bar-priority",
                type: "range",
                min: 0,
                max: 1,
                step: 0.01,
                value: "" + this.state.priority,
                onChange: this.handlePriorityChange,
                disabled: this.isTechnologyLocked()
            })));
        };
        return TechnologyPrioritySliderComponent;
    }(React.Component));
    exports.TechnologyPrioritySliderComponent = TechnologyPrioritySliderComponent;
    var Factory = React.createFactory(TechnologyPrioritySliderComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/technologies/Technology", ["require", "exports", "src/uicomponents/technologies/technologyPrioritySlider"], function (require, exports, technologyPrioritySlider_1) {
    "use strict";
    var TechnologyComponent = (function (_super) {
        __extends(TechnologyComponent, _super);
        function TechnologyComponent(props) {
            _super.call(this, props);
            this.displayName = "Technology";
            this.bindMethods();
        }
        TechnologyComponent.prototype.bindMethods = function () {
            this.togglePriorityLock = this.togglePriorityLock.bind(this);
        };
        TechnologyComponent.prototype.togglePriorityLock = function () {
            var pt = this.props.playerTechnology;
            var technology = this.props.technology;
            pt.technologies[technology.key].priorityIsLocked = !pt.technologies[technology.key].priorityIsLocked;
            this.forceUpdate();
        };
        TechnologyComponent.prototype.render = function () {
            var technology = this.props.technology;
            var isAtMaxLevel = false;
            var playerTechnology = this.props.playerTechnology;
            var techData = playerTechnology.technologies[technology.key];
            var forCurrentLevel = playerTechnology.getResearchNeededForTechnologyLevel(techData.level);
            var forNextLevel = playerTechnology.getResearchNeededForTechnologyLevel(techData.level + 1);
            var progressForLevel = techData.totalResearch - forCurrentLevel;
            var neededToProgressLevel = forNextLevel - forCurrentLevel;
            var relativeProgress;
            if (techData.level === technology.maxLevel) {
                relativeProgress = 1;
                progressForLevel =
                    techData.totalResearch - playerTechnology.getResearchNeededForTechnologyLevel(techData.level - 1);
                neededToProgressLevel = progressForLevel;
                isAtMaxLevel = true;
            }
            else {
                relativeProgress = progressForLevel / neededToProgressLevel;
            }
            return (React.DOM.div({
                className: "technology-listing"
            }, React.DOM.div({
                className: "technology-name"
            }, technology.displayName), React.DOM.div({
                className: "technology-level"
            }, "Level " + techData.level), React.DOM.div({
                className: "technology-progress-bar-container"
            }, React.DOM.div({
                className: "technology-progress-bar" +
                    (isAtMaxLevel ? " technology-progress-bar-max-level" : ""),
                style: {
                    width: "" + (relativeProgress * 100) + "%"
                }
            }), React.DOM.div({
                className: "technology-progress-bar-value"
            }, "" + progressForLevel.toFixed(1) + " / " + Math.ceil(neededToProgressLevel)), technologyPrioritySlider_1.default({
                playerTechnology: this.props.playerTechnology,
                technology: this.props.technology,
                researchPoints: this.props.researchPoints
            })), React.DOM.button({
                className: "technology-toggle-priority-lock" + (techData.priorityIsLocked ? " locked" : " unlocked"),
                onClick: this.togglePriorityLock,
                disabled: isAtMaxLevel
            }, null)));
        };
        return TechnologyComponent;
    }(React.Component));
    exports.TechnologyComponent = TechnologyComponent;
    var Factory = React.createFactory(TechnologyComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/Trade", ["require", "exports"], function (require, exports) {
    "use strict";
    var Trade = (function () {
        function Trade(player) {
            this.stagedItems = {};
            this.player = player;
            this.setAllTradeableItems();
        }
        Trade.prototype.setAllTradeableItems = function () {
            this.allItems =
                {
                    money: {
                        key: "money",
                        amount: this.player.money
                    }
                };
        };
        Trade.prototype.getItemsAvailableForTrade = function () {
            var available = {};
            for (var key in this.allItems) {
                var stagedAmount = this.stagedItems[key] ? this.stagedItems[key].amount : 0;
                available[key] =
                    {
                        key: key,
                        amount: this.allItems[key].amount - stagedAmount
                    };
            }
            return available;
        };
        Trade.prototype.removeStagedItem = function (key) {
            this.stagedItems[key] = null;
            delete this.stagedItems[key];
        };
        Trade.prototype.removeAllStagedItems = function () {
            for (var key in this.stagedItems) {
                this.removeStagedItem(key);
            }
        };
        Trade.prototype.stageItem = function (key, amount) {
            if (!this.stagedItems[key]) {
                this.stagedItems[key] =
                    {
                        key: key,
                        amount: amount
                    };
            }
            else {
                this.stagedItems[key].amount += amount;
                if (this.stagedItems[key].amount <= 0) {
                    this.removeStagedItem(key);
                }
            }
        };
        Trade.prototype.setStagedItemAmount = function (key, newAmount) {
            if (newAmount <= 0) {
                this.removeStagedItem(key);
            }
            else {
                var clamped = Math.min(this.allItems[key].amount, newAmount);
                this.stagedItems[key].amount = clamped;
            }
        };
        Trade.prototype.handleTradeOfItem = function (key, amount, targetPlayer) {
            switch (key) {
                case "money":
                    {
                        this.player.money -= amount;
                        targetPlayer.money += amount;
                    }
            }
        };
        Trade.prototype.executeAllStagedTrades = function (targetPlayer) {
            for (var key in this.stagedItems) {
                this.handleTradeOfItem(key, this.stagedItems[key].amount, targetPlayer);
            }
        };
        Trade.prototype.updateAfterExecutedTrade = function () {
            this.setAllTradeableItems();
            this.removeAllStagedItems();
        };
        return Trade;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Trade;
    var _a;
});
define("src/uicomponents/trade/TradeMoney", ["require", "exports", "src/uicomponents/mixins/DragPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, DragPositioner_9, applyMixins_11) {
    "use strict";
    var TradeMoneyComponent = (function (_super) {
        __extends(TradeMoneyComponent, _super);
        function TradeMoneyComponent(props) {
            _super.call(this, props);
            this.displayName = "TradeMoney";
            this.bindMethods();
            this.dragPositioner = new DragPositioner_9.default(this, this.props.dragPositionerProps);
            this.dragPositioner.onDragStart = this.onDragStart;
            this.dragPositioner.onDragEnd = this.onDragEnd;
            applyMixins_11.default(this, this.dragPositioner);
        }
        TradeMoneyComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
            this.onDragEnd = this.onDragEnd.bind(this);
            this.captureEvent = this.captureEvent.bind(this);
            this.onDragStart = this.onDragStart.bind(this);
            this.handleMoneyAmountChange = this.handleMoneyAmountChange.bind(this);
        };
        TradeMoneyComponent.prototype.onDragStart = function () {
            this.props.onDragStart(this.props.keyTODO);
        };
        TradeMoneyComponent.prototype.onDragEnd = function () {
            this.props.onDragEnd();
        };
        TradeMoneyComponent.prototype.handleClick = function () {
            this.props.onClick(this.props.keyTODO);
        };
        TradeMoneyComponent.prototype.handleMoneyAmountChange = function (e) {
            var target = e.target;
            var value = parseInt(target.value);
            this.props.adjustItemAmount(this.props.keyTODO, value);
        };
        TradeMoneyComponent.prototype.captureEvent = function (e) {
            e.stopPropagation();
        };
        TradeMoneyComponent.prototype.render = function () {
            var rowProps = {
                className: "tradeable-items-list-item"
            };
            if (this.props.onDragStart) {
                rowProps.className += " draggable";
                rowProps.onMouseDown = rowProps.onTouchStart = this.dragPositioner.handleReactDownEvent;
                if (this.dragPositioner.isDragging) {
                    rowProps.style = this.dragPositioner.getStyleAttributes();
                    rowProps.className += " dragging";
                }
            }
            else if (this.props.onClick) {
                rowProps.onClick = this.handleClick;
            }
            var moneyElement;
            if (this.props.adjustItemAmount) {
                var moneyProps = {
                    className: "trade-money-money-available trade-item-adjust",
                    type: "number",
                    min: 0,
                    max: this.props.maxMoneyAvailable,
                    step: 1,
                    value: "" + this.props.moneyAmount,
                    onChange: this.handleMoneyAmountChange,
                    onClick: this.captureEvent,
                    onMouseDown: this.captureEvent,
                    onTouchStart: this.captureEvent
                };
                moneyElement = React.DOM.input(moneyProps);
            }
            else {
                moneyElement = React.DOM.span({
                    className: "trade-money-money-available"
                }, this.props.moneyAmount);
            }
            return (React.DOM.tr(rowProps, React.DOM.td(null, React.DOM.span({
                className: "trade-money-title"
            }, this.props.title), moneyElement)));
        };
        return TradeMoneyComponent;
    }(React.Component));
    exports.TradeMoneyComponent = TradeMoneyComponent;
    var Factory = React.createFactory(TradeMoneyComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/trade/TradeableItemsList", ["require", "exports", "src/uicomponents/trade/TradeMoney", "src/uicomponents/unitlist/List"], function (require, exports, TradeMoney_1, List_3) {
    "use strict";
    var TradeableItemsListComponent = (function (_super) {
        __extends(TradeableItemsListComponent, _super);
        function TradeableItemsListComponent(props) {
            _super.call(this, props);
            this.displayName = "TradeableItemsList";
            this.bindMethods();
        }
        TradeableItemsListComponent.prototype.bindMethods = function () {
            this.makeRowForTradeableItem = this.makeRowForTradeableItem.bind(this);
        };
        TradeableItemsListComponent.prototype.makeRowForTradeableItem = function (item) {
            switch (item.key) {
                case "money":
                    {
                        return ({
                            key: "money",
                            data: {
                                keyTODO: "money",
                                rowConstructor: TradeMoney_1.default,
                                title: "Money",
                                moneyAmount: item.amount,
                                sortOrder: 0,
                                onDragStart: this.props.onDragStart,
                                onDragEnd: this.props.onDragEnd,
                                onClick: this.props.onItemClick,
                                adjustItemAmount: this.props.adjustItemAmount,
                                maxMoneyAvailable: (this.props.availableItems && this.props.availableItems["money"]) ?
                                    this.props.availableItems["money"].amount : undefined
                            }
                        });
                    }
                default:
                    {
                        return ({
                            key: item.key,
                            data: {
                                rowConstructor: TradeMoney_1.default,
                                title: item.key,
                                moneyAmount: item.amount,
                                sortOrder: 1
                            }
                        });
                    }
            }
        };
        TradeableItemsListComponent.prototype.render = function () {
            var tradeableItems = this.props.tradeableItems;
            var rows = [];
            for (var key in tradeableItems) {
                rows.push(this.makeRowForTradeableItem(tradeableItems[key]));
            }
            var columns = [
                {
                    label: "Item",
                    key: "item",
                    defaultOrder: "asc",
                    propToSortBy: "sortOrder"
                }
            ];
            return (React.DOM.div({
                className: "tradeable-items-list fixed-table-parent"
            }, List_3.default({
                listItems: rows,
                initialColumns: columns,
                initialSortOrder: [columns[0]],
                noHeader: this.props.noListHeader
            })));
        };
        return TradeableItemsListComponent;
    }(React.Component));
    exports.TradeableItemsListComponent = TradeableItemsListComponent;
    var Factory = React.createFactory(TradeableItemsListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/trade/TradeableItems", ["require", "exports", "src/uicomponents/trade/TradeableItemsList"], function (require, exports, TradeableItemsList_1) {
    "use strict";
    var TradeableItemsComponent = (function (_super) {
        __extends(TradeableItemsComponent, _super);
        function TradeableItemsComponent(props) {
            _super.call(this, props);
            this.displayName = "TradeableItems";
            this.bindMethods();
        }
        TradeableItemsComponent.prototype.bindMethods = function () {
            this.handleMouseUp = this.handleMouseUp.bind(this);
        };
        TradeableItemsComponent.prototype.handleMouseUp = function () {
            this.props.onMouseUp();
        };
        TradeableItemsComponent.prototype.render = function () {
            var divProps = {
                className: "tradeable-items"
            };
            if (this.props.onMouseUp) {
                divProps.onMouseUp = this.handleMouseUp;
            }
            if (this.props.isInvalidDropTarget) {
                divProps.className += " invalid-drop-target";
            }
            return (React.DOM.div(divProps, !this.props.header ? null : React.DOM.div({
                className: "tradeable-items-header"
            }, this.props.header), TradeableItemsList_1.default({
                tradeableItems: this.props.tradeableItems,
                availableItems: this.props.availableItems,
                noListHeader: this.props.noListHeader,
                onDragStart: this.props.onDragStart,
                onDragEnd: this.props.onDragEnd,
                onItemClick: this.props.onItemClick,
                adjustItemAmount: this.props.adjustItemAmount
            })));
        };
        return TradeableItemsComponent;
    }(React.Component));
    exports.TradeableItemsComponent = TradeableItemsComponent;
    var Factory = React.createFactory(TradeableItemsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/trade/TradeOverview", ["require", "exports", "src/uicomponents/trade/TradeableItems", "src/Trade"], function (require, exports, TradeableItems_1, Trade_1) {
    "use strict";
    var TradeOverviewComponent = (function (_super) {
        __extends(TradeOverviewComponent, _super);
        function TradeOverviewComponent(props) {
            _super.call(this, props);
            this.displayName = "TradeOverview";
            this.selfPlayerTrade = undefined;
            this.otherPlayerTrade = undefined;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        TradeOverviewComponent.prototype.bindMethods = function () {
            this.handleDragEnd = this.handleDragEnd.bind(this);
            this.handleStagingDragStart = this.handleStagingDragStart.bind(this);
            this.handleAvailableDragStart = this.handleAvailableDragStart.bind(this);
            this.handleRemoveStagedItem = this.handleRemoveStagedItem.bind(this);
            this.getActiveTrade = this.getActiveTrade.bind(this);
            this.handleStageItem = this.handleStageItem.bind(this);
            this.handleAdjustStagedItemAmount = this.handleAdjustStagedItemAmount.bind(this);
            this.handleStagingAreaMouseUp = this.handleStagingAreaMouseUp.bind(this);
            this.handleAvailableMouseUp = this.handleAvailableMouseUp.bind(this);
            this.handleOk = this.handleOk.bind(this);
            this.handleCancel = this.handleCancel.bind(this);
        };
        TradeOverviewComponent.prototype.componentWillMount = function () {
            this.selfPlayerTrade = new Trade_1.default(this.props.selfPlayer);
            this.otherPlayerTrade = new Trade_1.default(this.props.otherPlayer);
        };
        TradeOverviewComponent.prototype.getInitialStateTODO = function () {
            return ({
                currentAvailableItemDragKey: undefined,
                currentStagingItemDragKey: undefined,
                currentDragItemPlayer: undefined
            });
        };
        TradeOverviewComponent.prototype.handleCancel = function () {
            this.props.handleClose();
        };
        TradeOverviewComponent.prototype.handleOk = function () {
            this.selfPlayerTrade.executeAllStagedTrades(this.props.otherPlayer);
            this.otherPlayerTrade.executeAllStagedTrades(this.props.selfPlayer);
            this.selfPlayerTrade.updateAfterExecutedTrade();
            this.otherPlayerTrade.updateAfterExecutedTrade();
            this.forceUpdate();
        };
        TradeOverviewComponent.prototype.getActiveTrade = function (player) {
            var playerStringToUse = player || this.state.currentDragItemPlayer;
            if (playerStringToUse === "self") {
                return this.selfPlayerTrade;
            }
            else if (playerStringToUse === "other") {
                return this.otherPlayerTrade;
            }
            else
                return null;
        };
        TradeOverviewComponent.prototype.handleStageItem = function (player, key) {
            var activeTrade = this.getActiveTrade(player);
            var availableItems = activeTrade.getItemsAvailableForTrade();
            var availableAmount = availableItems[key].amount;
            if (availableAmount === 1) {
                activeTrade.stageItem(key, 1);
            }
            else {
                activeTrade.stageItem(key, availableAmount);
            }
            if (!this.state.currentDragItemPlayer) {
                this.forceUpdate();
            }
        };
        TradeOverviewComponent.prototype.handleAdjustStagedItemAmount = function (player, key, newAmount) {
            var activeTrade = this.getActiveTrade(player);
            {
                activeTrade.setStagedItemAmount(key, newAmount);
            }
            this.forceUpdate();
        };
        TradeOverviewComponent.prototype.handleRemoveStagedItem = function (player, key) {
            var activeTrade = this.getActiveTrade(player);
            activeTrade.removeStagedItem(key);
            if (!this.state.currentDragItemPlayer) {
                this.forceUpdate();
            }
        };
        TradeOverviewComponent.prototype.handleAvailableDragStart = function (player, key) {
            this.setState({
                currentAvailableItemDragKey: key,
                currentDragItemPlayer: player
            });
        };
        TradeOverviewComponent.prototype.handleStagingDragStart = function (player, key) {
            this.setState({
                currentStagingItemDragKey: key,
                currentDragItemPlayer: player
            });
        };
        TradeOverviewComponent.prototype.handleDragEnd = function () {
            this.setState({
                currentAvailableItemDragKey: undefined,
                currentStagingItemDragKey: undefined,
                currentDragItemPlayer: undefined
            });
        };
        TradeOverviewComponent.prototype.handleAvailableMouseUp = function () {
            if (this.state.currentStagingItemDragKey) {
                this.handleRemoveStagedItem(null, this.state.currentStagingItemDragKey);
            }
        };
        TradeOverviewComponent.prototype.handleStagingAreaMouseUp = function () {
            if (this.state.currentAvailableItemDragKey) {
                this.handleStageItem(null, this.state.currentAvailableItemDragKey);
            }
        };
        TradeOverviewComponent.prototype.render = function () {
            var hasDragItem = Boolean(this.state.currentDragItemPlayer);
            var selfPlayerAcceptsDrop = this.state.currentDragItemPlayer === "self";
            var otherPlayerAcceptsDrop = this.state.currentDragItemPlayer === "other";
            var selfAvailableItems = this.selfPlayerTrade.getItemsAvailableForTrade();
            var otherAvailableItems = this.otherPlayerTrade.getItemsAvailableForTrade();
            return (React.DOM.div({
                className: "trade-overview"
            }, React.DOM.div({
                className: "tradeable-items-container available-items-container"
            }, TradeableItems_1.default({
                header: "tradeable items " + this.props.selfPlayer.name,
                tradeableItems: selfAvailableItems,
                noListHeader: true,
                isInvalidDropTarget: hasDragItem && !selfPlayerAcceptsDrop,
                onDragStart: this.handleAvailableDragStart.bind(this, "self"),
                onDragEnd: this.handleDragEnd,
                onMouseUp: this.handleAvailableMouseUp,
                onItemClick: this.handleStageItem.bind(this, "self")
            }), TradeableItems_1.default({
                header: "tradeable items " + this.props.otherPlayer.name,
                tradeableItems: otherAvailableItems,
                noListHeader: true,
                isInvalidDropTarget: hasDragItem && !otherPlayerAcceptsDrop,
                onDragStart: this.handleAvailableDragStart.bind(this, "other"),
                onDragEnd: this.handleDragEnd,
                onMouseUp: this.handleAvailableMouseUp,
                onItemClick: this.handleStageItem.bind(this, "other")
            })), React.DOM.div({
                className: "tradeable-items-container trade-staging-areas-container"
            }, TradeableItems_1.default({
                tradeableItems: this.selfPlayerTrade.stagedItems,
                availableItems: this.selfPlayerTrade.allItems,
                noListHeader: true,
                isInvalidDropTarget: hasDragItem && !selfPlayerAcceptsDrop,
                onDragStart: this.handleStagingDragStart.bind(this, "self"),
                onDragEnd: this.handleDragEnd,
                onMouseUp: this.handleStagingAreaMouseUp,
                onItemClick: this.handleRemoveStagedItem.bind(this, "self"),
                adjustItemAmount: this.handleAdjustStagedItemAmount.bind(this, "self")
            }), TradeableItems_1.default({
                tradeableItems: this.otherPlayerTrade.stagedItems,
                availableItems: this.otherPlayerTrade.allItems,
                noListHeader: true,
                isInvalidDropTarget: hasDragItem && !otherPlayerAcceptsDrop,
                onDragStart: this.handleStagingDragStart.bind(this, "other"),
                onDragEnd: this.handleDragEnd,
                onMouseUp: this.handleStagingAreaMouseUp,
                onItemClick: this.handleRemoveStagedItem.bind(this, "other"),
                adjustItemAmount: this.handleAdjustStagedItemAmount.bind(this, "other")
            })), React.DOM.div({
                className: "trade-buttons-container"
            }, React.DOM.button({
                className: "trade-button",
                onClick: this.handleCancel
            }, "Cancel"), React.DOM.button({
                className: "trade-button trade-button-ok",
                onClick: this.handleOk
            }, "Ok"))));
        };
        return TradeOverviewComponent;
    }(React.Component));
    exports.TradeOverviewComponent = TradeOverviewComponent;
    var Factory = React.createFactory(TradeOverviewComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/diplomacy/DiplomacyActions", ["require", "exports", "src/uicomponents/trade/TradeOverview", "src/uicomponents/popups/TopMenuPopup", "src/uicomponents/popups/PopupManager"], function (require, exports, TradeOverview_1, TopMenuPopup_4, PopupManager_5) {
    "use strict";
    var DiplomacyActionsComponent = (function (_super) {
        __extends(DiplomacyActionsComponent, _super);
        function DiplomacyActionsComponent(props) {
            _super.call(this, props);
            this.displayName = "DiplomacyActions";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        DiplomacyActionsComponent.prototype.bindMethods = function () {
            this.makePopup = this.makePopup.bind(this);
            this.closePopup = this.closePopup.bind(this);
            this.togglePopup = this.togglePopup.bind(this);
            this.handleMakePeace = this.handleMakePeace.bind(this);
            this.handleDeclareWar = this.handleDeclareWar.bind(this);
        };
        DiplomacyActionsComponent.prototype.getInitialStateTODO = function () {
            return ({
                trade: undefined
            });
        };
        DiplomacyActionsComponent.prototype.closePopup = function (popupType) {
            this.ref_TODO_popupManager.closePopup(this.state[popupType]);
            var stateObj = {};
            stateObj[popupType] = undefined;
            this.setState(stateObj);
        };
        DiplomacyActionsComponent.prototype.makePopup = function (popupType) {
            var contentConstructor;
            var contentProps;
            var popupProps = {
                resizable: true,
                minWidth: 150,
                minHeight: 50,
                dragPositionerProps: {
                    containerDragOnly: true,
                    preventAutoResize: true
                }
            };
            switch (popupType) {
                case "trade":
                    {
                        contentConstructor = TradeOverview_1.default;
                        contentProps =
                            {
                                selfPlayer: this.props.player,
                                otherPlayer: this.props.targetPlayer,
                                handleClose: this.closePopup.bind(this, popupType)
                            };
                        break;
                    }
            }
            var id = this.ref_TODO_popupManager.makePopup({
                contentConstructor: TopMenuPopup_4.default,
                contentProps: {
                    contentConstructor: contentConstructor,
                    contentProps: contentProps,
                    handleClose: this.closePopup.bind(this, popupType)
                },
                popupProps: popupProps
            });
            var stateObj = {};
            stateObj[popupType] = id;
            this.setState(stateObj);
        };
        DiplomacyActionsComponent.prototype.togglePopup = function (popupType) {
            if (isFinite(this.state[popupType])) {
                this.closePopup(popupType);
            }
            else {
                this.makePopup(popupType);
            }
        };
        DiplomacyActionsComponent.prototype.handleDeclareWar = function () {
            this.props.player.diplomacyStatus.declareWarOn(this.props.targetPlayer);
            this.props.onUpdate();
        };
        DiplomacyActionsComponent.prototype.handleMakePeace = function () {
            this.props.player.diplomacyStatus.makePeaceWith(this.props.targetPlayer);
            this.props.onUpdate();
        };
        DiplomacyActionsComponent.prototype.render = function () {
            var _this = this;
            var player = this.props.player;
            var targetPlayer = this.props.targetPlayer;
            var declareWarProps = {
                className: "diplomacy-action-button"
            };
            if (player.diplomacyStatus.canDeclareWarOn(targetPlayer)) {
                declareWarProps.onClick = this.handleDeclareWar;
            }
            else {
                declareWarProps.disabled = true;
                declareWarProps.className += " disabled";
            }
            var makePeaceProps = {
                className: "diplomacy-action-button"
            };
            if (player.diplomacyStatus.canMakePeaceWith(targetPlayer)) {
                makePeaceProps.onClick = this.handleMakePeace;
            }
            else {
                makePeaceProps.disabled = true;
                makePeaceProps.className += " disabled";
            }
            return (React.DOM.div({
                className: "diplomacy-actions-container draggable-container"
            }, PopupManager_5.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), React.DOM.button({
                className: "light-box-close",
                onClick: this.props.closePopup
            }, "X"), React.DOM.div({
                className: "diplomacy-actions"
            }, React.DOM.div({
                className: "diplomacy-actions-header"
            }, targetPlayer.name), React.DOM.button(declareWarProps, "Declare war"), React.DOM.button(makePeaceProps, "Make peace"), React.DOM.button({
                className: "diplomacy-action-button",
                onClick: this.togglePopup.bind(this, "trade")
            }, "Trade"))));
        };
        return DiplomacyActionsComponent;
    }(React.Component));
    exports.DiplomacyActionsComponent = DiplomacyActionsComponent;
    var Factory = React.createFactory(DiplomacyActionsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/diplomacy/AttitudeModifierInfo", ["require", "exports", "src/utility"], function (require, exports, utility_31) {
    "use strict";
    var AttitudeModifierInfoComponent = (function (_super) {
        __extends(AttitudeModifierInfoComponent, _super);
        function AttitudeModifierInfoComponent(props) {
            _super.call(this, props);
            this.displayName = "AttitudeModifierInfo";
            this.bindMethods();
        }
        AttitudeModifierInfoComponent.prototype.bindMethods = function () {
            this.makeCell = this.makeCell.bind(this);
        };
        AttitudeModifierInfoComponent.prototype.makeCell = function (type) {
            var cellProps = {};
            cellProps.key = type;
            cellProps.className = "attitude-modifier-info-cell" +
                " attitude-modifier-info-" + type;
            var cellContent;
            switch (type) {
                case "endTurn":
                    {
                        if (this.props.endTurn < 0) {
                            cellContent = null;
                            return;
                        }
                    }
                case "strength":
                    {
                        var relativeValue = utility_31.getRelativeValue(this.props.strength, -20, 20);
                        relativeValue = utility_31.clamp(relativeValue, 0, 1);
                        var deviation = Math.abs(0.5 - relativeValue) * 2;
                        var hue = 110 * relativeValue;
                        var saturation = 0 + 50 * deviation;
                        if (deviation > 0.3)
                            saturation += 40;
                        var lightness = 70 - 20 * deviation;
                        cellProps.style =
                            {
                                color: "hsl(" +
                                    hue + "," +
                                    saturation + "%," +
                                    lightness + "%)"
                            };
                    }
                default:
                    {
                        cellContent = this.props[type];
                        if (isFinite(cellContent)) {
                            cellProps.className += " center-text";
                        }
                        break;
                    }
            }
            return (React.DOM.td(cellProps, cellContent));
        };
        AttitudeModifierInfoComponent.prototype.render = function () {
            var columns = this.props.activeColumns;
            var cells = [];
            for (var i = 0; i < columns.length; i++) {
                var cell = this.makeCell(columns[i].key);
                cells.push(cell);
            }
            return (React.DOM.tr({
                className: "diplomatic-status-player",
                onClick: this.props.handleClick
            }, cells));
        };
        return AttitudeModifierInfoComponent;
    }(React.Component));
    exports.AttitudeModifierInfoComponent = AttitudeModifierInfoComponent;
    var Factory = React.createFactory(AttitudeModifierInfoComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/mixins/AutoPositioner", ["require", "exports"], function (require, exports) {
    "use strict";
    var AutoPositioner = (function () {
        function AutoPositioner(owner) {
            this.owner = owner;
        }
        Object.defineProperty(AutoPositioner.prototype, "props", {
            get: function () {
                return this.owner.props.autoPositionerProps;
            },
            enumerable: true,
            configurable: true
        });
        AutoPositioner.prototype.componentDidMount = function () {
            this.setAutoPosition();
        };
        AutoPositioner.prototype.componentDidUpdate = function () {
            if (this.props.positionOnUpdate) {
                this.setAutoPosition();
            }
        };
        AutoPositioner.flipSide = function (side) {
            switch (side) {
                case "top":
                    {
                        return "bottom";
                    }
                case "bottom":
                    {
                        return "top";
                    }
                case "left":
                    {
                        return "right";
                    }
                case "right":
                    {
                        return "left";
                    }
                default:
                    {
                        throw new Error("Invalid side");
                    }
            }
        };
        AutoPositioner.elementFitsYSide = function (side, ownRect, parentRect) {
            switch (side) {
                case "top":
                    {
                        return parentRect.top - ownRect.height >= 0;
                    }
                case "bottom":
                    {
                        return parentRect.bottom + ownRect.height < window.innerHeight;
                    }
                default:
                    {
                        throw new Error("Invalid side");
                    }
            }
        };
        AutoPositioner.elementFitsXSide = function (side, ownRect, parentRect) {
            switch (side) {
                case "left":
                    {
                        return parentRect.left + ownRect.width < window.innerWidth;
                    }
                case "right":
                    {
                        return parentRect.right - ownRect.width >= 0;
                    }
                default:
                    {
                        throw new Error("Invalid side");
                    }
            }
        };
        AutoPositioner.prototype.setAutoPosition = function () {
            var parentRect = this.props.getParentClientRect();
            var ownNode = ReactDOM.findDOMNode(this.owner);
            var ownRect = ownNode.getBoundingClientRect();
            var ySide = this.props.ySide || "top";
            var xSide = this.props.xSide || "right";
            var yMargin = this.props.yMargin || 0;
            var xMargin = this.props.xMargin || 0;
            var fitsY = AutoPositioner.elementFitsYSide(ySide, ownRect, parentRect);
            if (!fitsY) {
                ySide = AutoPositioner.flipSide(ySide);
            }
            var fitsX = AutoPositioner.elementFitsXSide(xSide, ownRect, parentRect);
            if (!fitsX) {
                xSide = AutoPositioner.flipSide(xSide);
            }
            var top = null;
            var left = null;
            if (ySide === "top") {
                top = parentRect.top - ownRect.height - yMargin;
            }
            else {
                top = parentRect.bottom + yMargin;
            }
            if (xSide === "left") {
                left = parentRect.left - xMargin;
            }
            else {
                left = parentRect.right - ownRect.width + xMargin;
            }
            ownNode.style.left = "" + left + "px";
            ownNode.style.top = "" + top + "px";
        };
        return AutoPositioner;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AutoPositioner;
    var _a;
});
define("src/uicomponents/diplomacy/AttitudeModifierList", ["require", "exports", "src/uicomponents/unitlist/List", "src/uicomponents/diplomacy/AttitudeModifierInfo", "src/uicomponents/mixins/AutoPositioner", "src/uicomponents/mixins/applyMixins"], function (require, exports, List_4, AttitudeModifierInfo_1, AutoPositioner_1, applyMixins_12) {
    "use strict";
    var AttitudeModifierListComponent = (function (_super) {
        __extends(AttitudeModifierListComponent, _super);
        function AttitudeModifierListComponent(props) {
            _super.call(this, props);
            this.displayName = "AttitudeModifierList";
            if (this.props.autoPositionerProps) {
                applyMixins_12.default(this, new AutoPositioner_1.default(this));
            }
        }
        AttitudeModifierListComponent.prototype.render = function () {
            var modifiers = this.props.attitudeModifiers;
            var rows = [];
            rows.push({
                key: "baseOpinion",
                data: {
                    name: "AI Personality",
                    strength: this.props.baseOpinion,
                    endTurn: -1,
                    sortOrder: -1,
                    rowConstructor: AttitudeModifierInfo_1.default
                }
            });
            for (var i = 0; i < modifiers.length; i++) {
                var modifier = modifiers[i];
                if (modifier.isOverRidden)
                    continue;
                rows.push({
                    key: modifier.template.type,
                    data: {
                        name: modifier.template.displayName,
                        strength: modifier.getAdjustedStrength(),
                        endTurn: modifier.endTurn,
                        sortOrder: 0,
                        rowConstructor: AttitudeModifierInfo_1.default
                    }
                });
            }
            var columns = [
                {
                    label: "Name",
                    key: "name",
                    defaultOrder: "asc",
                    propToSortBy: "sortOrder"
                },
                {
                    label: "Effect",
                    key: "strength",
                    defaultOrder: "asc"
                },
                {
                    label: "Ends on",
                    key: "endTurn",
                    defaultOrder: "desc"
                }
            ];
            return (React.DOM.div({ className: "attitude-modifier-list auto-position fixed-table-parent" }, List_4.default({
                listItems: rows,
                initialColumns: columns,
                initialSortOrder: [columns[0], columns[1], columns[2]]
            })));
        };
        return AttitudeModifierListComponent;
    }(React.Component));
    exports.AttitudeModifierListComponent = AttitudeModifierListComponent;
    var Factory = React.createFactory(AttitudeModifierListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/diplomacy/Opinion", ["require", "exports", "src/uicomponents/diplomacy/AttitudeModifierList", "src/utility"], function (require, exports, AttitudeModifierList_1, utility_32) {
    "use strict";
    var OpinionComponent = (function (_super) {
        __extends(OpinionComponent, _super);
        function OpinionComponent(props) {
            _super.call(this, props);
            this.displayName = "Opinion";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        OpinionComponent.prototype.bindMethods = function () {
            this.getColor = this.getColor.bind(this);
            this.getOpinionTextNodeRect = this.getOpinionTextNodeRect.bind(this);
            this.setTooltip = this.setTooltip.bind(this);
            this.clearTooltip = this.clearTooltip.bind(this);
        };
        OpinionComponent.prototype.getInitialStateTODO = function () {
            return ({
                hasAttitudeModifierTootlip: false
            });
        };
        OpinionComponent.prototype.setTooltip = function () {
            this.setState({ hasAttitudeModifierTootlip: true });
        };
        OpinionComponent.prototype.clearTooltip = function () {
            this.setState({ hasAttitudeModifierTootlip: false });
        };
        OpinionComponent.prototype.getOpinionTextNodeRect = function () {
            var firstChild = ReactDOM.findDOMNode(this).firstChild;
            return firstChild.getBoundingClientRect();
        };
        OpinionComponent.prototype.getColor = function () {
            var relativeValue = utility_32.getRelativeValue(this.props.opinion, -30, 30);
            relativeValue = utility_32.clamp(relativeValue, 0, 1);
            var deviation = Math.abs(0.5 - relativeValue) * 2;
            var hue = 110 * relativeValue;
            var saturation = 0 + 50 * deviation;
            if (deviation > 0.3)
                saturation += 40;
            var lightness = 70 - 20 * deviation;
            return ("hsl(" +
                hue + "," +
                saturation + "%," +
                lightness + "%)");
        };
        OpinionComponent.prototype.render = function () {
            var tooltip = null;
            if (this.state.hasAttitudeModifierTootlip) {
                tooltip = AttitudeModifierList_1.default({
                    attitudeModifiers: this.props.attitudeModifiers,
                    baseOpinion: this.props.baseOpinion,
                    autoPositionerProps: {
                        getParentClientRect: this.getOpinionTextNodeRect,
                        positionOnUpdate: true,
                        ySide: "top",
                        xSide: "right",
                        yMargin: 10
                    }
                });
            }
            return (React.DOM.div({
                className: "player-opinion",
                onMouseEnter: this.setTooltip,
                onMouseLeave: this.clearTooltip
            }, React.DOM.span({
                style: {
                    color: this.getColor()
                }
            }, this.props.opinion), tooltip));
        };
        return OpinionComponent;
    }(React.Component));
    exports.OpinionComponent = OpinionComponent;
    var Factory = React.createFactory(OpinionComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/diplomacy/DiplomaticStatusPlayer", ["require", "exports", "src/uicomponents/diplomacy/Opinion", "src/uicomponents/PlayerFlag"], function (require, exports, Opinion_1, PlayerFlag_6) {
    "use strict";
    var DiplomaticStatusPlayerComponent = (function (_super) {
        __extends(DiplomaticStatusPlayerComponent, _super);
        function DiplomaticStatusPlayerComponent(props) {
            _super.call(this, props);
            this.displayName = "DiplomaticStatusPlayer";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        DiplomaticStatusPlayerComponent.prototype.bindMethods = function () {
            this.makeCell = this.makeCell.bind(this);
        };
        DiplomaticStatusPlayerComponent.prototype.getInitialStateTODO = function () {
            return ({
                hasAttitudeModifierTootlip: false
            });
        };
        DiplomaticStatusPlayerComponent.prototype.makeCell = function (type) {
            var className = "diplomatic-status-player-cell" + " diplomatic-status-" + type;
            if (type === "flag") {
                if (!this.props.player) {
                    return (React.DOM.td({
                        key: type,
                        className: className
                    }, null));
                }
                return (React.DOM.td({
                    key: type,
                    className: className
                }, PlayerFlag_6.default({
                    flag: this.props.player.flag,
                    props: {
                        className: "diplomacy-status-player-icon"
                    }
                })));
            }
            if (type === "opinion") {
                return (React.DOM.td({
                    key: type,
                    className: className
                }, Opinion_1.default({
                    attitudeModifiers: this.props.attitudeModifiers,
                    opinion: this.props.opinion,
                    baseOpinion: this.props.baseOpinion
                })));
            }
            if (type === "player") {
                className += " player-name";
            }
            return (React.DOM.td({
                key: type,
                className: className
            }, this.props[type]));
        };
        DiplomaticStatusPlayerComponent.prototype.render = function () {
            var columns = this.props.activeColumns;
            var cells = [];
            for (var i = 0; i < columns.length; i++) {
                var cell = this.makeCell(columns[i].key);
                cells.push(cell);
            }
            var rowProps = {
                className: "diplomatic-status-player",
                onClick: this.props.handleClick
            };
            return (React.DOM.tr(rowProps, cells));
        };
        return DiplomaticStatusPlayerComponent;
    }(React.Component));
    exports.DiplomaticStatusPlayerComponent = DiplomaticStatusPlayerComponent;
    var Factory = React.createFactory(DiplomaticStatusPlayerComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/diplomacy/DiplomacyOverview", ["require", "exports", "src/uicomponents/unitlist/List", "src/uicomponents/diplomacy/DiplomacyActions", "src/uicomponents/diplomacy/DiplomaticStatusPlayer", "src/DiplomacyState", "src/uicomponents/popups/PopupManager"], function (require, exports, List_5, DiplomacyActions_1, DiplomaticStatusPlayer_1, DiplomacyState_2, PopupManager_6) {
    "use strict";
    var DiplomacyOverviewComponent = (function (_super) {
        __extends(DiplomacyOverviewComponent, _super);
        function DiplomacyOverviewComponent(props) {
            _super.call(this, props);
            this.displayName = "DiplomacyOverview";
            this.bindMethods();
        }
        DiplomacyOverviewComponent.prototype.bindMethods = function () {
            this.makeDiplomacyActionsPopup = this.makeDiplomacyActionsPopup.bind(this);
        };
        DiplomacyOverviewComponent.prototype.makeDiplomacyActionsPopup = function (rowItem) {
            var player = rowItem.data.player;
            if (!player)
                return;
            this.ref_TODO_popupManager.makePopup({
                contentConstructor: DiplomacyActions_1.default,
                contentProps: {
                    player: this.props.player,
                    targetPlayer: player,
                    onUpdate: this.forceUpdate.bind(this)
                },
                popupProps: {
                    dragPositionerProps: {
                        preventAutoResize: true,
                        containerDragOnly: true
                    }
                }
            });
        };
        DiplomacyOverviewComponent.prototype.render = function () {
            var _this = this;
            var unmetPlayerCount = this.props.totalPlayerCount -
                Object.keys(this.props.metPlayers).length - 1;
            var rows = [];
            for (var playerId in this.props.statusByPlayer) {
                var player = this.props.metPlayers[playerId];
                var status = this.props.player.diplomacyStatus.statusByPlayer[playerId];
                rows.push({
                    key: player.id,
                    data: {
                        player: player,
                        name: player.name,
                        baseOpinion: player.diplomacyStatus.getBaseOpinion(),
                        status: DiplomacyState_2.default[status],
                        statusEnum: status,
                        opinion: player.diplomacyStatus.getOpinionOf(this.props.player),
                        attitudeModifiers: player.diplomacyStatus.attitudeModifiersByPlayer[this.props.player.id],
                        rowConstructor: DiplomaticStatusPlayer_1.default
                    }
                });
            }
            for (var i = 0; i < unmetPlayerCount; i++) {
                rows.push({
                    key: "unmet" + i,
                    data: {
                        name: "?????",
                        status: "unmet",
                        statusEnum: 99999 + i,
                        opinion: null,
                        rowConstructor: DiplomaticStatusPlayer_1.default
                    }
                });
            }
            var columns = [
                {
                    label: "",
                    key: "flag",
                    defaultOrder: "asc",
                    propToSortBy: "name"
                },
                {
                    label: "Name",
                    key: "name",
                    defaultOrder: "asc"
                },
                {
                    label: "Status",
                    key: "status",
                    defaultOrder: "asc",
                    propToSortBy: "statusEnum"
                },
                {
                    label: "Opinion",
                    key: "opinion",
                    defaultOrder: "desc"
                }
            ];
            return (React.DOM.div({ className: "diplomacy-overview" }, PopupManager_6.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), React.DOM.div({ className: "diplomacy-status-list fixed-table-parent" }, List_5.default({
                listItems: rows,
                initialColumns: columns,
                initialSortOrder: [columns[0]],
                onRowChange: this.makeDiplomacyActionsPopup
            }))));
        };
        return DiplomacyOverviewComponent;
    }(React.Component));
    exports.DiplomacyOverviewComponent = DiplomacyOverviewComponent;
    var Factory = React.createFactory(DiplomacyOverviewComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/unitlist/ItemEquip", ["require", "exports", "src/uicomponents/unitlist/MenuUnitInfo", "src/uicomponents/unitlist/UnitList", "src/uicomponents/unitlist/ItemList"], function (require, exports, MenuUnitInfo_2, UnitList_2, ItemList_2) {
    "use strict";
    var ItemEquipComponent = (function (_super) {
        __extends(ItemEquipComponent, _super);
        function ItemEquipComponent(props) {
            _super.call(this, props);
            this.displayName = "ItemEquip";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        ItemEquipComponent.prototype.bindMethods = function () {
            this.handleDragStart = this.handleDragStart.bind(this);
            this.handleDragEnd = this.handleDragEnd.bind(this);
            this.handleDrop = this.handleDrop.bind(this);
            this.handleSelectRow = this.handleSelectRow.bind(this);
        };
        ItemEquipComponent.prototype.getInitialStateTODO = function () {
            return ({
                selectedUnit: null,
                currentDragItem: null
            });
        };
        ItemEquipComponent.prototype.handleSelectRow = function (row) {
            if (!row.data.unit)
                return;
            this.setState({
                selectedUnit: row.data.unit
            });
        };
        ItemEquipComponent.prototype.handleDragStart = function (item) {
            this.setState({
                currentDragItem: item
            });
        };
        ItemEquipComponent.prototype.handleDragEnd = function (dropSuccesful) {
            if (dropSuccesful === void 0) { dropSuccesful = false; }
            if (!dropSuccesful && this.state.currentDragItem && this.state.selectedUnit) {
                var item = this.state.currentDragItem;
                if (this.state.selectedUnit.items[item.template.slot] === item) {
                    this.state.selectedUnit.removeItem(item);
                }
            }
            this.setState({
                currentDragItem: null
            });
        };
        ItemEquipComponent.prototype.handleDrop = function () {
            var item = this.state.currentDragItem;
            var unit = this.state.selectedUnit;
            if (unit && item) {
                if (unit.items[item.template.slot]) {
                    unit.removeItemAtSlot(item.template.slot);
                }
                unit.addItem(item);
            }
            this.handleDragEnd(true);
        };
        ItemEquipComponent.prototype.render = function () {
            var player = this.props.player;
            return (React.DOM.div({ className: "item-equip" }, React.DOM.div({ className: "item-equip-left" }, MenuUnitInfo_2.default({
                unit: this.state.selectedUnit,
                onMouseUp: this.handleDrop,
                isDraggable: true,
                onDragStart: this.handleDragStart,
                onDragEnd: this.handleDragEnd,
                currentDragItem: this.state.currentDragItem
            }), ItemList_2.default({
                items: player.items,
                selectedUnit: this.state.selectedUnit,
                isDraggable: true,
                onDragStart: this.handleDragStart,
                onDragEnd: this.handleDragEnd,
                onRowChange: this.handleSelectRow
            })), UnitList_2.default({
                units: player.units,
                selectedUnit: this.state.selectedUnit,
                isDraggable: false,
                onRowChange: this.handleSelectRow,
                autoSelect: true
            })));
        };
        return ItemEquipComponent;
    }(React.Component));
    exports.ItemEquipComponent = ItemEquipComponent;
    var Factory = React.createFactory(ItemEquipComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/EconomySummaryItem", ["require", "exports"], function (require, exports) {
    "use strict";
    var EconomySummaryItemComponent = (function (_super) {
        __extends(EconomySummaryItemComponent, _super);
        function EconomySummaryItemComponent(props) {
            _super.call(this, props);
            this.displayName = "EconomySummaryItem";
            this.bindMethods();
        }
        EconomySummaryItemComponent.prototype.bindMethods = function () {
            this.makeCell = this.makeCell.bind(this);
        };
        EconomySummaryItemComponent.prototype.makeCell = function (type) {
            var cellProps = {
                key: type,
                className: "economy-summary-item-cell" + " economy-summary-" + type,
            };
            var cellContent;
            switch (type) {
                default:
                    {
                        cellContent = this.props[type];
                        break;
                    }
            }
            return (React.DOM.td(cellProps, cellContent));
        };
        EconomySummaryItemComponent.prototype.render = function () {
            var columns = this.props.activeColumns;
            var cells = [];
            for (var i = 0; i < columns.length; i++) {
                var cell = this.makeCell(columns[i].key);
                cells.push(cell);
            }
            var rowProps = {
                className: "economy-summary-item",
                onClick: this.props.handleClick
            };
            if (this.props.isSelected) {
                rowProps.className += " selected";
            }
            ;
            return (React.DOM.tr(rowProps, cells));
        };
        return EconomySummaryItemComponent;
    }(React.Component));
    exports.EconomySummaryItemComponent = EconomySummaryItemComponent;
    var Factory = React.createFactory(EconomySummaryItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/EconomySummary", ["require", "exports", "src/uicomponents/unitlist/List", "src/uicomponents/galaxymap/EconomySummaryItem"], function (require, exports, List_6, EconomySummaryItem_1) {
    "use strict";
    var EconomySummaryComponent = (function (_super) {
        __extends(EconomySummaryComponent, _super);
        function EconomySummaryComponent(props) {
            _super.call(this, props);
            this.displayName = "EconomySummary";
        }
        EconomySummaryComponent.prototype.render = function () {
            var rows = [];
            var player = this.props.player;
            for (var i = 0; i < player.controlledLocations.length; i++) {
                var star = player.controlledLocations[i];
                var data = {
                    star: star,
                    id: star.id,
                    name: star.name,
                    income: star.getIncome(),
                    rowConstructor: EconomySummaryItem_1.default
                };
                rows.push({
                    key: star.id,
                    data: data
                });
            }
            var columns = [
                {
                    label: "Id",
                    key: "id",
                    defaultOrder: "asc"
                },
                {
                    label: "Name",
                    key: "name",
                    defaultOrder: "asc"
                },
                {
                    label: "Income",
                    key: "income",
                    defaultOrder: "desc"
                }
            ];
            return (React.DOM.div({ className: "economy-summary-list fixed-table-parent" }, List_6.default({
                listItems: rows,
                initialColumns: columns,
                initialSortOrder: [columns[2]]
            })));
        };
        return EconomySummaryComponent;
    }(React.Component));
    exports.EconomySummaryComponent = EconomySummaryComponent;
    var Factory = React.createFactory(EconomySummaryComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/technologies/TechnologiesList", ["require", "exports", "src/uicomponents/technologies/Technology", "src/eventManager"], function (require, exports, Technology_1, eventManager_32) {
    "use strict";
    var TechnologiesListComponent = (function (_super) {
        __extends(TechnologiesListComponent, _super);
        function TechnologiesListComponent(props) {
            _super.call(this, props);
            this.displayName = "TechnologiesList";
            this.updateListener = undefined;
        }
        TechnologiesListComponent.prototype.componentDidMount = function () {
            this.updateListener = eventManager_32.default.addEventListener("builtBuildingWithEffect_research", this.forceUpdate.bind(this));
        };
        TechnologiesListComponent.prototype.componentWillUnmount = function () {
            eventManager_32.default.removeEventListener("builtBuildingWithEffect_research", this.updateListener);
        };
        TechnologiesListComponent.prototype.render = function () {
            var playerTechnology = this.props.playerTechnology;
            var researchSpeed = playerTechnology.getResearchSpeed();
            var rows = [];
            for (var key in playerTechnology.technologies) {
                rows.push(Technology_1.default({
                    playerTechnology: playerTechnology,
                    technology: playerTechnology.technologies[key].technology,
                    researchPoints: researchSpeed,
                    key: key
                }));
            }
            return (React.DOM.div({
                className: "technologies-list-container"
            }, React.DOM.div({
                className: "technologies-list"
            }, rows), React.DOM.div({
                className: "technologies-list-research-speed"
            }, "Research speed: " + researchSpeed + " per turn")));
        };
        return TechnologiesListComponent;
    }(React.Component));
    exports.TechnologiesListComponent = TechnologiesListComponent;
    var Factory = React.createFactory(TechnologiesListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufactoryUpgradeButton", ["require", "exports"], function (require, exports) {
    "use strict";
    var ManufactoryUpgradeButtonComponent = (function (_super) {
        __extends(ManufactoryUpgradeButtonComponent, _super);
        function ManufactoryUpgradeButtonComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufactoryUpgradeButton";
        }
        ManufactoryUpgradeButtonComponent.prototype.componentWillReceiveProps = function (newProps) {
            this.setState({
                canAffordUpgrade: newProps.money >= newProps.upgradeCost,
                isDisabled: newProps.currentLevel >= newProps.maxLevel
            });
        };
        ManufactoryUpgradeButtonComponent.prototype.render = function () {
            var unitUpgradeButtonBaseClassName = "manufactory-upgrade-button";
            var unitUpgradeCostBaseClassName = "manufactory-upgrade-button-cost";
            var isAtMaxLevel = this.props.currentLevel >= this.props.maxLevel;
            var canAffordUpgrade = this.props.money >= this.props.upgradeCost;
            var isDisabled = isAtMaxLevel || !canAffordUpgrade;
            if (isDisabled) {
                unitUpgradeButtonBaseClassName += " disabled";
            }
            if (!canAffordUpgrade) {
                unitUpgradeCostBaseClassName += " negative";
            }
            return (React.DOM.button({
                className: unitUpgradeButtonBaseClassName + " manufactory-units-upgrade-health-button",
                onClick: (isDisabled ? null : this.props.onClick),
                disabled: isDisabled,
                title: this.props.title
            }, React.DOM.span({
                className: "manufactory-upgrade-button-action"
            }, this.props.actionString), React.DOM.br(), React.DOM.span({
                className: "manufactory-upgrade-button-level"
            }, "" + this.props.currentLevel.toFixed(this.props.levelDecimalPoints) + "/" +
                this.props.maxLevel.toFixed(this.props.levelDecimalPoints)), React.DOM.span({
                className: unitUpgradeCostBaseClassName
            }, this.props.upgradeCost)));
        };
        return ManufactoryUpgradeButtonComponent;
    }(React.Component));
    exports.ManufactoryUpgradeButtonComponent = ManufactoryUpgradeButtonComponent;
    var Factory = React.createFactory(ManufactoryUpgradeButtonComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufacturableThingsListItem", ["require", "exports"], function (require, exports) {
    "use strict";
    var ManufacturableThingsListItemComponent = (function (_super) {
        __extends(ManufacturableThingsListItemComponent, _super);
        function ManufacturableThingsListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufacturableThingsListItem";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        ManufacturableThingsListItemComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
        };
        ManufacturableThingsListItemComponent.prototype.getInitialStateTODO = function () {
            return ({
                canAfford: this.props.money >= this.props.template.buildCost,
                isDisabled: !this.props.onClick
            });
        };
        ManufacturableThingsListItemComponent.prototype.componentWillReceiveProps = function (newProps) {
            this.setState({
                canAfford: newProps.money >= newProps.template.buildCost,
                isDisabled: !newProps.onClick
            });
        };
        ManufacturableThingsListItemComponent.prototype.handleClick = function () {
            if (this.props.onClick) {
                this.props.onClick(this.props.template, this.props.parentIndex);
            }
        };
        ManufacturableThingsListItemComponent.prototype.render = function () {
            var canAfford = this.props.money >= this.props.template.buildCost;
            var isDisabled = !Boolean(this.props.onClick) || (this.props.showCost && !canAfford);
            return (React.DOM.li({
                className: "manufacturable-things-list-item" + (isDisabled ? " disabled" : ""),
                onClick: (isDisabled ? null : this.handleClick),
                disabled: isDisabled,
                title: this.props.template.description
            }, React.DOM.div({
                className: "manufacturable-things-list-item-name"
            }, this.props.template.displayName), !this.props.showCost ? null : React.DOM.div({
                className: "manufacturable-things-list-item-cost money-style" +
                    (canAfford ? "" : " negative")
            }, this.props.template.buildCost)));
        };
        return ManufacturableThingsListItemComponent;
    }(React.Component));
    exports.ManufacturableThingsListItemComponent = ManufacturableThingsListItemComponent;
    var Factory = React.createFactory(ManufacturableThingsListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufacturableThingsList", ["require", "exports", "src/uicomponents/production/ManufacturableThingsListItem"], function (require, exports, ManufacturableThingsListItem_1) {
    "use strict";
    var ManufacturableThingsListComponent = (function (_super) {
        __extends(ManufacturableThingsListComponent, _super);
        function ManufacturableThingsListComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufacturableThingsList";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
        }
        ManufacturableThingsListComponent.prototype.render = function () {
            var manufacturableThings = this.props.manufacturableThings;
            var items = [];
            var keyByTemplateType = {};
            for (var i = 0; i < manufacturableThings.length; i++) {
                var templateType = manufacturableThings[i].type;
                if (!keyByTemplateType[templateType]) {
                    keyByTemplateType[templateType] = 0;
                }
                items.push(ManufacturableThingsListItem_1.default({
                    template: manufacturableThings[i],
                    key: templateType + keyByTemplateType[templateType]++,
                    parentIndex: i,
                    onClick: this.props.onClick,
                    money: this.props.money,
                    showCost: this.props.showCost
                }));
            }
            return (React.DOM.ol({
                className: "manufacturable-things-list"
            }, items));
        };
        return ManufacturableThingsListComponent;
    }(React.Component));
    exports.ManufacturableThingsListComponent = ManufacturableThingsListComponent;
    var Factory = React.createFactory(ManufacturableThingsListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/BuildQueue", ["require", "exports", "src/uicomponents/production/ManufactoryUpgradeButton", "src/uicomponents/production/ManufacturableThingsList"], function (require, exports, ManufactoryUpgradeButton_1, ManufacturableThingsList_1) {
    "use strict";
    var BuildQueueComponent = (function (_super) {
        __extends(BuildQueueComponent, _super);
        function BuildQueueComponent(props) {
            _super.call(this, props);
            this.displayName = "BuildQueue";
            this.bindMethods();
        }
        BuildQueueComponent.prototype.removeItem = function (template, parentIndex) {
            var manufactory = this.props.manufactory;
            manufactory.removeThingAtIndex(parentIndex);
            this.props.triggerUpdate();
        };
        BuildQueueComponent.prototype.bindMethods = function () {
            this.removeItem = this.removeItem.bind(this);
            this.upgradeCapacity = this.upgradeCapacity.bind(this);
        };
        BuildQueueComponent.prototype.upgradeCapacity = function () {
            var manufactory = this.props.manufactory;
            manufactory.upgradeCapacity(1);
            this.props.triggerUpdate();
        };
        BuildQueueComponent.prototype.render = function () {
            var manufactory = this.props.manufactory;
            var convertedBuildQueue = [];
            for (var i = 0; i < manufactory.buildQueue.length; i++) {
                convertedBuildQueue.push(manufactory.buildQueue[i].template);
            }
            var canUpgradeCapacity = manufactory.capacity < manufactory.maxCapacity;
            return (React.DOM.div({
                className: "build-queue"
            }, React.DOM.div({
                className: "manufactory-upgrade-buttons-container"
            }, ManufactoryUpgradeButton_1.default({
                money: this.props.money,
                upgradeCost: manufactory.getCapacityUpgradeCost(),
                onClick: this.upgradeCapacity,
                actionString: "Upgrade capacity",
                currentLevel: manufactory.capacity,
                maxLevel: manufactory.maxCapacity,
                levelDecimalPoints: 0,
                title: "Increase amount of things this manufactory can build per turn"
            })), ManufacturableThingsList_1.default({
                manufacturableThings: convertedBuildQueue,
                onClick: this.removeItem,
                showCost: false,
                money: this.props.money
            })));
        };
        return BuildQueueComponent;
    }(React.Component));
    exports.BuildQueueComponent = BuildQueueComponent;
    var Factory = React.createFactory(BuildQueueComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufacturableItems", ["require", "exports", "src/uicomponents/production/ManufacturableThingsList", "src/uicomponents/production/ManufactoryUpgradeButton"], function (require, exports, ManufacturableThingsList_2, ManufactoryUpgradeButton_2) {
    "use strict";
    var ManufacturableItemsComponent = (function (_super) {
        __extends(ManufacturableItemsComponent, _super);
        function ManufacturableItemsComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufacturableItems";
            this.bindMethods();
        }
        ManufacturableItemsComponent.prototype.shouldComponentUpdate = function (newProps) {
            if (this.props.selectedStar !== newProps.selectedStar) {
                return true;
            }
            if (this.props.manufacturableThings.length !== newProps.manufacturableThings.length) {
                return true;
            }
            else {
            }
            if (this.props.canBuild !== newProps.canBuild) {
                return true;
            }
            if (this.props.money !== newProps.money) {
                return true;
            }
            return false;
        };
        ManufacturableItemsComponent.prototype.addItemToBuildQueue = function (template) {
            var manufactory = this.props.selectedStar.manufactory;
            manufactory.addThingToQueue(template, "item");
            this.props.triggerUpdate();
        };
        ManufacturableItemsComponent.prototype.bindMethods = function () {
            this.upgradeItems = this.upgradeItems.bind(this);
            this.addItemToBuildQueue = this.addItemToBuildQueue.bind(this);
        };
        ManufacturableItemsComponent.prototype.upgradeItems = function () {
        };
        ManufacturableItemsComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "manufacturable-items"
            }, (!this.props.selectedStar || !this.props.selectedStar.manufactory) ? null : React.DOM.div({
                className: "manufactory-upgrade-buttons-container"
            }, ManufactoryUpgradeButton_2.default({
                money: this.props.money,
                upgradeCost: 0,
                actionString: "Upgrade items",
                currentLevel: 0,
                maxLevel: 0,
                levelDecimalPoints: 0,
                onClick: this.upgradeItems
            })), ManufacturableThingsList_2.default({
                manufacturableThings: this.props.manufacturableThings,
                onClick: (this.props.canBuild ? this.addItemToBuildQueue : null),
                showCost: true,
                money: this.props.money
            })));
        };
        return ManufacturableItemsComponent;
    }(React.Component));
    exports.ManufacturableItemsComponent = ManufacturableItemsComponent;
    var Factory = React.createFactory(ManufacturableItemsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufacturableUnits", ["require", "exports", "src/uicomponents/production/ManufacturableThingsList", "src/uicomponents/production/ManufactoryUpgradeButton"], function (require, exports, ManufacturableThingsList_3, ManufactoryUpgradeButton_3) {
    "use strict";
    var ManufacturableUnitsComponent = (function (_super) {
        __extends(ManufacturableUnitsComponent, _super);
        function ManufacturableUnitsComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufacturableUnits";
            this.bindMethods();
        }
        ManufacturableUnitsComponent.prototype.shouldComponentUpdate = function (newProps) {
            if (this.props.selectedStar !== newProps.selectedStar) {
                return true;
            }
            if (this.props.manufacturableThings.length !== newProps.manufacturableThings.length) {
                return true;
            }
            else {
            }
            if (this.props.canBuild !== newProps.canBuild) {
                return true;
            }
            if (this.props.money !== newProps.money) {
                return true;
            }
            return false;
        };
        ManufacturableUnitsComponent.prototype.addUnitToBuildQueue = function (template) {
            var manufactory = this.props.selectedStar.manufactory;
            manufactory.addThingToQueue(template, "unit");
            this.props.triggerUpdate();
        };
        ManufacturableUnitsComponent.prototype.bindMethods = function () {
            this.addUnitToBuildQueue = this.addUnitToBuildQueue.bind(this);
            this.upgradeStats = this.upgradeStats.bind(this);
            this.upgradeHealth = this.upgradeHealth.bind(this);
        };
        ManufacturableUnitsComponent.prototype.upgradeHealth = function () {
            var manufactory = this.props.selectedStar.manufactory;
            manufactory.upgradeUnitHealthModifier(0.1);
            this.props.triggerUpdate();
        };
        ManufacturableUnitsComponent.prototype.upgradeStats = function () {
            var manufactory = this.props.selectedStar.manufactory;
            manufactory.upgradeUnitStatsModifier(0.1);
            this.props.triggerUpdate();
        };
        ManufacturableUnitsComponent.prototype.render = function () {
            if (this.props.selectedStar && this.props.selectedStar.manufactory) {
                var manufactory = this.props.selectedStar.manufactory;
                var unitUpgradeCost = manufactory.getUnitUpgradeCost();
                var canAffordUnitUpgrade = this.props.money >= unitUpgradeCost;
                var unitUpgradeButtonBaseClassName = "manufactory-upgrade-button";
                var unitUpgradeCostBaseClassName = "manufactory-upgrade-button-cost";
                if (!canAffordUnitUpgrade) {
                    unitUpgradeButtonBaseClassName += " disabled";
                    unitUpgradeCostBaseClassName += " negative";
                }
            }
            return (React.DOM.div({
                className: "manufacturable-units"
            }, (!this.props.selectedStar || !this.props.selectedStar.manufactory) ? null : React.DOM.div({
                className: "manufactory-upgrade-buttons-container"
            }, ManufactoryUpgradeButton_3.default({
                money: this.props.money,
                upgradeCost: unitUpgradeCost,
                actionString: "Upgrade health",
                currentLevel: manufactory.unitHealthModifier,
                maxLevel: 5.0,
                levelDecimalPoints: 1,
                onClick: this.upgradeHealth,
                title: "Increase base health of units built here"
            }), ManufactoryUpgradeButton_3.default({
                money: this.props.money,
                upgradeCost: unitUpgradeCost,
                actionString: "Upgrade stats",
                currentLevel: manufactory.unitStatsModifier,
                maxLevel: 5.0,
                levelDecimalPoints: 1,
                onClick: this.upgradeStats,
                title: "Increase base stats of units built here"
            })), ManufacturableThingsList_3.default({
                manufacturableThings: this.props.manufacturableThings,
                onClick: (this.props.canBuild ? this.addUnitToBuildQueue : null),
                showCost: true,
                money: this.props.money
            })));
        };
        return ManufacturableUnitsComponent;
    }(React.Component));
    exports.ManufacturableUnitsComponent = ManufacturableUnitsComponent;
    var Factory = React.createFactory(ManufacturableUnitsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufacturableThings", ["require", "exports", "src/uicomponents/production/ManufacturableItems", "src/uicomponents/production/ManufacturableUnits"], function (require, exports, ManufacturableItems_1, ManufacturableUnits_1) {
    "use strict";
    var ManufacturableThingsComponent = (function (_super) {
        __extends(ManufacturableThingsComponent, _super);
        function ManufacturableThingsComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufacturableThings";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        ManufacturableThingsComponent.prototype.bindMethods = function () {
            this.makeTabButton = this.makeTabButton.bind(this);
            this.getManufacturableThings = this.getManufacturableThings.bind(this);
            this.selectTab = this.selectTab.bind(this);
            this.makeTab = this.makeTab.bind(this);
        };
        ManufacturableThingsComponent.prototype.getInitialStateTODO = function () {
            return ({
                activeTab: "units"
            });
        };
        ManufacturableThingsComponent.prototype.selectTab = function (key) {
            if (this.state.activeTab === key)
                return;
            this.setState({
                activeTab: key
            });
        };
        ManufacturableThingsComponent.prototype.makeTabButton = function (key) {
            var displayString;
            switch (key) {
                case "units":
                    {
                        displayString = "Units";
                        break;
                    }
                case "items":
                    {
                        displayString = "Items";
                        break;
                    }
            }
            return (React.DOM.button({
                key: key,
                className: "manufacturable-things-tab-button" +
                    (this.state.activeTab === key ? " active-tab" : ""),
                onClick: this.selectTab.bind(this, key)
            }, displayString));
        };
        ManufacturableThingsComponent.prototype.getManufacturableThings = function (key) {
            var manufacturableThings = [];
            var selectedStar = this.props.selectedStar;
            var player = this.props.player;
            switch (key) {
                case "units":
                    {
                        manufacturableThings = manufacturableThings.concat(player.getGloballyBuildableUnits());
                        if (selectedStar) {
                            if (selectedStar.manufactory) {
                                manufacturableThings = manufacturableThings.concat(selectedStar.manufactory.getLocalUnitTypes().manufacturable);
                            }
                        }
                        break;
                    }
                case "items":
                    {
                        manufacturableThings = manufacturableThings.concat(player.getGloballyBuildableItems());
                        if (selectedStar) {
                            if (selectedStar.manufactory) {
                                manufacturableThings = manufacturableThings.concat(selectedStar.manufactory.getLocalItemTypes().manufacturable);
                            }
                        }
                        break;
                    }
            }
            return manufacturableThings;
        };
        ManufacturableThingsComponent.prototype.makeTab = function (key) {
            var props = {
                key: key,
                selectedStar: this.props.selectedStar,
                manufacturableThings: this.getManufacturableThings(key),
                consolidateLocations: false,
                triggerUpdate: this.props.triggerUpdate,
                canBuild: Boolean(this.props.selectedStar && this.props.selectedStar.manufactory),
                money: this.props.money
            };
            switch (key) {
                case "units":
                    {
                        return (ManufacturableUnits_1.default(props));
                    }
                case "items":
                    {
                        props.consolidateLocations = true;
                        return (ManufacturableItems_1.default(props));
                    }
            }
        };
        ManufacturableThingsComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "manufacturable-things"
            }, React.DOM.div({
                className: "manufacturable-things-tab-buttons"
            }, this.makeTabButton("units"), this.makeTabButton("items")), React.DOM.div({
                className: "manufacturable-things-active-tab"
            }, this.makeTab(this.state.activeTab))));
        };
        return ManufacturableThingsComponent;
    }(React.Component));
    exports.ManufacturableThingsComponent = ManufacturableThingsComponent;
    var Factory = React.createFactory(ManufacturableThingsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ConstructManufactory", ["require", "exports", "src/App"], function (require, exports, App_32) {
    "use strict";
    var ConstructManufactoryComponent = (function (_super) {
        __extends(ConstructManufactoryComponent, _super);
        function ConstructManufactoryComponent(props) {
            _super.call(this, props);
            this.displayName = "ConstructManufactory";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        ConstructManufactoryComponent.prototype.bindMethods = function () {
            this.handleConstruct = this.handleConstruct.bind(this);
        };
        ConstructManufactoryComponent.prototype.getInitialStateTODO = function () {
            return ({
                canAfford: this.props.money >= App_32.default.moduleData.ruleSet.manufactory.buildCost
            });
        };
        ConstructManufactoryComponent.prototype.componentWillReceiveProps = function (newProps) {
            this.setState({
                canAfford: newProps.money >= App_32.default.moduleData.ruleSet.manufactory.buildCost
            });
        };
        ConstructManufactoryComponent.prototype.handleConstruct = function () {
            var star = this.props.star;
            var player = this.props.player;
            star.buildManufactory();
            player.money -= App_32.default.moduleData.ruleSet.manufactory.buildCost;
            this.props.triggerUpdate();
        };
        ConstructManufactoryComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "construct-manufactory-container"
            }, React.DOM.button({
                className: "construct-manufactory-button" + (this.state.canAfford ? "" : " disabled"),
                onClick: this.state.canAfford ? this.handleConstruct : null,
                disabled: !this.state.canAfford
            }, React.DOM.span({
                className: "construct-manufactory-action"
            }, "Construct manufactory"), React.DOM.span({
                className: "construct-manufactory-cost money-style" +
                    (this.state.canAfford ? "" : " negative")
            }, App_32.default.moduleData.ruleSet.manufactory.buildCost))));
        };
        return ConstructManufactoryComponent;
    }(React.Component));
    exports.ConstructManufactoryComponent = ConstructManufactoryComponent;
    var Factory = React.createFactory(ConstructManufactoryComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufactoryStarsListItem", ["require", "exports"], function (require, exports) {
    "use strict";
    var ManufactoryStarsListItemComponent = (function (_super) {
        __extends(ManufactoryStarsListItemComponent, _super);
        function ManufactoryStarsListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufactoryStarsListItem";
            this.bindMethods();
        }
        ManufactoryStarsListItemComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
        };
        ManufactoryStarsListItemComponent.prototype.handleClick = function () {
            var star = this.props.star;
            this.props.onClick(star);
        };
        ManufactoryStarsListItemComponent.prototype.render = function () {
            var hasManufactory = Boolean(this.props.totalCapacity);
            var hasCapacity = hasManufactory && this.props.usedCapacity < this.props.totalCapacity;
            return (React.DOM.div({
                className: "manufactory-stars-list-item" +
                    (!hasManufactory ? " no-manufactory" : "") +
                    (this.props.isHighlighted ? " highlighted" : ""),
                onClick: this.handleClick
            }, React.DOM.div({
                className: "manufactory-stars-list-item-star-name"
            }, this.props.star.name), !hasManufactory ? null : React.DOM.div({
                className: "manufactory-stars-list-item-capacity" + (!hasCapacity ? " no-capacity" : "")
            }, "" + this.props.usedCapacity + "/" + this.props.totalCapacity)));
        };
        return ManufactoryStarsListItemComponent;
    }(React.Component));
    exports.ManufactoryStarsListItemComponent = ManufactoryStarsListItemComponent;
    var Factory = React.createFactory(ManufactoryStarsListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/production/ManufactoryStarsList", ["require", "exports", "src/uicomponents/production/ManufactoryStarsListItem", "src/utility"], function (require, exports, ManufactoryStarsListItem_1, utility_33) {
    "use strict";
    var ManufactoryStarsListComponent = (function (_super) {
        __extends(ManufactoryStarsListComponent, _super);
        function ManufactoryStarsListComponent(props) {
            _super.call(this, props);
            this.displayName = "ManufactoryStarsList";
        }
        ManufactoryStarsListComponent.prototype.render = function () {
            var rows = [];
            this.props.starsWithManufactories.sort(utility_33.sortByManufactoryCapacityFN);
            this.props.starsWithoutManufactories.sort(utility_33.sortByManufactoryCapacityFN);
            for (var i = 0; i < this.props.starsWithManufactories.length; i++) {
                var star = this.props.starsWithManufactories[i];
                var manufactory = star.manufactory;
                var isHighlighted = this.props.highlightedStars.indexOf(star) !== -1;
                rows.push(ManufactoryStarsListItem_1.default({
                    key: star.id,
                    star: star,
                    isHighlighted: isHighlighted,
                    usedCapacity: manufactory.buildQueue.length,
                    totalCapacity: manufactory.capacity,
                    onClick: this.props.handleStarSelect
                }));
            }
            for (var i = 0; i < this.props.starsWithoutManufactories.length; i++) {
                var star = this.props.starsWithoutManufactories[i];
                var isHighlighted = this.props.highlightedStars.indexOf(star) !== -1;
                rows.push(ManufactoryStarsListItem_1.default({
                    key: star.id,
                    star: star,
                    isHighlighted: isHighlighted,
                    usedCapacity: 0,
                    totalCapacity: 0,
                    onClick: this.props.handleStarSelect
                }));
            }
            return (React.DOM.div({
                className: "manufactory-stars-list"
            }, rows));
        };
        return ManufactoryStarsListComponent;
    }(React.Component));
    exports.ManufactoryStarsListComponent = ManufactoryStarsListComponent;
    var Factory = React.createFactory(ManufactoryStarsListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/mixins/UpdateWhenMoneyChanges", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_33) {
    "use strict";
    var UpdateWhenMoneyChanges = (function () {
        function UpdateWhenMoneyChanges(owner, onMoneyChange) {
            this.owner = owner;
            this.onMoneyChange = onMoneyChange;
            this.handleMoneyChange = this.handleMoneyChange.bind(this);
        }
        UpdateWhenMoneyChanges.prototype.componentDidMount = function () {
            eventManager_33.default.addEventListener("playerMoneyUpdated", this.handleMoneyChange);
        };
        UpdateWhenMoneyChanges.prototype.componentWillUnmount = function () {
            eventManager_33.default.removeEventListener("playerMoneyUpdated", this.handleMoneyChange);
        };
        UpdateWhenMoneyChanges.prototype.handleMoneyChange = function () {
            if (this.onMoneyChange) {
                this.onMoneyChange();
            }
            else {
                this.owner.setState({ money: this.owner.props.player.money });
            }
        };
        return UpdateWhenMoneyChanges;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = UpdateWhenMoneyChanges;
    var _a;
});
define("src/uicomponents/production/ProductionOverview", ["require", "exports", "src/uicomponents/production/BuildQueue", "src/uicomponents/production/ManufacturableThings", "src/uicomponents/production/ConstructManufactory", "src/uicomponents/production/ManufactoryStarsList", "src/eventManager", "src/utility", "src/uicomponents/mixins/UpdateWhenMoneyChanges", "src/uicomponents/mixins/applyMixins"], function (require, exports, BuildQueue_1, ManufacturableThings_1, ConstructManufactory_1, ManufactoryStarsList_1, eventManager_34, utility_34, UpdateWhenMoneyChanges_1, applyMixins_13) {
    "use strict";
    var ProductionOverviewComponent = (function (_super) {
        __extends(ProductionOverviewComponent, _super);
        function ProductionOverviewComponent(props) {
            _super.call(this, props);
            this.displayName = "ProductionOverview";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
            applyMixins_13.default(this, new UpdateWhenMoneyChanges_1.default(this));
        }
        ProductionOverviewComponent.prototype.bindMethods = function () {
            this.clearSelection = this.clearSelection.bind(this);
            this.getStarsWithAndWithoutManufactories = this.getStarsWithAndWithoutManufactories.bind(this);
            this.handleStarSelect = this.handleStarSelect.bind(this);
            this.triggerUpdate = this.triggerUpdate.bind(this);
        };
        ProductionOverviewComponent.prototype.getInitialStateTODO = function () {
            var initialSelected = null;
            var player = this.props.player;
            var starsByManufactoryPresence = this.getStarsWithAndWithoutManufactories();
            if (starsByManufactoryPresence.withManufactories.length > 0) {
                starsByManufactoryPresence.withManufactories.sort(utility_34.sortByManufactoryCapacityFN);
                initialSelected = starsByManufactoryPresence.withManufactories[0];
            }
            else if (starsByManufactoryPresence.withoutManufactories.length > 0) {
                starsByManufactoryPresence.withoutManufactories.sort(utility_34.sortByManufactoryCapacityFN);
                initialSelected = starsByManufactoryPresence.withoutManufactories[0];
            }
            return ({
                selectedStar: initialSelected,
                highlightedStars: [initialSelected],
                money: player.money
            });
        };
        ProductionOverviewComponent.prototype.triggerUpdate = function () {
            this.forceUpdate();
        };
        ProductionOverviewComponent.prototype.componentDidMount = function () {
            eventManager_34.default.addEventListener("playerManufactoryBuiltThings", this.triggerUpdate);
        };
        ProductionOverviewComponent.prototype.componentWillUnmount = function () {
            eventManager_34.default.removeEventListener("playerManufactoryBuiltThings", this.triggerUpdate);
        };
        ProductionOverviewComponent.prototype.getStarsWithAndWithoutManufactories = function () {
            var player = this.props.player;
            var starsWithManufactories = [];
            var starsWithoutManufactories = [];
            for (var i = 0; i < player.controlledLocations.length; i++) {
                var star = player.controlledLocations[i];
                if (star.manufactory) {
                    starsWithManufactories.push(star);
                }
                else {
                    starsWithoutManufactories.push(star);
                }
            }
            return ({
                withManufactories: starsWithManufactories,
                withoutManufactories: starsWithoutManufactories
            });
        };
        ProductionOverviewComponent.prototype.handleStarSelect = function (star) {
            if (this.state.selectedStar === star) {
                this.clearSelection();
            }
            else {
                this.setState({
                    selectedStar: star,
                    highlightedStars: [star]
                });
            }
        };
        ProductionOverviewComponent.prototype.clearSelection = function () {
            this.setState({
                selectedStar: undefined,
                highlightedStars: []
            });
        };
        ProductionOverviewComponent.prototype.render = function () {
            var player = this.props.player;
            var selectedStar = this.state.selectedStar;
            var starsByManufactoryPresence = this.getStarsWithAndWithoutManufactories();
            var queueElement = null;
            if (selectedStar) {
                if (selectedStar.manufactory) {
                    queueElement = BuildQueue_1.default({
                        manufactory: selectedStar.manufactory,
                        triggerUpdate: this.triggerUpdate,
                        money: this.state.money
                    });
                }
                else {
                    queueElement = ConstructManufactory_1.default({
                        star: selectedStar,
                        player: player,
                        money: this.state.money,
                        triggerUpdate: this.triggerUpdate
                    });
                }
            }
            return (React.DOM.div({
                className: "production-overview"
            }, ManufactoryStarsList_1.default({
                starsWithManufactories: starsByManufactoryPresence.withManufactories,
                starsWithoutManufactories: starsByManufactoryPresence.withoutManufactories,
                highlightedStars: this.state.highlightedStars,
                handleStarSelect: this.handleStarSelect
            }), React.DOM.div({
                className: "production-overview-contents"
            }, queueElement, ManufacturableThings_1.default({
                selectedStar: selectedStar,
                player: player,
                money: this.state.money,
                triggerUpdate: this.triggerUpdate
            }))));
        };
        return ProductionOverviewComponent;
    }(React.Component));
    exports.ProductionOverviewComponent = ProductionOverviewComponent;
    var Factory = React.createFactory(ProductionOverviewComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/saves/SaveListItem", ["require", "exports"], function (require, exports) {
    "use strict";
    var SaveListItemComponent = (function (_super) {
        __extends(SaveListItemComponent, _super);
        function SaveListItemComponent() {
            _super.apply(this, arguments);
            this.displayName = "SaveListItem";
        }
        SaveListItemComponent.prototype.handleDelete = function (e) {
            e.stopPropagation();
            this.props.handleDelete();
        };
        SaveListItemComponent.prototype.handleUndoDelete = function (e) {
            e.stopPropagation();
            this.props.handleUndoDelete();
        };
        SaveListItemComponent.prototype.makeCell = function (type) {
            var cellProps = {};
            cellProps.key = type;
            cellProps.className = "save-list-item-cell" + " save-list-" + type;
            var cellContent;
            switch (type) {
                case "delete":
                    {
                        if (this.props.isMarkedForDeletion) {
                            cellContent = "";
                            cellProps.className += " undo-delete-button";
                            cellProps.onClick = this.handleUndoDelete;
                        }
                        else {
                            cellContent = "X";
                            cellProps.onClick = this.handleDelete;
                        }
                        break;
                    }
                default:
                    {
                        cellContent = this.props[type];
                        break;
                    }
            }
            return (React.DOM.td(cellProps, cellContent));
        };
        SaveListItemComponent.prototype.render = function () {
            var columns = this.props.activeColumns;
            var cells = [];
            for (var i = 0; i < columns.length; i++) {
                var cell = this.makeCell(columns[i].key);
                cells.push(cell);
            }
            var rowProps = {
                className: "save-list-item",
                onClick: this.props.handleClick
            };
            if (this.props.isMarkedForDeletion) {
                rowProps.className += " marked-for-deletion";
            }
            return (React.DOM.tr(rowProps, cells));
        };
        return SaveListItemComponent;
    }(React.Component));
    exports.SaveListItemComponent = SaveListItemComponent;
    var Factory = React.createFactory(SaveListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/saves/SaveList", ["require", "exports", "src/uicomponents/saves/SaveListItem", "src/uicomponents/unitlist/List", "src/utility"], function (require, exports, SaveListItem_1, List_7, utility_35) {
    "use strict";
    var SaveListComponent = (function (_super) {
        __extends(SaveListComponent, _super);
        function SaveListComponent(props) {
            _super.call(this, props);
            this.displayName = "SaveList";
        }
        SaveListComponent.prototype.render = function () {
            var rows = [];
            var selected;
            var allKeys = Object.keys(localStorage);
            var saveKeys = allKeys.filter(function (key) {
                return (key.indexOf("Save") > -1);
            });
            for (var i = 0; i < saveKeys.length; i++) {
                var saveData = JSON.parse(localStorage.getItem(saveKeys[i]));
                var date = new Date(saveData.date);
                var isMarkedForDeletion = false;
                if (this.props.saveKeysToDelete) {
                    if (this.props.saveKeysToDelete.indexOf(saveKeys[i]) !== -1) {
                        isMarkedForDeletion = true;
                    }
                }
                var row = {
                    key: saveKeys[i],
                    data: {
                        storageKey: saveKeys[i],
                        name: saveData.name,
                        date: utility_35.prettifyDate(date),
                        accurateDate: saveData.date,
                        rowConstructor: SaveListItem_1.default,
                        isMarkedForDeletion: isMarkedForDeletion,
                        handleDelete: this.props.onDelete ?
                            this.props.onDelete.bind(null, saveKeys[i]) :
                            null,
                        handleUndoDelete: this.props.onUndoDelete ?
                            this.props.onUndoDelete.bind(null, saveKeys[i]) :
                            null
                    }
                };
                rows.push(row);
                if (this.props.selectedKey === saveKeys[i]) {
                    selected = row;
                }
            }
            var columns = [
                {
                    label: "Name",
                    key: "name",
                    defaultOrder: "asc"
                },
                {
                    label: "Date",
                    key: "date",
                    defaultOrder: "desc",
                    propToSortBy: "accurateDate"
                }
            ];
            if (this.props.allowDelete) {
                columns.push({
                    label: "Del",
                    key: "delete",
                    notSortable: true
                });
            }
            return (React.DOM.div({ className: "save-list fixed-table-parent" }, List_7.default({
                listItems: rows,
                initialColumns: columns,
                initialSortOrder: [columns[1], columns[0]],
                onRowChange: this.props.onRowChange,
                autoSelect: selected ? false : this.props.autoSelect,
                initialSelected: selected,
                keyboardSelect: true,
                addSpacer: true
            })));
        };
        return SaveListComponent;
    }(React.Component));
    exports.SaveListComponent = SaveListComponent;
    var Factory = React.createFactory(SaveListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/saves/LoadGame", ["require", "exports", "src/App", "src/uicomponents/saves/SaveList", "src/uicomponents/popups/PopupManager", "src/uicomponents/popups/ConfirmPopup"], function (require, exports, App_33, SaveList_1, PopupManager_7, ConfirmPopup_2) {
    "use strict";
    var LoadGameComponent = (function (_super) {
        __extends(LoadGameComponent, _super);
        function LoadGameComponent(props) {
            _super.call(this, props);
            this.displayName = "LoadGame";
            this.popupID = undefined;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        LoadGameComponent.prototype.bindMethods = function () {
            this.handleLoad = this.handleLoad.bind(this);
            this.handleClose = this.handleClose.bind(this);
            this.updateClosePopup = this.updateClosePopup.bind(this);
            this.overRideLightBoxClose = this.overRideLightBoxClose.bind(this);
            this.handleUndoDelete = this.handleUndoDelete.bind(this);
            this.deleteSelectedKeys = this.deleteSelectedKeys.bind(this);
            this.handleRowChange = this.handleRowChange.bind(this);
            this.getClosePopupContent = this.getClosePopupContent.bind(this);
            this.handleDelete = this.handleDelete.bind(this);
        };
        LoadGameComponent.prototype.getInitialStateTODO = function () {
            return ({
                saveKeysToDelete: [],
                saveKey: null
            });
        };
        LoadGameComponent.prototype.componentDidMount = function () {
            ReactDOM.findDOMNode(this.ref_TODO_okButton).focus();
        };
        LoadGameComponent.prototype.handleRowChange = function (row) {
            this.setState({
                saveKey: row.data.storageKey
            });
            this.handleUndoDelete(row.data.storageKey);
        };
        LoadGameComponent.prototype.handleLoad = function () {
            var saveKey = this.state.saveKey;
            var afterConfirmFN = function () {
                ReactDOM.findDOMNode(this.ref_TODO_okButton).blur();
                window.setTimeout(function () {
                    App_33.default.load(saveKey);
                }, 5);
            }.bind(this);
            if (this.state.saveKeysToDelete.indexOf(saveKey) !== -1) {
                var boundClose = this.handleClose.bind(this, true, afterConfirmFN);
                this.handleUndoDelete(saveKey, boundClose);
            }
            else {
                this.handleClose(true, afterConfirmFN);
            }
        };
        LoadGameComponent.prototype.deleteSelectedKeys = function () {
            this.popupID = this.ref_TODO_popupManager.makePopup({
                contentConstructor: ConfirmPopup_2.default,
                contentProps: this.getClosePopupContent(null, false, false)
            });
        };
        LoadGameComponent.prototype.getClosePopupContent = function (afterCloseCallback, shouldCloseParent, shouldUndoAll) {
            if (shouldCloseParent === void 0) { shouldCloseParent = true; }
            if (shouldUndoAll === void 0) { shouldUndoAll = false; }
            var deleteFN = function () {
                for (var i = 0; i < this.state.saveKeysToDelete.length; i++) {
                    localStorage.removeItem(this.state.saveKeysToDelete[i]);
                }
                this.setState({
                    saveKeysToDelete: []
                });
            }.bind(this);
            var closeFN = function () {
                this.popupID = undefined;
                if (shouldCloseParent) {
                    this.props.handleClose();
                }
                if (shouldUndoAll) {
                    this.setState({
                        saveKeysToDelete: []
                    });
                }
                if (afterCloseCallback)
                    afterCloseCallback();
            }.bind(this);
            var confirmText = ["Are you sure you want to delete the following saves?"];
            confirmText = confirmText.concat(this.state.saveKeysToDelete.map(function (saveKey) {
                return saveKey.replace("Save.", "");
            }));
            return ({
                handleOk: deleteFN,
                handleClose: closeFN,
                contentText: confirmText
            });
        };
        LoadGameComponent.prototype.updateClosePopup = function () {
            if (isFinite(this.popupID)) {
                this.ref_TODO_popupManager.setPopupContent(this.popupID, { contentText: this.getClosePopupContent().contentText });
            }
            else if (this.state.saveKeysToDelete.length < 1) {
                if (isFinite(this.popupID))
                    this.ref_TODO_popupManager.closePopup(this.popupID);
                this.popupID = undefined;
            }
        };
        LoadGameComponent.prototype.handleClose = function (deleteSaves, afterCloseCallback) {
            if (deleteSaves === void 0) { deleteSaves = true; }
            if (!deleteSaves || this.state.saveKeysToDelete.length < 1) {
                this.props.handleClose();
                if (afterCloseCallback)
                    afterCloseCallback();
                return;
            }
            this.popupID = this.ref_TODO_popupManager.makePopup({
                contentConstructor: ConfirmPopup_2.default,
                contentProps: this.getClosePopupContent(afterCloseCallback, true, true)
            });
        };
        LoadGameComponent.prototype.handleDelete = function (saveKey) {
            this.setState({
                saveKeysToDelete: this.state.saveKeysToDelete.concat(saveKey)
            }, this.updateClosePopup);
        };
        LoadGameComponent.prototype.handleUndoDelete = function (saveKey, callback) {
            var afterDeleteFN = function () {
                this.updateClosePopup();
                if (callback)
                    callback();
            };
            var i = this.state.saveKeysToDelete.indexOf(saveKey);
            if (i !== -1) {
                var newsaveKeysToDelete = this.state.saveKeysToDelete.slice(0);
                newsaveKeysToDelete.splice(i, 1);
                this.setState({
                    saveKeysToDelete: newsaveKeysToDelete
                }, afterDeleteFN);
            }
        };
        LoadGameComponent.prototype.overRideLightBoxClose = function () {
            this.handleClose();
        };
        LoadGameComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "save-game"
            }, PopupManager_7.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), SaveList_1.default({
                onRowChange: this.handleRowChange,
                autoSelect: !Boolean(App_33.default.game.gameStorageKey),
                selectedKey: App_33.default.game.gameStorageKey,
                allowDelete: true,
                onDelete: this.handleDelete,
                onUndoDelete: this.handleUndoDelete,
                saveKeysToDelete: this.state.saveKeysToDelete
            }), React.DOM.input({
                className: "save-game-name",
                type: "text",
                value: this.state.saveKey ? this.state.saveKey.replace("Save.", "") : "",
                readOnly: true
            }), React.DOM.div({
                className: "save-game-buttons-container"
            }, React.DOM.button({
                className: "save-game-button",
                onClick: this.handleLoad,
                ref: function (component) {
                    _this.ref_TODO_okButton = component;
                }
            }, "Load"), React.DOM.button({
                className: "save-game-button",
                onClick: this.handleClose.bind(this, true, null)
            }, "Cancel"), React.DOM.button({
                className: "save-game-button",
                onClick: this.deleteSelectedKeys,
                disabled: this.state.saveKeysToDelete.length < 1
            }, "Delete"))));
        };
        return LoadGameComponent;
    }(React.Component));
    exports.LoadGameComponent = LoadGameComponent;
    var Factory = React.createFactory(LoadGameComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/saves/SaveGame", ["require", "exports", "src/App", "src/uicomponents/saves/SaveList", "src/uicomponents/popups/PopupManager", "src/uicomponents/popups/ConfirmPopup"], function (require, exports, App_34, SaveList_2, PopupManager_8, ConfirmPopup_3) {
    "use strict";
    var SaveGameComponent = (function (_super) {
        __extends(SaveGameComponent, _super);
        function SaveGameComponent(props) {
            _super.call(this, props);
            this.displayName = "SaveGame";
            this.state = {
                saveName: ""
            };
            this.bindMethods();
        }
        SaveGameComponent.prototype.bindMethods = function () {
            this.handleClose = this.handleClose.bind(this);
            this.makeConfirmOverWritePopup = this.makeConfirmOverWritePopup.bind(this);
            this.setSaveName = this.setSaveName.bind(this);
            this.saveGame = this.saveGame.bind(this);
            this.handleSave = this.handleSave.bind(this);
            this.handleRowChange = this.handleRowChange.bind(this);
        };
        SaveGameComponent.prototype.componentDidMount = function () {
            if (App_34.default.game.gameStorageKey) {
                ReactDOM.findDOMNode(this.ref_TODO_okButton).focus();
            }
            else {
                ReactDOM.findDOMNode(this.ref_TODO_saveName).focus();
            }
        };
        SaveGameComponent.prototype.setSaveName = function (newText) {
            this.setState({
                saveName: newText
            });
        };
        SaveGameComponent.prototype.handleSaveNameInput = function (e) {
            var target = e.target;
            this.setSaveName(target.value);
        };
        SaveGameComponent.prototype.handleRowChange = function (row) {
            this.setSaveName(row.data.name);
        };
        SaveGameComponent.prototype.handleSave = function () {
            var saveName = this.state.saveName;
            var saveKey = "Save." + saveName;
            if (localStorage[saveKey]) {
                this.makeConfirmOverWritePopup(saveName);
            }
            else {
                this.saveGame();
            }
        };
        SaveGameComponent.prototype.saveGame = function () {
            App_34.default.game.save(this.state.saveName);
            this.handleClose();
        };
        SaveGameComponent.prototype.handleClose = function () {
            this.props.handleClose();
        };
        SaveGameComponent.prototype.makeConfirmOverWritePopup = function (saveName) {
            var confirmProps = {
                handleOk: this.saveGame,
                contentText: "Are you sure you want to overwrite " +
                    saveName.replace("Save.", "") + "?"
            };
            this.ref_TODO_popupManager.makePopup({
                contentConstructor: ConfirmPopup_3.default,
                contentProps: confirmProps
            });
        };
        SaveGameComponent.prototype.render = function () {
            var _this = this;
            return (React.DOM.div({
                className: "save-game"
            }, PopupManager_8.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), SaveList_2.default({
                onRowChange: this.handleRowChange,
                selectedKey: App_34.default.game.gameStorageKey,
                autoSelect: false
            }), React.DOM.input({
                className: "save-game-name",
                ref: function (component) {
                    _this.ref_TODO_saveName = component;
                },
                type: "text",
                value: this.state.saveName,
                onChange: this.handleSaveNameInput,
                maxLength: 64
            }), React.DOM.div({
                className: "save-game-buttons-container"
            }, React.DOM.button({
                className: "save-game-button",
                onClick: this.handleSave,
                ref: function (component) {
                    _this.ref_TODO_okButton = component;
                }
            }, "Save"), React.DOM.button({
                className: "save-game-button",
                onClick: this.handleClose
            }, "Cancel"))));
        };
        return SaveGameComponent;
    }(React.Component));
    exports.SaveGameComponent = SaveGameComponent;
    var Factory = React.createFactory(SaveGameComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/OptionsCheckbox", ["require", "exports"], function (require, exports) {
    "use strict";
    var OptionsCheckboxComponent = (function (_super) {
        __extends(OptionsCheckboxComponent, _super);
        function OptionsCheckboxComponent(props) {
            _super.call(this, props);
            this.displayName = "OptionsCheckbox";
        }
        OptionsCheckboxComponent.prototype.render = function () {
            var checkboxID = "options-checkbox-" + this.props.label;
            return (React.DOM.div({
                className: "options-checkbox-container"
            }, React.DOM.input({
                type: "checkbox",
                id: checkboxID,
                checked: this.props.isChecked,
                onChange: this.props.onChangeFN
            }), React.DOM.label({
                htmlFor: checkboxID
            }, this.props.label)));
        };
        return OptionsCheckboxComponent;
    }(React.Component));
    exports.OptionsCheckboxComponent = OptionsCheckboxComponent;
    var Factory = React.createFactory(OptionsCheckboxComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/OptionsNumericField", ["require", "exports", "src/utility"], function (require, exports, utility_36) {
    "use strict";
    var OptionsNumericFieldComponent = (function (_super) {
        __extends(OptionsNumericFieldComponent, _super);
        function OptionsNumericFieldComponent(props) {
            _super.call(this, props);
            this.displayName = "OptionsNumericField";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        OptionsNumericFieldComponent.prototype.bindMethods = function () {
            this.triggerOnChangeFN = this.triggerOnChangeFN.bind(this);
            this.handleChange = this.handleChange.bind(this);
        };
        OptionsNumericFieldComponent.prototype.getInitialStateTODO = function () {
            return ({
                value: this.props.value
            });
        };
        OptionsNumericFieldComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.value !== this.state.value) {
                this.setState({ value: newProps.value });
            }
        };
        OptionsNumericFieldComponent.prototype.triggerOnChangeFN = function () {
            this.props.onChangeFN(this.state.value);
        };
        OptionsNumericFieldComponent.prototype.handleChange = function (e) {
            var target = e.target;
            var value = parseFloat(target.value);
            if (!isFinite(value)) {
                return;
            }
            value = utility_36.clamp(value, parseFloat(target.min), parseFloat(target.max));
            this.setState({
                value: value
            }, this.triggerOnChangeFN);
        };
        OptionsNumericFieldComponent.prototype.render = function () {
            var inputId = "" + this.props.id + "-input";
            return (React.DOM.div({
                className: "options-numeric-field-container",
                id: this.props.id
            }, React.DOM.input({
                className: "options-numeric-field-input",
                type: "number",
                id: inputId,
                value: "" + this.state.value,
                min: this.props.min,
                max: this.props.max,
                step: this.props.step,
                onChange: this.handleChange
            }, null), React.DOM.label({
                className: "options-numeric-field-label",
                htmlFor: inputId
            }, this.props.label)));
        };
        return OptionsNumericFieldComponent;
    }(React.Component));
    exports.OptionsNumericFieldComponent = OptionsNumericFieldComponent;
    var Factory = React.createFactory(OptionsNumericFieldComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/tutorials/TutorialState", ["require", "exports"], function (require, exports) {
    "use strict";
    var TutorialState;
    (function (TutorialState) {
        TutorialState[TutorialState["neverShow"] = -1] = "neverShow";
        TutorialState[TutorialState["dontShowThisSession"] = 0] = "dontShowThisSession";
        TutorialState[TutorialState["show"] = 1] = "show";
    })(TutorialState || (TutorialState = {}));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = TutorialState;
    var _a;
});
define("src/tutorials/TutorialStatus", ["require", "exports", "src/tutorials/TutorialState"], function (require, exports, TutorialState_1) {
    "use strict";
    var defaultTutorialStatus = {
        introTutorial: TutorialState_1.default.show
    };
    var TutorialStatus = (function () {
        function TutorialStatus() {
            this.setDefaultValues();
        }
        TutorialStatus.prototype.setDefaultValues = function () {
            this.introTutorial = defaultTutorialStatus.introTutorial;
        };
        TutorialStatus.prototype.setDefaultValuesForUndefined = function () {
            this.introTutorial = isFinite(this.introTutorial) ? this.introTutorial : defaultTutorialStatus.introTutorial;
        };
        TutorialStatus.prototype.save = function () {
            localStorage.setItem("TutorialStatus", JSON.stringify(this.serialize()));
        };
        TutorialStatus.prototype.load = function () {
            this.setDefaultValues();
            if (!localStorage["TutorialStatus"]) {
                return;
            }
            var parsedData = JSON.parse(localStorage.getItem("TutorialStatus"));
            this.deSerialize(parsedData);
        };
        TutorialStatus.prototype.reset = function () {
            localStorage.removeItem("TutorialStatus");
            this.setDefaultValues();
        };
        TutorialStatus.prototype.serialize = function () {
            return ({
                introTutorial: this.introTutorial
            });
        };
        TutorialStatus.getDeSerializedState = function (state) {
            return state === TutorialState_1.default.dontShowThisSession ? TutorialState_1.default.show : state;
        };
        TutorialStatus.prototype.deSerialize = function (data) {
            this.introTutorial = TutorialStatus.getDeSerializedState(data.introTutorial);
            this.setDefaultValuesForUndefined();
        };
        return TutorialStatus;
    }());
    var tutorialStatus = new TutorialStatus();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = tutorialStatus;
    var _a;
});
define("src/uicomponents/galaxymap/OptionsList", ["require", "exports", "src/uicomponents/galaxymap/OptionsCheckbox", "src/uicomponents/popups/PopupManager", "src/options", "src/uicomponents/galaxymap/OptionsNumericField", "src/uicomponents/galaxymap/OptionsGroup", "src/uicomponents/popups/ConfirmPopup", "src/uicomponents/notifications/NotificationFilterButton", "src/eventManager", "src/utility", "src/tutorials/TutorialStatus"], function (require, exports, OptionsCheckbox_1, PopupManager_9, Options_3, OptionsNumericField_1, OptionsGroup_3, ConfirmPopup_4, NotificationFilterButton_2, eventManager_35, utility_37, TutorialStatus_1) {
    "use strict";
    var OptionsListComponent = (function (_super) {
        __extends(OptionsListComponent, _super);
        function OptionsListComponent(props) {
            _super.call(this, props);
            this.displayName = "OptionsList";
            this.bindMethods();
        }
        OptionsListComponent.prototype.bindMethods = function () {
            this.handleResetAllOptions = this.handleResetAllOptions.bind(this);
        };
        OptionsListComponent.prototype.handleResetAllOptions = function () {
            var _this = this;
            var confirmProps = {
                handleOk: function () {
                    Options_3.default.setDefaults();
                    _this.forceUpdate();
                },
                contentText: "Are you sure you want to reset all options?"
            };
            this.ref_TODO_popupManager.makePopup({
                contentConstructor: ConfirmPopup_4.default,
                contentProps: confirmProps,
                popupProps: {
                    dragPositionerProps: {
                        containerDragOnly: true,
                        preventAutoResize: true
                    }
                }
            });
        };
        OptionsListComponent.prototype.render = function () {
            var _this = this;
            var allOptions = [];
            var battleAnimationOptions = [];
            var battleAnimationStages = [
                {
                    stage: "before",
                    displayName: "Before ability (ms)",
                    min: 0,
                    max: 5000,
                    step: 50
                },
                {
                    stage: "effectDuration",
                    displayName: "Ability effect duration (*)",
                    min: 0,
                    max: 10,
                    step: 0.1
                },
                {
                    stage: "after",
                    displayName: "After ability (ms)",
                    min: 0,
                    max: 5000,
                    step: 50
                },
                {
                    stage: "unitEnter",
                    displayName: "Unit enter (ms)",
                    min: 0,
                    max: 1000,
                    step: 10
                },
                {
                    stage: "unitExit",
                    displayName: "Unit exit (ms)",
                    min: 0,
                    max: 1000,
                    step: 10
                }
            ];
            for (var i = 0; i < battleAnimationStages.length; i++) {
                var props = battleAnimationStages[i];
                var stage = props.stage;
                battleAnimationOptions.push({
                    key: stage,
                    content: OptionsNumericField_1.default({
                        label: props.displayName,
                        id: "options-battle-animation-" + stage,
                        value: Options_3.default.battleAnimationTiming[stage],
                        min: props.min,
                        max: props.max,
                        step: props.step,
                        onChangeFN: function (stage, value) {
                            Options_3.default.battleAnimationTiming[stage] = value;
                        }.bind(null, stage)
                    })
                });
            }
            allOptions.push(OptionsGroup_3.default({
                key: "battleAnimationOptions",
                header: "Battle animation timing",
                options: battleAnimationOptions,
                resetFN: function () {
                    Options_3.default.setDefaultForCategory("battleAnimationTiming");
                    _this.forceUpdate();
                }
            }));
            var debugOptions = [];
            debugOptions.push({
                key: "debugMode",
                content: OptionsCheckbox_1.default({
                    isChecked: Options_3.default.debugMode,
                    label: "Debug mode",
                    onChangeFN: function () {
                        Options_3.default.debugMode = !Options_3.default.debugMode;
                        _this.forceUpdate();
                        eventManager_35.default.dispatchEvent("renderUI");
                    }
                })
            });
            if (Options_3.default.debugMode) {
                debugOptions.push({
                    key: "battleSimulationDepth",
                    content: React.DOM.div({}, React.DOM.input({
                        type: "number",
                        id: "battle-simulation-depth-input",
                        value: "" + Options_3.default.debugOptions.battleSimulationDepth,
                        min: 1,
                        max: 500,
                        step: 1,
                        onChange: function (e) {
                            var target = e.target;
                            var value = parseInt(target.value);
                            if (!isFinite(value)) {
                                return;
                            }
                            value = utility_37.clamp(value, parseFloat(target.min), parseFloat(target.max));
                            Options_3.default.debugOptions.battleSimulationDepth = value;
                            _this.forceUpdate();
                        }
                    }), React.DOM.label({
                        htmlFor: "battle-simulation-depth-input"
                    }, "AI vs. AI Battle simulation depth"))
                });
            }
            allOptions.push(OptionsGroup_3.default({
                key: "debug",
                header: "Debug",
                options: debugOptions,
                resetFN: function () {
                    Options_3.default.setDefaultForCategory("debugOptions");
                    Options_3.default.setDefaultForCategory("debugMode");
                }
            }));
            var uiOptions = [];
            uiOptions.push({
                key: "noHamburger",
                content: OptionsCheckbox_1.default({
                    isChecked: Options_3.default.ui.noHamburger,
                    label: "Always expand top right menu on low resolution",
                    onChangeFN: function () {
                        Options_3.default.ui.noHamburger = !Options_3.default.ui.noHamburger;
                        eventManager_35.default.dispatchEvent("updateHamburgerMenu");
                        _this.forceUpdate();
                    }
                })
            });
            uiOptions.push({
                key: "notificationLogFilter",
                content: NotificationFilterButton_2.default({
                    filter: this.props.log.notificationFilter,
                    text: "Message settings",
                    highlightedOptionKey: null
                })
            });
            uiOptions.push({
                key: "resetTutorials",
                content: React.DOM.button({
                    className: "reset-tutorials-button",
                    onClick: TutorialStatus_1.default.reset
                }, "Reset tutorials")
            });
            allOptions.push(OptionsGroup_3.default({
                key: "ui",
                header: "UI",
                options: uiOptions,
                resetFN: function () {
                    Options_3.default.setDefaultForCategory("ui");
                }
            }));
            var displayOptions = [];
            displayOptions.push({
                key: "borderWidth",
                content: OptionsNumericField_1.default({
                    label: "Border width",
                    id: "options-border-width",
                    min: 0,
                    max: 50,
                    step: 1,
                    value: Options_3.default.display.borderWidth,
                    onChangeFN: function (value) {
                        Options_3.default.display.borderWidth = value;
                        eventManager_35.default.dispatchEvent("renderMap");
                    }
                })
            });
            allOptions.push(OptionsGroup_3.default({
                key: "display",
                header: "Display",
                options: displayOptions,
                resetFN: function () {
                    Options_3.default.setDefaultForCategory("display");
                    _this.forceUpdate();
                }
            }));
            return (React.DOM.div({ className: "options" }, PopupManager_9.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }), React.DOM.div({ className: "options-header" }, "Options", React.DOM.button({
                className: "reset-options-button reset-all-options-button",
                onClick: this.handleResetAllOptions
            }, "Reset all options")), allOptions));
        };
        return OptionsListComponent;
    }(React.Component));
    exports.OptionsListComponent = OptionsListComponent;
    var Factory = React.createFactory(OptionsListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/TopMenuPopups", ["require", "exports", "src/uicomponents/popups/TopMenuPopup", "src/uicomponents/popups/PopupManager", "src/uicomponents/diplomacy/DiplomacyOverview", "src/uicomponents/unitlist/ItemEquip", "src/uicomponents/galaxymap/EconomySummary", "src/uicomponents/technologies/TechnologiesList", "src/uicomponents/production/ProductionOverview", "src/uicomponents/saves/LoadGame", "src/uicomponents/saves/SaveGame", "src/uicomponents/galaxymap/OptionsList", "src/options"], function (require, exports, TopMenuPopup_5, PopupManager_10, DiplomacyOverview_1, ItemEquip_1, EconomySummary_1, TechnologiesList_1, ProductionOverview_1, LoadGame_1, SaveGame_1, OptionsList_1, Options_4) {
    "use strict";
    var TopMenuPopupsComponent = (function (_super) {
        __extends(TopMenuPopupsComponent, _super);
        function TopMenuPopupsComponent(props) {
            _super.call(this, props);
            this.displayName = "TopMenuPopups";
            this.cachedPopupRects = {};
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        TopMenuPopupsComponent.prototype.bindMethods = function () {
            this.makePopup = this.makePopup.bind(this);
            this.closePopup = this.closePopup.bind(this);
            this.togglePopup = this.togglePopup.bind(this);
        };
        TopMenuPopupsComponent.prototype.getInitialStateTODO = function () {
            return ({
                production: undefined,
                equipItems: undefined,
                economySummary: undefined,
                saveGame: undefined,
                loadGame: undefined,
                options: undefined,
                diplomacy: undefined,
                technologies: undefined
            });
        };
        TopMenuPopupsComponent.prototype.closePopup = function (popupType) {
            var popupComponent = this.ref_TODO_popupManager.popupComponentsByID[this.state[popupType]];
            var popupNode = ReactDOM.findDOMNode(popupComponent);
            this.cachedPopupRects[popupType] = popupNode.getBoundingClientRect();
            this.ref_TODO_popupManager.closePopup(this.state[popupType]);
            var stateObj = {};
            stateObj[popupType] = undefined;
            this.setState(stateObj);
            if (popupType === "options") {
                Options_4.default.save();
            }
        };
        TopMenuPopupsComponent.prototype.makePopup = function (popupType) {
            var contentConstructor;
            var contentProps;
            var popupProps = {
                resizable: true,
                minWidth: 150,
                minHeight: 100,
                initialPosition: this.cachedPopupRects[popupType] || {},
                dragPositionerProps: {
                    preventAutoResize: true,
                    containerDragOnly: true,
                }
            };
            switch (popupType) {
                case "production":
                    {
                        contentConstructor = ProductionOverview_1.default;
                        contentProps =
                            {
                                player: this.props.player
                            };
                        if (!popupProps.initialPosition.width) {
                            popupProps.initialPosition.width = 600;
                        }
                        break;
                    }
                case "equipItems":
                    {
                        contentConstructor = ItemEquip_1.default;
                        contentProps =
                            {
                                player: this.props.player
                            };
                        popupProps.minWidth = 440;
                        break;
                    }
                case "economySummary":
                    {
                        contentConstructor = EconomySummary_1.default;
                        contentProps =
                            {
                                player: this.props.player
                            };
                        break;
                    }
                case "saveGame":
                    {
                        contentConstructor = SaveGame_1.default;
                        contentProps =
                            {
                                handleClose: this.closePopup.bind(this, "saveGame")
                            };
                        break;
                    }
                case "loadGame":
                    {
                        contentConstructor = LoadGame_1.default;
                        contentProps =
                            {
                                handleClose: this.closePopup.bind(this, "loadGame")
                            };
                        break;
                    }
                case "options":
                    {
                        contentConstructor = OptionsList_1.default;
                        contentProps =
                            {
                                log: this.props.game.notificationLog
                            };
                        break;
                    }
                case "diplomacy":
                    {
                        contentConstructor = DiplomacyOverview_1.default;
                        contentProps =
                            {
                                player: this.props.player,
                                totalPlayerCount: this.props.game.playerOrder.length,
                                metPlayers: this.props.player.diplomacyStatus.metPlayers,
                                statusByPlayer: this.props.player.diplomacyStatus.statusByPlayer
                            };
                        break;
                    }
                case "technologies":
                    {
                        contentConstructor = TechnologiesList_1.default;
                        contentProps =
                            {
                                playerTechnology: this.props.player.playerTechnology
                            };
                        popupProps.minWidth = 430;
                        break;
                    }
            }
            var id = this.ref_TODO_popupManager.makePopup({
                contentConstructor: TopMenuPopup_5.default,
                contentProps: {
                    contentConstructor: contentConstructor,
                    contentProps: contentProps,
                    handleClose: this.closePopup.bind(this, popupType)
                },
                popupProps: popupProps
            });
            var stateObj = {};
            stateObj[popupType] = id;
            this.setState(stateObj);
        };
        TopMenuPopupsComponent.prototype.togglePopup = function (popupType) {
            if (isFinite(this.state[popupType])) {
                this.closePopup(popupType);
            }
            else {
                this.makePopup(popupType);
            }
        };
        TopMenuPopupsComponent.prototype.render = function () {
            var _this = this;
            return (PopupManager_10.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                }
            }));
        };
        return TopMenuPopupsComponent;
    }(React.Component));
    exports.TopMenuPopupsComponent = TopMenuPopupsComponent;
    var Factory = React.createFactory(TopMenuPopupsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/TopMenu", ["require", "exports", "src/options", "src/uicomponents/galaxymap/TopMenuPopups", "src/eventManager"], function (require, exports, Options_5, TopMenuPopups_1, eventManager_36) {
    "use strict";
    var TopMenuComponent = (function (_super) {
        __extends(TopMenuComponent, _super);
        function TopMenuComponent(props) {
            _super.call(this, props);
            this.displayName = "TopMenu";
            this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);
            this.cachedTopMenuWidth = undefined;
            this.cachedButtonWidths = [];
            this.cachedMenuButtonWidth = 37;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        TopMenuComponent.prototype.bindMethods = function () {
            this.handleResize = this.handleResize.bind(this);
            this.togglePopup = this.togglePopup.bind(this);
            this.toggleCondensedMenu = this.toggleCondensedMenu.bind(this);
            this.handleToggleHamburger = this.handleToggleHamburger.bind(this);
            this.delayedResize = this.delayedResize.bind(this);
        };
        TopMenuComponent.prototype.getInitialStateTODO = function () {
            return ({
                hasCondensedMenu: false,
                buttonsToPlace: 999,
                condensedMenuOpened: Options_5.default.ui.noHamburger
            });
        };
        TopMenuComponent.prototype.componentDidMount = function () {
            window.addEventListener("resize", this.handleResize, false);
            eventManager_36.default.addEventListener("playerControlUpdated", this.delayedResize);
            eventManager_36.default.addEventListener("updateHamburgerMenu", this.handleToggleHamburger);
            this.handleResize();
        };
        TopMenuComponent.prototype.componentWillUnmount = function () {
            window.removeEventListener("resize", this.handleResize);
            eventManager_36.default.removeEventListener("playerControlUpdated", this.delayedResize);
            eventManager_36.default.removeEventListener("updateHamburgerMenu", this.handleToggleHamburger);
        };
        TopMenuComponent.prototype.handleToggleHamburger = function () {
            this.handleResize();
            this.forceUpdate();
        };
        TopMenuComponent.prototype.delayedResize = function () {
            window.setTimeout(this.handleResize, 0);
        };
        TopMenuComponent.prototype.handleResize = function () {
            if (!this.cachedTopMenuWidth) {
                this.cachedTopMenuWidth = ReactDOM.findDOMNode(this.ref_TODO_topMenu).getBoundingClientRect().width;
                var buttons = ReactDOM.findDOMNode(this.ref_TODO_topMenuItems).children;
                var margin = parseInt(window.getComputedStyle(buttons[0]).margin) * 2;
                for (var i = 0; i < buttons.length; i++) {
                    var buttonWidth = buttons[i].getBoundingClientRect().width + margin;
                    this.cachedButtonWidths.push(buttonWidth);
                }
            }
            var topMenuHeight = window.innerHeight > 600 ? 50 : 32;
            var topBar = document.getElementsByClassName("top-bar-info")[0];
            var topBarRect = topBar.getBoundingClientRect();
            var rightmostElement = topBar;
            var rightmostRect = topBarRect;
            var fleetContainer = document.getElementsByClassName("fleet-selection")[0];
            if (fleetContainer) {
                var fleetElementToCheckAgainst;
                var firstChild = fleetContainer.firstChild;
                if (firstChild.classList.contains("fleet-selection-controls")) {
                    fleetElementToCheckAgainst = document.getElementsByClassName("fleet-selection-selected-wrapper")[0];
                }
                else {
                    fleetElementToCheckAgainst = firstChild;
                }
                if (fleetElementToCheckAgainst) {
                    var fleetRect = fleetElementToCheckAgainst.getBoundingClientRect();
                    if (fleetRect.top < topMenuHeight && fleetRect.right > topBarRect.right) {
                        rightmostElement = fleetElementToCheckAgainst;
                        rightmostRect = fleetRect;
                    }
                }
            }
            var spaceAvailable = window.innerWidth - rightmostRect.right;
            var hasCondensedMenu = spaceAvailable < this.cachedTopMenuWidth;
            var amountOfButtonsToPlace = 0;
            if (hasCondensedMenu) {
                if (!Options_5.default.ui.noHamburger) {
                    spaceAvailable -= this.cachedMenuButtonWidth;
                }
                var padding = window.innerHeight > 600 ? 25 : 0;
                for (var i = 0; i < this.cachedButtonWidths.length; i++) {
                    var buttonWidthToCheck = this.cachedButtonWidths[i];
                    if (spaceAvailable > buttonWidthToCheck + padding) {
                        amountOfButtonsToPlace++;
                        spaceAvailable -= buttonWidthToCheck;
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                amountOfButtonsToPlace = this.cachedButtonWidths.length;
            }
            this.setState({
                hasCondensedMenu: hasCondensedMenu,
                buttonsToPlace: amountOfButtonsToPlace
            });
        };
        TopMenuComponent.prototype.togglePopup = function (popupType) {
            this.ref_TODO_popups.togglePopup(popupType);
            this.forceUpdate();
        };
        TopMenuComponent.prototype.toggleCondensedMenu = function () {
            this.setState({
                condensedMenuOpened: !this.state.condensedMenuOpened
            });
        };
        TopMenuComponent.prototype.render = function () {
            var _this = this;
            var menuItemTabIndex = this.state.opened ? -1 : 0;
            var topMenuButtons = [
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-production",
                    key: "production",
                    onClick: this.togglePopup.bind(this, "production"),
                    tabIndex: menuItemTabIndex
                }, "Production"),
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-equip",
                    key: "equipItems",
                    onClick: this.togglePopup.bind(this, "equipItems"),
                    tabIndex: menuItemTabIndex
                }, "Equip"),
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-diplomacy",
                    key: "diplomacy",
                    onClick: this.togglePopup.bind(this, "diplomacy"),
                    tabIndex: menuItemTabIndex
                }, "Diplomacy"),
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-technology",
                    key: "technologies",
                    onClick: this.togglePopup.bind(this, "technologies"),
                    tabIndex: menuItemTabIndex
                }, "Technology"),
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-load",
                    key: "loadGame",
                    onClick: this.togglePopup.bind(this, "loadGame"),
                    tabIndex: menuItemTabIndex
                }, "Load"),
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-save",
                    key: "saveGame",
                    onClick: this.togglePopup.bind(this, "saveGame"),
                    tabIndex: menuItemTabIndex
                }, "Save"),
                React.DOM.button({
                    className: "top-menu-items-button top-menu-items-button-options",
                    key: "options",
                    onClick: this.togglePopup.bind(this, "options"),
                    tabIndex: menuItemTabIndex
                }, "Options")
            ];
            var topMenuItems = topMenuButtons.slice(0, this.state.buttonsToPlace);
            var leftoverButtons = topMenuButtons.slice(this.state.buttonsToPlace);
            if (this.state.hasCondensedMenu && !Options_5.default.ui.noHamburger) {
                topMenuItems.push(React.DOM.button({
                    className: "top-menu-items-button top-menu-open-condensed-button",
                    key: "openCondensedMenu",
                    onClick: this.toggleCondensedMenu,
                    tabIndex: menuItemTabIndex
                }));
            }
            var openedCondensedMenu = null;
            if ((this.state.condensedMenuOpened || Options_5.default.ui.noHamburger) && leftoverButtons.length > 0) {
                openedCondensedMenu = React.DOM.div({
                    className: "top-menu-opened-condensed-menu"
                }, leftoverButtons);
            }
            ;
            return (React.DOM.div({
                className: "top-menu-wrapper"
            }, React.DOM.div({
                className: "top-menu",
                ref: function (component) {
                    _this.ref_TODO_topMenu = component;
                }
            }, React.DOM.div({
                className: "top-menu-items",
                ref: function (component) {
                    _this.ref_TODO_topMenuItems = component;
                }
            }, topMenuItems)), openedCondensedMenu, TopMenuPopups_1.default({
                ref: function (component) {
                    _this.ref_TODO_popups = component;
                },
                player: this.props.player,
                game: this.props.game
            })));
        };
        return TopMenuComponent;
    }(React.Component));
    exports.TopMenuComponent = TopMenuComponent;
    var Factory = React.createFactory(TopMenuComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/possibleactions/AttackTarget", ["require", "exports", "src/eventManager", "src/uicomponents/PlayerFlag"], function (require, exports, eventManager_37, PlayerFlag_7) {
    "use strict";
    var AttackTargetComponent = (function (_super) {
        __extends(AttackTargetComponent, _super);
        function AttackTargetComponent(props) {
            _super.call(this, props);
            this.displayName = "AttackTarget";
            this.bindMethods();
        }
        AttackTargetComponent.prototype.bindMethods = function () {
            this.handleAttack = this.handleAttack.bind(this);
        };
        AttackTargetComponent.prototype.handleAttack = function () {
            eventManager_37.default.dispatchEvent("attackTarget", this.props.attackTarget);
        };
        AttackTargetComponent.prototype.render = function () {
            var target = this.props.attackTarget;
            return (React.DOM.div({
                className: "attack-target",
                onClick: this.handleAttack
            }, React.DOM.div({
                className: "attack-target-type"
            }, target.type), PlayerFlag_7.default({
                flag: target.enemy.flag,
                props: {
                    className: "attack-target-player-icon"
                }
            })));
        };
        return AttackTargetComponent;
    }(React.Component));
    exports.AttackTargetComponent = AttackTargetComponent;
    var Factory = React.createFactory(AttackTargetComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/possibleactions/BuildingUpgradeListItem", ["require", "exports", "src/uicomponents/mixins/UpdateWhenMoneyChanges", "src/uicomponents/mixins/applyMixins"], function (require, exports, UpdateWhenMoneyChanges_2, applyMixins_14) {
    "use strict";
    var BuildingUpgradeListItemComponent = (function (_super) {
        __extends(BuildingUpgradeListItemComponent, _super);
        function BuildingUpgradeListItemComponent(props) {
            _super.call(this, props);
            this.displayName = "BuildingUpgradeListItem";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
            applyMixins_14.default(this, new UpdateWhenMoneyChanges_2.default(this, this.overrideHandleMoneyChange));
        }
        BuildingUpgradeListItemComponent.prototype.bindMethods = function () {
            this.handleClick = this.handleClick.bind(this);
            this.overrideHandleMoneyChange = this.overrideHandleMoneyChange.bind(this);
        };
        BuildingUpgradeListItemComponent.prototype.getInitialStateTODO = function () {
            return ({
                canAfford: this.props.player.money >= this.props.upgradeData.cost
            });
        };
        BuildingUpgradeListItemComponent.prototype.overrideHandleMoneyChange = function () {
            this.setState({
                canAfford: this.props.player.money >= this.props.upgradeData.cost
            });
        };
        BuildingUpgradeListItemComponent.prototype.handleClick = function () {
            this.props.handleUpgrade(this.props.upgradeData);
        };
        BuildingUpgradeListItemComponent.prototype.render = function () {
            var upgradeData = this.props.upgradeData;
            var rowProps = {
                key: upgradeData.template.type,
                className: "building-upgrade-list-item",
                onClick: this.handleClick,
                title: upgradeData.template.description
            };
            var costProps = {
                key: "cost",
                className: "building-upgrade-list-item-cost"
            };
            if (!this.state.canAfford) {
                rowProps.onClick = null;
                rowProps.disabled = true;
                rowProps.className += " disabled";
                costProps.className += " negative";
            }
            return (React.DOM.tr(rowProps, React.DOM.td({
                key: "name",
                className: "building-upgrade-list-item-name"
            }, upgradeData.template.displayName + " " + (upgradeData.level > 1 ? upgradeData.level : "")), React.DOM.td(costProps, upgradeData.cost)));
        };
        return BuildingUpgradeListItemComponent;
    }(React.Component));
    exports.BuildingUpgradeListItemComponent = BuildingUpgradeListItemComponent;
    var Factory = React.createFactory(BuildingUpgradeListItemComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/possibleactions/BuildingUpgradeList", ["require", "exports", "src/uicomponents/possibleactions/BuildingUpgradeListItem", "src/Building"], function (require, exports, BuildingUpgradeListItem_1, Building_2) {
    "use strict";
    var BuildingUpgradeListComponent = (function (_super) {
        __extends(BuildingUpgradeListComponent, _super);
        function BuildingUpgradeListComponent(props) {
            _super.call(this, props);
            this.displayName = "BuildingUpgradeList";
            this.bindMethods();
        }
        BuildingUpgradeListComponent.prototype.bindMethods = function () {
            this.hasAvailableUpgrades = this.hasAvailableUpgrades.bind(this);
            this.upgradeBuilding = this.upgradeBuilding.bind(this);
        };
        BuildingUpgradeListComponent.prototype.hasAvailableUpgrades = function () {
            var possibleUpgrades = this.props.star.getBuildingUpgrades();
            return Object.keys(possibleUpgrades).length > 0;
        };
        BuildingUpgradeListComponent.prototype.upgradeBuilding = function (upgradeData) {
            var star = upgradeData.parentBuilding.location;
            var newBuilding = new Building_2.default({
                template: upgradeData.template,
                location: star,
                controller: upgradeData.parentBuilding.controller,
                upgradeLevel: upgradeData.level,
                totalCost: upgradeData.parentBuilding.totalCost + upgradeData.cost
            });
            star.removeBuilding(upgradeData.parentBuilding);
            star.addBuilding(newBuilding);
            upgradeData.parentBuilding.controller.money -= upgradeData.cost;
            if (!this.hasAvailableUpgrades()) {
                this.props.clearExpandedAction();
            }
            else {
                this.forceUpdate();
            }
        };
        BuildingUpgradeListComponent.prototype.render = function () {
            if (!this.hasAvailableUpgrades())
                return null;
            var upgradeGroups = [];
            var possibleUpgrades = this.props.star.getBuildingUpgrades();
            var sortedParentBuildings = Object.keys(possibleUpgrades).sort(function (aId, bId) {
                var a = possibleUpgrades[aId][0].parentBuilding.template.displayName;
                var b = possibleUpgrades[bId][0].parentBuilding.template.displayName;
                if (a < b)
                    return -1;
                else if (a > b)
                    return 1;
                else
                    return 0;
            });
            for (var i = 0; i < sortedParentBuildings.length; i++) {
                var parentBuildingId = sortedParentBuildings[i];
                var upgrades = possibleUpgrades[parentBuildingId];
                var parentBuilding = upgrades[0].parentBuilding;
                var upgradeElements = [];
                for (var j = 0; j < upgrades.length; j++) {
                    if (j > 0) {
                        upgradeElements.push(React.DOM.tr({
                            className: "list-spacer",
                            key: "spacer" + i + j
                        }, React.DOM.td({
                            colSpan: 20
                        }, null)));
                    }
                    ;
                    upgradeElements.push(BuildingUpgradeListItem_1.default({
                        key: upgrades[j].template.type,
                        player: this.props.player,
                        handleUpgrade: this.upgradeBuilding,
                        upgradeData: upgrades[j]
                    }));
                }
                var parentElement = React.DOM.div({
                    key: "" + parentBuilding.id,
                    className: "building-upgrade-group"
                }, React.DOM.div({
                    className: "building-upgrade-group-header"
                }, parentBuilding.template.displayName), React.DOM.table({
                    className: "buildable-item-list"
                }, React.DOM.tbody({}, upgradeElements)));
                upgradeGroups.push(parentElement);
            }
            return (React.DOM.ul({
                className: "building-upgrade-list"
            }, upgradeGroups));
        };
        return BuildingUpgradeListComponent;
    }(React.Component));
    exports.BuildingUpgradeListComponent = BuildingUpgradeListComponent;
    var Factory = React.createFactory(BuildingUpgradeListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/possibleactions/BuildableBuilding", ["require", "exports", "src/uicomponents/mixins/UpdateWhenMoneyChanges", "src/uicomponents/mixins/applyMixins"], function (require, exports, UpdateWhenMoneyChanges_3, applyMixins_15) {
    "use strict";
    var BuildableBuildingComponent = (function (_super) {
        __extends(BuildableBuildingComponent, _super);
        function BuildableBuildingComponent(props) {
            _super.call(this, props);
            this.displayName = "BuildableBuilding";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
            applyMixins_15.default(this, new UpdateWhenMoneyChanges_3.default(this, this.overrideHandleMoneyChange));
        }
        BuildableBuildingComponent.prototype.bindMethods = function () {
            this.overrideHandleMoneyChange = this.overrideHandleMoneyChange.bind(this);
            this.makeCell = this.makeCell.bind(this);
        };
        BuildableBuildingComponent.prototype.getInitialStateTODO = function () {
            return ({
                canAfford: this.props.player.money >= this.props.buildCost
            });
        };
        BuildableBuildingComponent.prototype.overrideHandleMoneyChange = function () {
            this.setState({
                canAfford: this.props.player.money >= this.props.buildCost
            });
        };
        BuildableBuildingComponent.prototype.makeCell = function (type) {
            var cellProps = {};
            cellProps.key = type;
            cellProps.className = "buildable-building-list-item-cell " + type;
            var cellContent;
            switch (type) {
                case ("buildCost"):
                    {
                        if (!this.state.canAfford) {
                            cellProps.className += " negative";
                        }
                    }
                default:
                    {
                        cellContent = this.props[type];
                        break;
                    }
            }
            return (React.DOM.td(cellProps, cellContent));
        };
        BuildableBuildingComponent.prototype.render = function () {
            var template = this.props.template;
            var cells = [];
            var columns = this.props.activeColumns;
            for (var i = 0; i < columns.length; i++) {
                cells.push(this.makeCell(columns[i].key));
            }
            var props = {
                className: "buildable-item buildable-building",
                onClick: this.props.handleClick,
                title: template.description
            };
            if (!this.state.canAfford) {
                props.onClick = null;
                props.disabled = true;
                props.className += " disabled";
            }
            return (React.DOM.tr(props, cells));
        };
        return BuildableBuildingComponent;
    }(React.Component));
    exports.BuildableBuildingComponent = BuildableBuildingComponent;
    var Factory = React.createFactory(BuildableBuildingComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/possibleactions/BuildableBuildingList", ["require", "exports", "src/uicomponents/unitlist/List", "src/uicomponents/possibleactions/BuildableBuilding", "src/Building"], function (require, exports, List_8, BuildableBuilding_1, Building_3) {
    "use strict";
    var BuildableBuildingListComponent = (function (_super) {
        __extends(BuildableBuildingListComponent, _super);
        function BuildableBuildingListComponent(props) {
            _super.call(this, props);
            this.displayName = "BuildableBuildingList";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        BuildableBuildingListComponent.prototype.bindMethods = function () {
            this.buildBuilding = this.buildBuilding.bind(this);
            this.updateBuildings = this.updateBuildings.bind(this);
        };
        BuildableBuildingListComponent.prototype.getInitialStateTODO = function () {
            return ({
                buildingTemplates: this.props.star.getBuildableBuildings()
            });
        };
        BuildableBuildingListComponent.prototype.updateBuildings = function () {
            var buildingTemplates = this.props.star.getBuildableBuildings();
            this.setState({
                buildingTemplates: buildingTemplates
            });
            if (buildingTemplates.length < 1) {
                this.props.clearExpandedAction();
            }
        };
        BuildableBuildingListComponent.prototype.buildBuilding = function (rowItem) {
            var template = rowItem.data.template;
            var building = new Building_3.default({
                template: template,
                location: this.props.star
            });
            if (!building.controller) {
                building.controller = this.props.player;
            }
            this.props.star.addBuilding(building);
            building.controller.money -= template.buildCost;
            this.updateBuildings();
        };
        BuildableBuildingListComponent.prototype.render = function () {
            if (this.state.buildingTemplates.length < 1)
                return null;
            var rows = [];
            for (var i = 0; i < this.state.buildingTemplates.length; i++) {
                var template = this.state.buildingTemplates[i];
                rows.push({
                    key: i,
                    data: {
                        template: template,
                        typeName: template.displayName,
                        buildCost: template.buildCost,
                        player: this.props.player,
                        rowConstructor: BuildableBuilding_1.default
                    }
                });
            }
            var columns = [
                {
                    label: "Name",
                    key: "typeName",
                    defaultOrder: "asc"
                },
                {
                    label: "Cost",
                    key: "buildCost",
                    defaultOrder: "desc"
                }
            ];
            return (React.DOM.div({ className: "buildable-item-list buildable-building-list fixed-table-parent" }, List_8.default({
                listItems: rows,
                initialColumns: columns,
                onRowChange: this.buildBuilding,
                addSpacer: true
            })));
        };
        return BuildableBuildingListComponent;
    }(React.Component));
    exports.BuildableBuildingListComponent = BuildableBuildingListComponent;
    var Factory = React.createFactory(BuildableBuildingListComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/possibleactions/PossibleActions", ["require", "exports", "src/uicomponents/possibleactions/AttackTarget", "src/uicomponents/possibleactions/BuildingUpgradeList", "src/uicomponents/possibleactions/BuildableBuildingList", "src/eventManager"], function (require, exports, AttackTarget_1, BuildingUpgradeList_1, BuildableBuildingList_1, eventManager_38) {
    "use strict";
    var PossibleActionsComponent = (function (_super) {
        __extends(PossibleActionsComponent, _super);
        function PossibleActionsComponent(props) {
            _super.call(this, props);
            this.displayName = "PossibleActions";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        PossibleActionsComponent.prototype.bindMethods = function () {
            this.buildBuildings = this.buildBuildings.bind(this);
            this.canUpgradeBuildings = this.canUpgradeBuildings.bind(this);
            this.clearExpandedAction = this.clearExpandedAction.bind(this);
            this.handlePlayerBuiltBuilding = this.handlePlayerBuiltBuilding.bind(this);
            this.updateActions = this.updateActions.bind(this);
            this.upgradeBuildings = this.upgradeBuildings.bind(this);
        };
        PossibleActionsComponent.prototype.getInitialStateTODO = function () {
            return ({
                expandedAction: null,
                expandedActionElement: null,
                canUpgradeBuildings: this.canUpgradeBuildings(this.props.selectedStar)
            });
        };
        PossibleActionsComponent.prototype.componentWillReceiveProps = function (newProps) {
            if (this.props.selectedStar !== newProps.selectedStar) {
                var newState = {};
                var afterStateSetCallback;
                newState.canUpgradeBuildings = this.canUpgradeBuildings(newProps.selectedStar);
                if (this.state.expandedActionElement) {
                    newState.expandedAction = null;
                    newState.expandedActionElement = null;
                    afterStateSetCallback = this.updateActions;
                }
                this.setState(newState, afterStateSetCallback);
            }
        };
        PossibleActionsComponent.prototype.componentDidMount = function () {
            var self = this;
            eventManager_38.default.addEventListener("clearPossibleActions", this.clearExpandedAction);
            eventManager_38.default.addEventListener("humanPlayerBuiltBuilding", this.handlePlayerBuiltBuilding);
        };
        PossibleActionsComponent.prototype.componentWillUnmount = function () {
            eventManager_38.default.removeAllListeners("clearPossibleActions");
            eventManager_38.default.removeEventListener("humanPlayerBuiltBuilding", this.handlePlayerBuiltBuilding);
        };
        PossibleActionsComponent.prototype.canUpgradeBuildings = function (star) {
            return star && Object.keys(star.getBuildingUpgrades()).length > 0;
        };
        PossibleActionsComponent.prototype.handlePlayerBuiltBuilding = function () {
            this.setState({
                canUpgradeBuildings: this.canUpgradeBuildings(this.props.selectedStar)
            });
        };
        PossibleActionsComponent.prototype.updateActions = function () {
            this.props.setExpandedActionElementOnParent(this.state.expandedActionElement);
            eventManager_38.default.dispatchEvent("possibleActionsUpdated");
        };
        PossibleActionsComponent.prototype.clearExpandedAction = function () {
            this.setState({
                expandedAction: null,
                expandedActionElement: null
            }, this.updateActions);
        };
        PossibleActionsComponent.prototype.buildBuildings = function () {
            if (!this.props.selectedStar ||
                this.state.expandedAction === "buildBuildings") {
                this.clearExpandedAction();
            }
            else {
                var element = React.DOM.div({
                    className: "expanded-action"
                }, BuildableBuildingList_1.default({
                    player: this.props.player,
                    star: this.props.selectedStar,
                    clearExpandedAction: this.clearExpandedAction
                }));
                this.setState({
                    expandedAction: "buildBuildings",
                    expandedActionElement: element
                }, this.updateActions);
            }
        };
        PossibleActionsComponent.prototype.upgradeBuildings = function () {
            if (!this.props.selectedStar ||
                this.state.expandedAction === "upgradeBuildings") {
                this.clearExpandedAction();
            }
            else {
                var element = React.DOM.div({
                    className: "expanded-action"
                }, BuildingUpgradeList_1.default({
                    player: this.props.player,
                    star: this.props.selectedStar,
                    clearExpandedAction: this.clearExpandedAction
                }));
                this.setState({
                    expandedAction: "upgradeBuildings",
                    expandedActionElement: element
                }, this.updateActions);
            }
        };
        PossibleActionsComponent.prototype.render = function () {
            var allActions = [];
            var attackTargets = this.props.attackTargets;
            if (attackTargets && attackTargets.length > 0) {
                var attackTargetComponents = [];
                for (var i = 0; i < attackTargets.length; i++) {
                    attackTargetComponents.push(AttackTarget_1.default({
                        key: i,
                        attackTarget: attackTargets[i]
                    }));
                }
                allActions.push(React.DOM.div({
                    className: "possible-action",
                    key: "attackActions"
                }, React.DOM.div({ className: "possible-action-title" }, "attack"), attackTargetComponents));
            }
            var star = this.props.selectedStar;
            if (star) {
                if (star.owner === this.props.player) {
                    if (star.getBuildableBuildings().length > 0) {
                        allActions.push(React.DOM.div({
                            className: "possible-action",
                            onClick: this.buildBuildings,
                            key: "buildActions"
                        }, "construct"));
                    }
                    if (this.state.canUpgradeBuildings) {
                        allActions.push(React.DOM.div({
                            className: "possible-action",
                            onClick: this.upgradeBuildings,
                            key: "upgradeActions"
                        }, "upgrade"));
                    }
                }
            }
            if (allActions.length < 1) {
                return null;
            }
            var possibleActions = React.DOM.div({
                className: "possible-actions"
            }, allActions);
            return (React.DOM.div({
                className: "possible-actions-wrapper"
            }, React.DOM.div({
                className: "possible-actions-container" +
                    (this.state.expandedAction ? " has-expanded-action" : "")
            }, possibleActions)));
        };
        return PossibleActionsComponent;
    }(React.Component));
    exports.PossibleActionsComponent = PossibleActionsComponent;
    var Factory = React.createFactory(PossibleActionsComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/tutorials/IntroTutorial", ["require", "exports"], function (require, exports) {
    "use strict";
    var IntroTutorial = {
        pages: [
            {
                content: [
                    "Thanks for checking out spacegame!",
                    "",
                    "This game is still heavily in development. Many things are unfinished or unimplemented, including a proper tutorial."
                ]
            },
            {
                content: [
                    "To get started, click on \"Production\" in the top menu. ",
                    "",
                    "Click on a ship type on the right of the production window to add it to your build queue. ",
                    "Units in the queue are built at the end of each turn. ",
                    "",
                    "You can end your turn by clicking the \"End turn\" button at the bottom right of the main window."
                ]
            },
            {
                content: [
                    "Built units are assigned to fleets on the map. ",
                    "",
                    "To select fleets, drag a rectangle over them on the map or click on the fleet icon. ",
                    "Selected fleets can be moved by right-clicking.",
                    "",
                    "To move the camera, drag the map while holding down middle mouse button or while holding down ctrl/cmd + right click.",
                    "Touchscreen devices aren't supported yet, sorry."
                ]
            },
            {
                content: [
                    "To start a battle, move your fleet to a star containing hostile fleets and click on \"attack\" button in the bottom left of the main window.",
                    "",
                    "In the battle setup screen, drag units from the unit list on the right into the formation on the bottom left or click the \"Auto formation\" button.",
                    "",
                    "To use abilities in battle, hover over the unit you want to target and select the ability to use."
                ]
            }
        ]
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = IntroTutorial;
    var _a;
});
define("src/uicomponents/tutorials/DontShowAgain", ["require", "exports", "src/tutorials/TutorialState", "src/tutorials/TutorialStatus"], function (require, exports, TutorialState_2, TutorialStatus_2) {
    "use strict";
    var DontShowAgainComponent = (function (_super) {
        __extends(DontShowAgainComponent, _super);
        function DontShowAgainComponent(props) {
            _super.call(this, props);
            this.displayName = "DontShowAgain";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        DontShowAgainComponent.prototype.bindMethods = function () {
            this.toggleState = this.toggleState.bind(this);
            this.getTutorialState = this.getTutorialState.bind(this);
        };
        DontShowAgainComponent.prototype.getInitialStateTODO = function () {
            return ({
                isChecked: this.getTutorialState() === TutorialState_2.default.neverShow
            });
        };
        DontShowAgainComponent.prototype.getTutorialState = function () {
            return TutorialStatus_2.default[this.props.tutorialId];
        };
        DontShowAgainComponent.prototype.toggleState = function () {
            if (this.state.isChecked) {
                TutorialStatus_2.default[this.props.tutorialId] = TutorialState_2.default.show;
            }
            else {
                TutorialStatus_2.default[this.props.tutorialId] = TutorialState_2.default.neverShow;
            }
            TutorialStatus_2.default.save();
            this.setState({
                isChecked: !this.state.isChecked
            });
        };
        DontShowAgainComponent.prototype.render = function () {
            return (React.DOM.div({
                className: "dont-show-again-wrapper"
            }, React.DOM.label(null, React.DOM.input({
                type: "checkBox",
                className: "dont-show-again",
                checked: this.state.isChecked,
                onChange: this.toggleState
            }), "Don't show again")));
        };
        return DontShowAgainComponent;
    }(React.Component));
    exports.DontShowAgainComponent = DontShowAgainComponent;
    var Factory = React.createFactory(DontShowAgainComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/tutorials/Tutorial", ["require", "exports", "src/uicomponents/tutorials/DontShowAgain", "src/utility", "src/tutorials/TutorialState", "src/tutorials/TutorialStatus", "src/utility"], function (require, exports, DontShowAgain_1, utility_38, TutorialState_3, TutorialStatus_3, utility_39) {
    "use strict";
    var TutorialComponent = (function (_super) {
        __extends(TutorialComponent, _super);
        function TutorialComponent(props) {
            _super.call(this, props);
            this.displayName = "Tutorial";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        TutorialComponent.prototype.bindMethods = function () {
            this.handleEnterPage = this.handleEnterPage.bind(this);
            this.flipPage = this.flipPage.bind(this);
            this.handleLeavePage = this.handleLeavePage.bind(this);
            this.handleClose = this.handleClose.bind(this);
        };
        TutorialComponent.prototype.getInitialStateTODO = function () {
            return ({
                currentPageIndex: 0
            });
        };
        TutorialComponent.prototype.componentDidMount = function () {
            this.handleEnterPage(this.props.pages[this.state.currentPageIndex]);
        };
        TutorialComponent.prototype.componentWillUnmount = function () {
            this.handleLeavePage(this.props.pages[this.state.currentPageIndex]);
            this.handleClose();
        };
        TutorialComponent.prototype.handleEnterPage = function (page) {
            if (page.onOpen) {
                page.onOpen();
            }
            if (page.desiredSize) {
            }
        };
        TutorialComponent.prototype.handleLeavePage = function (page) {
            if (page.onClose) {
                page.onClose();
            }
            if (page.desiredSize) {
            }
        };
        TutorialComponent.prototype.flipPage = function (amount) {
            var lastPage = this.props.pages.length - 1;
            var newPage = this.state.currentPageIndex + amount;
            newPage = utility_38.clamp(newPage, 0, lastPage);
            this.handleLeavePage(this.props.pages[this.state.currentPageIndex]);
            this.setState({
                currentPageIndex: newPage
            }, this.handleEnterPage.bind(this, this.props.pages[newPage]));
        };
        TutorialComponent.prototype.handleClose = function () {
            if (TutorialStatus_3.default[this.props.tutorialId] === TutorialState_3.default.show) {
                TutorialStatus_3.default[this.props.tutorialId] = TutorialState_3.default.dontShowThisSession;
            }
        };
        TutorialComponent.prototype.render = function () {
            var hasBackArrow = this.state.currentPageIndex > 0;
            var backElement;
            if (hasBackArrow) {
                backElement = React.DOM.div({
                    className: "tutorial-flip-page tutorial-flip-page-back",
                    onClick: this.flipPage.bind(this, -1)
                }, "<");
            }
            else {
                backElement = React.DOM.div({
                    className: "tutorial-flip-page disabled"
                });
            }
            var hasForwardArrow = this.state.currentPageIndex < this.props.pages.length - 1;
            var forwardElement;
            if (hasForwardArrow) {
                forwardElement = React.DOM.div({
                    className: "tutorial-flip-page tutorial-flip-page-forward",
                    onClick: this.flipPage.bind(this, 1)
                }, ">");
            }
            else {
                forwardElement = React.DOM.div({
                    className: "tutorial-flip-page disabled"
                });
            }
            return (React.DOM.div({
                className: "tutorial"
            }, React.DOM.div({
                className: "tutorial-inner"
            }, backElement, React.DOM.div({
                className: "tutorial-content"
            }, utility_39.splitMultilineText(this.props.pages[this.state.currentPageIndex].content)), forwardElement), DontShowAgain_1.default({
                tutorialId: this.props.tutorialId
            })));
        };
        return TutorialComponent;
    }(React.Component));
    exports.TutorialComponent = TutorialComponent;
    var Factory = React.createFactory(TutorialComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/tutorials/IntroTutorial", ["require", "exports", "src/tutorials/IntroTutorial", "src/tutorials/TutorialState", "src/tutorials/TutorialStatus", "src/uicomponents/tutorials/Tutorial", "src/uicomponents/popups/TopMenuPopup", "src/uicomponents/popups/PopupManager"], function (require, exports, IntroTutorial_1, TutorialState_4, TutorialStatus_4, Tutorial_1, TopMenuPopup_6, PopupManager_11) {
    "use strict";
    var IntroTutorialComponent = (function (_super) {
        __extends(IntroTutorialComponent, _super);
        function IntroTutorialComponent(props) {
            _super.call(this, props);
            this.displayName = "IntroTutorial";
            this.popupId = null;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        IntroTutorialComponent.prototype.bindMethods = function () {
            this.closePopup = this.closePopup.bind(this);
        };
        IntroTutorialComponent.prototype.getInitialStateTODO = function () {
            return ({
                shouldShow: TutorialStatus_4.default.introTutorial === TutorialState_4.default.show
            });
        };
        IntroTutorialComponent.prototype.componentDidMount = function () {
            if (!this.state.shouldShow) {
                return;
            }
            this.popupId = this.ref_TODO_popupManager.makePopup({
                contentConstructor: TopMenuPopup_6.default,
                contentProps: {
                    handleClose: this.closePopup,
                    contentConstructor: Tutorial_1.default,
                    contentProps: {
                        pages: IntroTutorial_1.default.pages,
                        tutorialId: "introTutorial"
                    }
                },
                popupProps: {
                    resizable: true,
                    initialPosition: {
                        width: 600,
                        height: 350
                    },
                    minWidth: 300,
                    minHeight: 250,
                    dragPositionerProps: {
                        containerDragOnly: true
                    }
                }
            });
        };
        IntroTutorialComponent.prototype.componentWillUnmount = function () {
            if (this.popupId) {
                this.closePopup();
            }
        };
        IntroTutorialComponent.prototype.closePopup = function () {
            this.ref_TODO_popupManager.closePopup(this.popupId);
            this.popupId = null;
        };
        IntroTutorialComponent.prototype.render = function () {
            var _this = this;
            if (!this.state.shouldShow) {
                return null;
            }
            return (PopupManager_11.default({
                ref: function (component) {
                    _this.ref_TODO_popupManager = component;
                },
                onlyAllowOne: true
            }));
        };
        return IntroTutorialComponent;
    }(React.Component));
    exports.IntroTutorialComponent = IntroTutorialComponent;
    var Factory = React.createFactory(IntroTutorialComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/GalaxyMapUI", ["require", "exports", "src/uicomponents/mapmodes/MapModeSettings", "src/uicomponents/galaxymap/TopBar", "src/uicomponents/notifications/Notifications", "src/uicomponents/galaxymap/StarInfo", "src/uicomponents/galaxymap/FleetSelection", "src/uicomponents/galaxymap/TopMenu", "src/uicomponents/possibleactions/PossibleActions", "src/uicomponents/tutorials/IntroTutorial", "src/eventManager"], function (require, exports, MapModeSettings_1, TopBar_1, Notifications_1, StarInfo_1, FleetSelection_1, TopMenu_1, PossibleActions_1, IntroTutorial_2, eventManager_39) {
    "use strict";
    var GalaxyMapUIComponent = (function (_super) {
        __extends(GalaxyMapUIComponent, _super);
        function GalaxyMapUIComponent(props) {
            _super.call(this, props);
            this.displayName = "GalaxyMapUI";
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        GalaxyMapUIComponent.prototype.bindMethods = function () {
            this.clampExpandedActionElement = this.clampExpandedActionElement.bind(this);
            this.setExpandedActionElement = this.setExpandedActionElement.bind(this);
            this.closeReorganization = this.closeReorganization.bind(this);
            this.endTurn = this.endTurn.bind(this);
            this.toggleMapModeSettingsExpanded = this.toggleMapModeSettingsExpanded.bind(this);
            this.updateSelection = this.updateSelection.bind(this);
            this.setPlayerTurn = this.setPlayerTurn.bind(this);
        };
        GalaxyMapUIComponent.prototype.getInitialStateTODO = function () {
            var pc = this.props.playerControl;
            return ({
                selectedFleets: pc.selectedFleets,
                inspectedFleets: pc.inspectedFleets,
                currentlyReorganizing: pc.currentlyReorganizing,
                selectedStar: pc.selectedStar,
                attackTargets: pc.currentAttackTargets,
                isPlayerTurn: !this.props.game.playerOrder[0].isAI,
                expandedActionElement: null,
                hasMapModeSettingsExpanded: false
            });
        };
        GalaxyMapUIComponent.prototype.componentWillMount = function () {
            eventManager_39.default.addEventListener("playerControlUpdated", this.updateSelection);
            eventManager_39.default.addEventListener("endTurn", this.setPlayerTurn);
        };
        GalaxyMapUIComponent.prototype.componentWillUnmount = function () {
            eventManager_39.default.removeEventListener("playerControlUpdated", this.updateSelection);
            eventManager_39.default.removeEventListener("endTurn", this.setPlayerTurn);
        };
        GalaxyMapUIComponent.prototype.componentDidUpdate = function () {
            this.clampExpandedActionElement();
        };
        GalaxyMapUIComponent.prototype.clampExpandedActionElement = function () {
            if (!this.state.expandedActionElement)
                return;
            var maxHeight = ReactDOM.findDOMNode(this.ref_TODO_leftColumnContent).getBoundingClientRect().height;
            var listElement = ReactDOM.findDOMNode(this.ref_TODO_expandedActionElementContainer).firstChild.firstChild;
            listElement.style.maxHeight = "" + (maxHeight - 10) + "px";
        };
        GalaxyMapUIComponent.prototype.endTurn = function () {
            this.props.game.endTurn();
        };
        GalaxyMapUIComponent.prototype.setPlayerTurn = function () {
            this.setState({
                isPlayerTurn: !this.props.game.activePlayer.isAI
            });
        };
        GalaxyMapUIComponent.prototype.setExpandedActionElement = function (element) {
            this.setState({
                expandedActionElement: element
            });
        };
        GalaxyMapUIComponent.prototype.toggleMapModeSettingsExpanded = function () {
            this.setState({ hasMapModeSettingsExpanded: !this.state.hasMapModeSettingsExpanded });
        };
        GalaxyMapUIComponent.prototype.updateSelection = function () {
            var pc = this.props.playerControl;
            var star = null;
            if (pc.selectedStar)
                star = pc.selectedStar;
            else if (pc.areAllFleetsInSameLocation()) {
                star = pc.selectedFleets[0].location;
            }
            ;
            this.setState({
                selectedFleets: pc.selectedFleets,
                inspectedFleets: pc.inspectedFleets,
                currentlyReorganizing: pc.currentlyReorganizing,
                selectedStar: star,
                attackTargets: pc.currentAttackTargets
            });
        };
        GalaxyMapUIComponent.prototype.closeReorganization = function () {
            eventManager_39.default.dispatchEvent("endReorganizingFleets");
            this.updateSelection();
        };
        GalaxyMapUIComponent.prototype.render = function () {
            var _this = this;
            var endTurnButtonProps = {
                className: "end-turn-button",
                onClick: this.endTurn,
                tabIndex: -1
            };
            if (!this.state.isPlayerTurn) {
                endTurnButtonProps.className += " disabled";
                endTurnButtonProps.disabled = true;
            }
            var selectionContainerClassName = "fleet-selection-container";
            if (this.state.currentlyReorganizing.length > 0) {
                selectionContainerClassName += " reorganizing";
            }
            var isInspecting = this.state.inspectedFleets.length > 0;
            var expandedActionElement = null;
            if (this.state.expandedActionElement) {
                expandedActionElement = React.DOM.div({
                    className: "galaxy-map-ui-bottom-left-column",
                    ref: function (component) {
                        _this.ref_TODO_expandedActionElementContainer = component;
                    }
                }, this.state.expandedActionElement);
            }
            return (React.DOM.div({
                className: "galaxy-map-ui"
            }, IntroTutorial_2.default(), React.DOM.div({
                className: "galaxy-map-ui-top"
            }, TopBar_1.default({
                player: this.props.player,
                game: this.props.game
            }), TopMenu_1.default({
                player: this.props.player,
                game: this.props.game,
            }), React.DOM.div({
                className: selectionContainerClassName
            }, FleetSelection_1.default({
                selectedFleets: (isInspecting ?
                    this.state.inspectedFleets : this.state.selectedFleets),
                isInspecting: isInspecting,
                selectedStar: this.state.selectedStar,
                currentlyReorganizing: this.state.currentlyReorganizing,
                closeReorganization: this.closeReorganization,
                player: this.props.player
            }))), React.DOM.div({
                className: "galaxy-map-ui-bottom-left",
                key: "bottomLeft"
            }, React.DOM.div({
                className: "galaxy-map-ui-bottom-left-column align-bottom",
                key: "bottomLeftColumn"
            }, React.DOM.div({
                className: "galaxy-map-ui-bottom-left-leftmost-column-wrapper",
                ref: function (component) {
                    _this.ref_TODO_leftColumnContent = component;
                },
                key: "leftColumnContent"
            }, PossibleActions_1.default({
                attackTargets: this.state.attackTargets,
                selectedStar: this.state.selectedStar,
                player: this.props.player,
                setExpandedActionElementOnParent: this.setExpandedActionElement,
                key: "possibleActions"
            }), StarInfo_1.default({
                selectedStar: this.state.selectedStar,
                key: "starInfo"
            }))), expandedActionElement), React.DOM.div({
                className: "galaxy-map-ui-bottom-right",
                key: "bottomRight"
            }, !this.state.hasMapModeSettingsExpanded ? null : MapModeSettings_1.default({
                mapRenderer: this.props.mapRenderer,
                key: "mapRendererLayersList"
            }), React.DOM.button({
                className: "toggle-map-mode-settings-button",
                tabIndex: -1,
                onClick: this.toggleMapModeSettingsExpanded
            }, "Map mode"), Notifications_1.default({
                log: this.props.game.notificationLog,
                currentTurn: this.props.game.turnNumber,
                key: "notifications"
            }), React.DOM.button(endTurnButtonProps, "End turn"))));
        };
        return GalaxyMapUIComponent;
    }(React.Component));
    exports.GalaxyMapUIComponent = GalaxyMapUIComponent;
    var Factory = React.createFactory(GalaxyMapUIComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/galaxymap/GalaxyMap", ["require", "exports", "src/App", "src/uicomponents/galaxymap/GalaxyMapUI", "src/options"], function (require, exports, App_35, GalaxyMapUI_1, Options_6) {
    "use strict";
    var GalaxyMapComponent = (function (_super) {
        __extends(GalaxyMapComponent, _super);
        function GalaxyMapComponent(props) {
            _super.call(this, props);
            this.displayName = "GalaxyMap";
            this.bindMethods();
        }
        GalaxyMapComponent.prototype.bindMethods = function () {
            this.changeScene = this.changeScene.bind(this);
        };
        GalaxyMapComponent.prototype.changeScene = function (e) {
            var target = e.target;
            App_35.default.reactUI.switchScene(target.value);
        };
        GalaxyMapComponent.prototype.render = function () {
            var _this = this;
            var mapModeOptions = [];
            for (var mapModeName in this.props.mapRenderer.mapModes) {
                mapModeOptions.push(React.DOM.option({
                    value: mapModeName,
                    key: mapModeName
                }, this.props.mapRenderer.mapModes[mapModeName].template.displayName));
            }
            return (React.DOM.div({
                className: "galaxy-map"
            }, React.DOM.div({
                ref: function (component) {
                    _this.ref_TODO_pixiContainer = component;
                },
                id: "pixi-container"
            }, GalaxyMapUI_1.default({
                playerControl: this.props.playerControl,
                player: this.props.player,
                game: this.props.game,
                mapRenderer: this.props.mapRenderer,
                key: "galaxyMapUI"
            })), !Options_6.default.debugMode ? null : React.DOM.div({
                className: "galaxy-map-debug debug"
            }, React.DOM.select({
                className: "reactui-selector debug",
                ref: function (component) {
                    _this.ref_TODO_sceneSelector = component;
                },
                value: App_35.default.reactUI.currentScene,
                onChange: this.changeScene
            }, React.DOM.option({ value: "galaxyMap" }, "map"), React.DOM.option({ value: "flagMaker" }, "make flags"), React.DOM.option({ value: "setupGame" }, "setup game"), React.DOM.option({ value: "battleSceneTester" }, "battle scene test")), React.DOM.button({
                className: "debug",
                onClick: function (e) {
                    var target = e.target;
                    target.blur();
                    window.setTimeout(function () {
                        var position = App_35.default.renderer.camera.container.position.clone();
                        var zoom = App_35.default.renderer.camera.currZoom;
                        App_35.default.destroy();
                        App_35.default.initUI();
                        App_35.default.game = App_35.default.makeGame();
                        App_35.default.initGame();
                        App_35.default.initDisplay();
                        App_35.default.hookUI();
                        App_35.default.reactUI.switchScene("galaxyMap");
                        App_35.default.renderer.camera.zoom(zoom);
                        App_35.default.renderer.camera.container.position = position;
                    }, 5);
                }
            }, "Reset app"))));
        };
        GalaxyMapComponent.prototype.componentDidMount = function () {
            this.props.renderer.isBattleBackground = false;
            this.props.renderer.bindRendererView(ReactDOM.findDOMNode(this.ref_TODO_pixiContainer));
            this.props.mapRenderer.setMapModeByKey("defaultMapMode");
            this.props.renderer.resume();
            this.props.mapRenderer.setAllLayersAsDirty();
            var centerLocation = this.props.renderer.camera.toCenterOn ||
                this.props.toCenterOn ||
                this.props.player.controlledLocations[0];
            this.props.renderer.camera.centerOnPosition(centerLocation);
        };
        GalaxyMapComponent.prototype.componentWillUnmount = function () {
            this.props.renderer.pause();
            this.props.renderer.removeRendererView();
        };
        return GalaxyMapComponent;
    }(React.Component));
    exports.GalaxyMapComponent = GalaxyMapComponent;
    var Factory = React.createFactory(GalaxyMapComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/FlagMaker", ["require", "exports", "src/Flag", "src/colorGeneration", "src/uicomponents/PlayerFlag"], function (require, exports, Flag_4, colorGeneration_3, PlayerFlag_8) {
    "use strict";
    var FlagMakerComponent = (function (_super) {
        __extends(FlagMakerComponent, _super);
        function FlagMakerComponent(props) {
            _super.call(this, props);
            this.setStateTimeoutHandle = undefined;
            this.sizeValue = 46;
            this.state = this.getInitialStateTODO();
            this.bindMethods();
        }
        FlagMakerComponent.prototype.bindMethods = function () {
            this.handleSizeChange = this.handleSizeChange.bind(this);
            this.makeFlags = this.makeFlags.bind(this);
        };
        FlagMakerComponent.prototype.getInitialStateTODO = function () {
            return ({
                size: 46
            });
        };
        FlagMakerComponent.prototype.handleSizeChange = function (e) {
            if (this.setStateTimeoutHandle) {
                window.clearTimeout(this.setStateTimeoutHandle);
            }
            var target = e.target;
            var value = parseInt(target.value);
            if (isFinite(value)) {
                this.sizeValue = value;
                this.setStateTimeoutHandle = window.setTimeout(this.setState.bind(this, { size: value }), 500);
            }
        };
        FlagMakerComponent.prototype.makeFlags = function () {
            this.forceUpdate();
        };
        FlagMakerComponent.prototype.render = function () {
            var _this = this;
            var flagElements = [];
            for (var i = 0; i < 100; i++) {
                var colorScheme = colorGeneration_3.generateColorScheme();
                var flag = new Flag_4.default({
                    width: this.state.size,
                    mainColor: colorScheme.main,
                    secondaryColor: colorScheme.secondary
                });
                flag.generateRandom();
                flagElements.push(PlayerFlag_8.default({
                    key: i,
                    props: {
                        width: this.state.size,
                        height: this.state.size,
                        style: {
                            width: this.state.size,
                            height: this.state.size
                        }
                    },
                    flag: flag
                }));
            }
            return (React.DOM.div(null, React.DOM.div({
                className: "flags",
                ref: function (component) {
                    _this.ref_TODO_flags = component;
                }
            }, flagElements), React.DOM.button({
                onClick: this.makeFlags
            }, "make flags"), React.DOM.input({
                onChange: this.handleSizeChange,
                defaultValue: "" + this.sizeValue,
                type: "number"
            })));
        };
        return FlagMakerComponent;
    }(React.Component));
    exports.FlagMakerComponent = FlagMakerComponent;
    var Factory = React.createFactory(FlagMakerComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/uicomponents/Stage", ["require", "exports", "src/uicomponents/battleprep/BattlePrep", "src/uicomponents/BattleSceneTester", "src/uicomponents/setupgame/SetupGame", "src/uicomponents/battle/Battle", "src/uicomponents/galaxymap/GalaxyMap", "src/uicomponents/FlagMaker"], function (require, exports, BattlePrep_2, BattleSceneTester_1, SetupGame_1, Battle_3, GalaxyMap_2, FlagMaker_1) {
    "use strict";
    var StageComponent = (function (_super) {
        __extends(StageComponent, _super);
        function StageComponent(props) {
            _super.call(this, props);
            this.displayName = "Stage";
        }
        StageComponent.prototype.render = function () {
            var elementsToRender = [];
            switch (this.props.sceneToRender) {
                case "battle":
                    {
                        elementsToRender.push(Battle_3.default({
                            battle: this.props.battle,
                            humanPlayer: this.props.player,
                            renderer: this.props.renderer,
                            key: "battle"
                        }));
                        break;
                    }
                case "battlePrep":
                    {
                        elementsToRender.push(BattlePrep_2.default({
                            battlePrep: this.props.battlePrep,
                            renderer: this.props.renderer,
                            key: "battlePrep"
                        }));
                        break;
                    }
                case "galaxyMap":
                    {
                        elementsToRender.push(GalaxyMap_2.default({
                            renderer: this.props.renderer,
                            mapRenderer: this.props.mapRenderer,
                            playerControl: this.props.playerControl,
                            player: this.props.player,
                            game: this.props.game,
                            key: "galaxyMap"
                        }));
                        break;
                    }
                case "flagMaker":
                    {
                        elementsToRender.push(FlagMaker_1.default({
                            key: "flagMaker"
                        }));
                        break;
                    }
                case "setupGame":
                    {
                        elementsToRender.push(SetupGame_1.default({
                            key: "setupGame"
                        }));
                        break;
                    }
                case "battleSceneTester":
                    {
                        elementsToRender.push(BattleSceneTester_1.default({
                            key: "battleSceneTester"
                        }));
                        break;
                    }
            }
            return (React.DOM.div({ className: "react-stage" }, elementsToRender));
        };
        return StageComponent;
    }(React.Component));
    exports.StageComponent = StageComponent;
    var Factory = React.createFactory(StageComponent);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Factory;
    var _a;
});
define("src/ReactUI", ["require", "exports", "src/eventManager", "src/uicomponents/Stage"], function (require, exports, eventManager_40, Stage_1) {
    "use strict";
    var ReactUI = (function () {
        function ReactUI(container) {
            this.container = container;
            this.addEventListeners();
        }
        ReactUI.prototype.addEventListeners = function () {
            eventManager_40.default.addEventListener("switchScene", this.switchScene.bind(this));
            eventManager_40.default.addEventListener("renderUI", this.render.bind(this));
        };
        ReactUI.prototype.switchScene = function (newScene) {
            this.currentScene = newScene;
            this.render();
        };
        ReactUI.prototype.destroy = function () {
            eventManager_40.default.removeAllListeners("switchScene");
            eventManager_40.default.removeAllListeners("renderUI");
            ReactDOM.unmountComponentAtNode(this.container);
            this.container = null;
        };
        ReactUI.prototype.render = function () {
            ReactDOM.render(Stage_1.default({
                sceneToRender: this.currentScene,
                battle: this.battle,
                battlePrep: this.battlePrep,
                renderer: this.renderer,
                mapRenderer: this.mapRenderer,
                playerControl: this.playerControl,
                player: this.player,
                game: this.game
            }), this.container);
        };
        return ReactUI;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ReactUI;
    var _a;
});
define("src/setDynamicTemplateProperties", ["require", "exports", "src/App", "src/Unit", "src/utility"], function (require, exports, App_36, Unit_6, utility_40) {
    "use strict";
    function setDynamicTemplateProperties() {
        setAbilityGuardAddition();
        setAttitudeModifierOverride();
        setUnitFamilyAssociatedTemplates();
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = setDynamicTemplateProperties;
    function setAbilityGuardAddition() {
        function checkIfAbilityAddsGuard(ability) {
            var effects = [ability.mainEffect];
            if (ability.secondaryEffects) {
                effects = effects.concat(ability.secondaryEffects);
            }
            var dummyUser = new Unit_6.default(utility_40.getRandomProperty(App_36.default.moduleData.Templates.Units));
            var dummyTarget = new Unit_6.default(utility_40.getRandomProperty(App_36.default.moduleData.Templates.Units));
            for (var i = 0; i < effects.length; i++) {
                effects[i].action.executeAction(dummyUser, dummyTarget, null, effects[i].data);
                if (dummyUser.battleStats.guardAmount) {
                    return true;
                }
            }
            return false;
        }
        for (var abilityName in App_36.default.moduleData.Templates.Abilities) {
            var ability = App_36.default.moduleData.Templates.Abilities[abilityName];
            ability.addsGuard = checkIfAbilityAddsGuard(ability);
        }
    }
    function setAttitudeModifierOverride() {
        for (var modifierType in App_36.default.moduleData.Templates.AttitudeModifiers) {
            var modifier = App_36.default.moduleData.Templates.AttitudeModifiers[modifierType];
            if (modifier.canBeOverriddenBy) {
                for (var i = 0; i < modifier.canBeOverriddenBy.length; i++) {
                    if (!modifier.canBeOverriddenBy[i].canOverride) {
                        modifier.canBeOverriddenBy[i].canOverride = [];
                    }
                    modifier.canBeOverriddenBy[i].canOverride.push(modifier);
                }
            }
        }
    }
    function setUnitFamilyAssociatedTemplates() {
        for (var unitType in App_36.default.moduleData.Templates.Units) {
            var template = App_36.default.moduleData.Templates.Units[unitType];
            for (var i = 0; i < template.families.length; i++) {
                var family = template.families[i];
                if (!family.associatedTemplates) {
                    family.associatedTemplates = [];
                }
                family.associatedTemplates.push(template);
            }
        }
    }
    var _a;
});
define("src/shaders/BlackToAlpha", ["require", "exports"], function (require, exports) {
    "use strict";
    var BlackToAlpha = (function (_super) {
        __extends(BlackToAlpha, _super);
        function BlackToAlpha(initialUniformValues) {
            var uniforms = BlackToAlpha.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        BlackToAlpha.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({});
        };
        BlackToAlpha.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return BlackToAlpha;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BlackToAlpha;
    var sourceLines = [
        "precision mediump float;",
        "",
        "varying vec2 vTextureCoord;",
        "uniform sampler2D uSampler;",
        "",
        "void main()",
        "{",
        "  vec4 color = texture2D(uSampler, vTextureCoord);",
        "  color.a = (color.r + color.g + color.b) / 3.0;",
        "",
        "  gl_FragColor = color;",
        "}",
    ];
    var _a;
});
define("modules/common/battlesfxfunctions/projectileattack", ["require", "exports", "src/utility"], function (require, exports, utility_41) {
    "use strict";
    function projectileAttack(props, params) {
        var minY = Math.max(params.height * 0.3, 30);
        var maxY = params.height - 30;
        var maxSpeed = (params.width / params.duration) * props.maxSpeed;
        var acceleration = maxSpeed * props.acceleration;
        var container = new PIXI.Container();
        if (!params.facingRight) {
            container.scale.x = -1;
            container.x = params.width;
        }
        var startTime = Date.now();
        var endTime = startTime + params.duration;
        var stopSpawningTime = startTime + params.duration / 2;
        var lastTime = startTime;
        var nextSpawnTime = startTime;
        var amountToSpawn = utility_41.randInt(props.amountToSpawn.min, props.amountToSpawn.max);
        var spawnRate = (stopSpawningTime - startTime) / amountToSpawn;
        var projectiles = [];
        var hasTriggeredEffect = false;
        function animate() {
            var currentTime = Date.now();
            var elapsedTime = currentTime - lastTime;
            lastTime = currentTime;
            if (currentTime < stopSpawningTime && currentTime >= nextSpawnTime) {
                nextSpawnTime += spawnRate;
                var texture = utility_41.getRandomArrayItem(props.projectileTextures);
                var sprite = new PIXI.Sprite(texture);
                sprite.x = 20;
                sprite.y = utility_41.randInt(minY, maxY);
                container.addChild(sprite);
                projectiles.push({
                    sprite: sprite,
                    speed: 0,
                    willImpact: (projectiles.length - 1) % props.impactRate === 0,
                    impactX: utility_41.randInt(params.width - 200, params.width - 50),
                    hasImpact: false
                });
            }
            for (var i = 0; i < projectiles.length; i++) {
                var projectile = projectiles[i];
                if (!projectile.hasImpact) {
                    if (projectile.speed < maxSpeed) {
                        projectile.speed += acceleration;
                    }
                    projectile.sprite.x += projectile.speed * elapsedTime;
                }
                if (!projectile.hasImpact && projectile.willImpact &&
                    projectile.sprite.x >= projectile.impactX) {
                    if (params.triggerEffect && !hasTriggeredEffect) {
                        hasTriggeredEffect = true;
                        params.triggerEffect();
                    }
                    projectile.hasImpact = true;
                    var impactTextures = utility_41.getRandomArrayItem(props.impactTextures);
                    var impactClip = new PIXI.extras.MovieClip(impactTextures);
                    impactClip.anchor = new PIXI.Point(0.5, 0.5);
                    impactClip.loop = false;
                    impactClip.position = projectile.sprite.position;
                    container.removeChild(projectile.sprite);
                    container.addChild(impactClip);
                    impactClip.play();
                }
            }
            if (currentTime < endTime) {
                requestAnimationFrame(animate);
            }
            else {
                params.triggerEnd();
            }
        }
        params.triggerStart(container);
        animate();
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = projectileAttack;
    var _a;
});
define("modules/common/battlesfxfunctions/rocketAttack", ["require", "exports", "modules/common/battlesfxfunctions/projectileattack"], function (require, exports, projectileAttack_1) {
    "use strict";
    function rocketAttack(params) {
        var explosionTextures = [];
        for (var i = 0; i < 26; i++) {
            var explosionTexture = PIXI.Texture.fromFrame("Explosion_Sequence_A " + (i + 1) + '.png');
            explosionTextures.push(explosionTexture);
        }
        var props = {
            projectileTextures: [PIXI.Texture.fromFrame("modules/default/img/battleEffects/rocket.png")],
            impactTextures: [explosionTextures],
            maxSpeed: 3,
            acceleration: 0.05,
            amountToSpawn: {
                min: 20,
                max: 20
            },
            impactRate: 5
        };
        return projectileAttack_1.default(props, params);
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = rocketAttack;
    var _a;
});
define("src/shaders/Guard", ["require", "exports"], function (require, exports) {
    "use strict";
    var Guard = (function (_super) {
        __extends(Guard, _super);
        function Guard(initialUniformValues) {
            var uniforms = Guard.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        Guard.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                blockAlpha: { type: "1f", value: initialValues.blockAlpha },
                blockSize: { type: "1f", value: initialValues.blockSize },
                blockWidth: { type: "1f", value: initialValues.blockWidth },
                frontier: { type: "1f", value: initialValues.frontier },
                lineAlpha: { type: "1f", value: initialValues.lineAlpha },
                seed: { type: "1f", value: initialValues.seed },
                trailDistance: { type: "1f", value: initialValues.trailDistance },
            });
        };
        Guard.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return Guard;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Guard;
    var sourceLines = [
        "precision mediump float;",
        "",
        "uniform float frontier;",
        "uniform float trailDistance;",
        "uniform float seed;",
        "uniform float blockSize;",
        "uniform float blockWidth;",
        "uniform float lineAlpha;",
        "uniform float blockAlpha;",
        "",
        "",
        "float minX = frontier - trailDistance;",
        "float maxX = frontier + 20.0;",
        "float frontGradientStart = frontier + 17.0;",
        "float blockEnd = maxX;",
        "",
        "float hash(float n)",
        "{",
        "  return fract(sin(n) * 1e4);",
        "}",
        "float hash(vec2 p)",
        "{",
        "  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));",
        "}",
        "",
        "float noise(vec2 x)",
        "{",
        "  vec2 i = floor(x);",
        "  vec2 f = fract(x);",
        "  float a = hash(i);",
        "  float b = hash(i + vec2(1.0, 0.0));",
        "  float c = hash(i + vec2(0.0, 1.0));",
        "  float d = hash(i + vec2(1.0, 1.0));",
        "  vec2 u = f * f * (3.0 - 2.0 * f);",
        "  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;",
        "}",
        "",
        "",
        "vec4 makeLines(vec2 coord)",
        "{",
        "  float gradientAlpha = smoothstep(minX, frontier, coord.x);",
        "  gradientAlpha -= smoothstep(frontGradientStart, maxX, coord.x);",
        "  gradientAlpha += 0.5 * gradientAlpha;",
        "",
        "  float n = noise(vec2(seed, coord.y));",
        "  n = pow(n, 3.5);",
        "  float alpha = n * gradientAlpha;",
        "",
        "",
        "  float r = hash(vec2(seed, coord.y));",
        "  r = clamp(r, 0.8, 0.9) * alpha;",
        "  float g = (r + 0.7 - r) * alpha;",
        "  float b = smoothstep(0.0, 0.28, alpha);",
        "",
        "  return vec4(r, g, b, alpha);",
        "}",
        "",
        "vec4 makeBlocks(vec2 coord)",
        "{",
        "  vec4 lineColor = makeLines(vec2(frontier, coord.y));",
        "  float h = hash(vec2(seed, coord.y));",
        "  float blockWidth = blockWidth * (h / 2.0 + 0.5);",
        "",
        "  float blockStart = frontier - blockWidth;",
        "  float alpha = step(0.01, mod(smoothstep(blockStart, blockEnd, coord.x), 1.0));",
        "",
        "",
        "  return lineColor * alpha;",
        "}",
        "",
        "void main()",
        "{",
        "  vec4 lineColor = makeLines(gl_FragCoord.xy);",
        "",
        "  vec4 blockColor = vec4(0.0);",
        "",
        "  for (float i = 0.0; i < 10.0; i += 1.0)",
        "  {",
        "    float y = gl_FragCoord.y + hash(i) * blockSize * 20.0;",
        "    float blockY = floor(y / blockSize);",
        "    blockColor += makeBlocks(vec2(gl_FragCoord.x, blockY)) * 0.2;",
        "  }",
        "",
        "  gl_FragColor = lineColor * lineAlpha + blockColor * blockAlpha;",
        "}",
    ];
    var _a;
});
define("modules/common/battlesfxfunctions/guard", ["require", "exports", "src/shaders/Guard", "src/utility"], function (require, exports, Guard_1, utility_42) {
    "use strict";
    function guard(props) {
        var userCanvasWidth = props.width * 0.4;
        var maxFrontier = userCanvasWidth;
        var baseTrailDistance = 80;
        var maxTrailDistance = maxFrontier;
        var trailDistanceGrowth = maxTrailDistance - baseTrailDistance;
        var maxBlockWidth = maxFrontier * 2;
        var guardFilter = new Guard_1.default({
            frontier: 0,
            trailDistance: baseTrailDistance,
            seed: Math.random() * 420,
            blockSize: 90,
            blockWidth: 0,
            lineAlpha: 1.5,
            blockAlpha: 0
        });
        var travelTime = 0.2;
        var hasTriggeredEffect = false;
        var syncUniformsFN = function (time) {
            if (time < travelTime) {
                var adjustedtime = time / travelTime;
                guardFilter.setUniformValues({
                    frontier: maxFrontier * adjustedtime
                });
            }
            else {
                if (props.triggerEffect && !hasTriggeredEffect) {
                    hasTriggeredEffect = true;
                    props.triggerEffect();
                }
                var adjustedtime = utility_42.getRelativeValue(time, travelTime - 0.02, 1);
                adjustedtime = Math.pow(adjustedtime, 4);
                var relativeDistance = utility_42.getRelativeValue(Math.abs(0.2 - adjustedtime), 0, 0.8);
                guardFilter.setUniformValues({
                    trailDistance: baseTrailDistance + trailDistanceGrowth * adjustedtime,
                    blockWidth: adjustedtime * maxBlockWidth,
                    lineAlpha: (1 - adjustedtime) * 1.5,
                    blockAlpha: 1 - relativeDistance
                });
            }
        };
        var container = new PIXI.Container();
        container.filters = [guardFilter];
        container.filterArea = new PIXI.Rectangle(0, 0, maxFrontier + 20, props.height);
        var renderTexture = new PIXI.RenderTexture(props.renderer, props.width, props.height);
        var sprite = new PIXI.Sprite(renderTexture);
        if (!props.facingRight) {
            sprite.x = props.width;
            sprite.scale.x = -1;
        }
        function animate() {
            var elapsedTime = Date.now() - startTime;
            var relativeTime = elapsedTime / props.duration;
            syncUniformsFN(relativeTime);
            renderTexture.clear();
            renderTexture.render(container);
            if (elapsedTime < props.duration) {
                requestAnimationFrame(animate);
            }
            else {
                props.triggerEnd();
            }
        }
        props.triggerStart(sprite);
        var startTime = Date.now();
        animate();
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = guard;
    var _a;
});
define("src/shaders/Beam", ["require", "exports"], function (require, exports) {
    "use strict";
    var Beam = (function (_super) {
        __extends(Beam, _super);
        function Beam(initialUniformValues) {
            var uniforms = Beam.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        Beam.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                aspectRatio: { type: "1f", value: initialValues.aspectRatio },
                beamColor: { type: "4fv", value: initialValues.beamColor },
                bulgeIntensity: { type: "1f", value: initialValues.bulgeIntensity },
                bulgeSharpness: { type: "1f", value: initialValues.bulgeSharpness },
                bulgeSize: { type: "2fv", value: initialValues.bulgeSize },
                bulgeXPosition: { type: "1f", value: initialValues.bulgeXPosition },
                lineIntensity: { type: "1f", value: initialValues.lineIntensity },
                lineXSharpness: { type: "1f", value: initialValues.lineXSharpness },
                lineXSize: { type: "2fv", value: initialValues.lineXSize },
                lineYSharpness: { type: "1f", value: initialValues.lineYSharpness },
                lineYSize: { type: "1f", value: initialValues.lineYSize },
                noiseAmplitude: { type: "1f", value: initialValues.noiseAmplitude },
                seed: { type: "1f", value: initialValues.seed },
                time: { type: "1f", value: initialValues.time },
            });
        };
        Beam.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return Beam;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Beam;
    var sourceLines = [
        "precision mediump float;",
        "",
        "#define DOMAIN 0 // 0 == pixi, 1 == shdr.bkcore.com",
        "",
        "#if DOMAIN == 0",
        "  varying vec2 vTextureCoord;",
        "  uniform sampler2D uSampler;",
        "",
        "  uniform float time;",
        "  uniform float seed;",
        "  uniform float noiseAmplitude;",
        "",
        "  uniform float aspectRatio;",
        "",
        "  uniform vec4 beamColor;",
        "",
        "  uniform float lineIntensity;",
        "  uniform float bulgeIntensity;",
        "",
        "  uniform float bulgeXPosition;",
        "  uniform vec2 bulgeSize;",
        "  uniform float bulgeSharpness;",
        "",
        "  uniform vec2 lineXSize;",
        "  uniform float lineXSharpness;",
        "",
        "  uniform float lineYSize;",
        "  uniform float lineYSharpness;",
        "",
        "",
        "#elif DOMAIN == 1",
        "  uniform vec2 resolution;",
        "  uniform float time;",
        "",
        "  const float seed = 420.69;",
        "  const float noiseAmplitude = 0.5;",
        "  float aspectRatio = resolution.x / resolution.y;",
        "",
        "  const vec4 beamColor = vec4(1.0, 0.5, 0.5, 1.0);",
        "",
        "  const float bulgeXPosition = 0.4;",
        "  const vec2 bulgeSize = vec2(0.8, 0.4);",
        "  const float bulgeSharpness = 0.4;",
        "  const float bulgeIntensity = 3.0;",
        "",
        "  const vec2 lineXSize = vec2(0.4, 1.0);",
        "  const float lineXSharpness = 0.3;",
        "",
        "  const float lineYSize = 0.02;",
        "  const float lineYSharpness = 0.8;",
        "  const float lineIntensity = 5.0;",
        "",
        "",
        "#endif",
        "",
        "float hash(vec2 p)",
        "{",
        "  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));",
        "}",
        "",
        "float noise(vec2 x)",
        "{",
        "  vec2 i = floor(x);",
        "  vec2 f = fract(x);",
        "  float a = hash(i);",
        "  float b = hash(i + vec2(1.0, 0.0));",
        "  float c = hash(i + vec2(0.0, 1.0));",
        "  float d = hash(i + vec2(1.0, 1.0));",
        "  vec2 u = f * f * (3.0 - 2.0 * f);",
        "  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;",
        "}",
        "",
        "float ellipseGradient(vec2 p, float ellipseXPosition, vec2 ellipseSize)",
        "{",
        "  vec2 q = vec2(-1.0 + 2.0 * p.x, p.y); // (-1, -1) -> (1, 1)",
        "  q.x -= -1.0 + 2.0 * ellipseXPosition;",
        "  q.x *= aspectRatio;",
        "  q /= ellipseSize;",
        "",
        "  float dist = length(q);",
        "",
        "  return dist;",
        "}",
        "",
        "void main()",
        "{",
        "  #if DOMAIN == 0",
        "    vec2 uv = vTextureCoord;",
        "    vec4 color = texture2D(uSampler, vTextureCoord);",
        "  #elif DOMAIN == 1",
        "    vec2 uv = gl_FragCoord.xy / resolution;",
        "    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);",
        "  #endif",
        "",
        "  vec2 q = vec2(uv.x, -1.0 + 2.0 * uv.y); // (0, -1) -> (1, 1)",
        "  float noiseValue = -1.0 + 2.0 * noise(vec2(q.x - time, seed));",
        "  noiseValue *= noiseAmplitude;",
        "",
        "  float yDistFromCenter = abs(q.y);",
        "  float insideLineY = step(yDistFromCenter, lineYSize);",
        "  float lineYDist = max(1.0 - distance(yDistFromCenter, lineYSize), insideLineY);",
        "  float lineYGradient = smoothstep(lineYSharpness, 1.0, lineYDist);",
        "",
        "  float insideLineX = step(lineXSize.x, q.x) * step(q.x, lineXSize.y);",
        "  float lineXDist = 1.0 - min(distance(q.x, lineXSize.x), distance(q.x, lineXSize.y));",
        "  lineXDist = max(insideLineX, lineXDist);",
        "",
        "  float lineXGradient = smoothstep(lineXSharpness, 1.0, lineXDist);",
        "",
        "  float lineGradient = (lineYGradient * lineXGradient) * lineIntensity;",
        "  lineGradient *= 1.0 + noiseValue;",
        "",
        "  float bulgeGradient = 1.0 - ellipseGradient(q, bulgeXPosition, bulgeSize);",
        "  bulgeGradient = smoothstep(0.0, 1.0 - bulgeSharpness, bulgeGradient) * bulgeIntensity;",
        "  bulgeGradient *= 1.0 + noiseValue * 0.5;",
        "",
        "  float beamGradient = lineGradient + bulgeGradient;",
        "  color += beamGradient * beamColor;",
        "",
        "  gl_FragColor = color;",
        "}",
    ];
    var _a;
});
define("src/shaders/ShinyParticle", ["require", "exports"], function (require, exports) {
    "use strict";
    var ShinyParticle = (function (_super) {
        __extends(ShinyParticle, _super);
        function ShinyParticle(initialUniformValues) {
            var uniforms = ShinyParticle.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        ShinyParticle.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                highlightIntensity: { type: "1f", value: initialValues.highlightIntensity },
                spikeColor: { type: "4fv", value: initialValues.spikeColor },
                spikeIntensity: { type: "1f", value: initialValues.spikeIntensity },
            });
        };
        ShinyParticle.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return ShinyParticle;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ShinyParticle;
    var sourceLines = [
        "precision mediump float;",
        "",
        "#define DOMAIN 0 // 0 == pixi, 1 == shdr.bkcore.com",
        "",
        "#if DOMAIN == 0",
        "  varying vec2 vTextureCoord;",
        "  uniform sampler2D uSampler;",
        "",
        "  uniform float spikeIntensity;",
        "  uniform float highlightIntensity;",
        "  uniform vec4 spikeColor;",
        "#elif DOMAIN == 1",
        "  uniform vec2 resolution;",
        "",
        "  const float spikeIntensity = 1.0;",
        "  const float highlightIntensity = 0.1;",
        "  const vec4 spikeColor = vec4(0.3686274509803922, 0.792156862745098, 0.6941176470588235, 1.0);",
        "#endif",
        "",
        "",
        "const vec4 highlightColor = vec4(1.0, 1.0, 1.0, 1.0);",
        "const vec2 center = vec2(0.5, 0.5);",
        "const float angle = -0.1 * 3.141592;",
        "",
        "float spike(vec2 q)",
        "{",
        "  vec2 rotated;",
        "  rotated.x = cos(angle) * q.x - sin(angle) * q.y;",
        "  rotated.y = sin(angle) * q.x + cos(angle) * q.y;",
        "",
        "  float xStrength = max(0.5 - abs(rotated.x), 0.0);",
        "  float yStrength = max(0.5 - abs(rotated.y), 0.0);",
        "",
        "  return xStrength + yStrength;",
        "}",
        "",
        "void main()",
        "{",
        "  #if DOMAIN == 0",
        "    vec2 uv = vTextureCoord;",
        "    vec4 color = texture2D(uSampler, uv);",
        "  #elif DOMAIN == 1",
        "    vec2 uv = gl_FragCoord.xy / resolution;",
        "    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);",
        "  #endif",
        "",
        "  vec2 q = uv - 0.5;",
        "  // q *= 2.5;",
        "",
        "  float dist = length(q);",
        "",
        "  float spikeStrength = spike(q);",
        "  spikeStrength -= dist;",
        "  spikeStrength = pow(spikeStrength, 1.5);",
        "  spikeStrength *= spikeIntensity;",
        "",
        "  color += spikeColor * spikeStrength;",
        "",
        "",
        "  // center highlight",
        "  float highlightStrength = 1.0 - dist;",
        "  highlightStrength = pow(highlightStrength, 8.0);",
        "  highlightStrength *= highlightIntensity;",
        "",
        "  color += highlightColor * highlightStrength;",
        "",
        "",
        "  gl_FragColor = color;",
        "}",
    ];
    var _a;
});
define("src/shaders/IntersectingEllipses", ["require", "exports"], function (require, exports) {
    "use strict";
    var IntersectingEllipses = (function (_super) {
        __extends(IntersectingEllipses, _super);
        function IntersectingEllipses(initialUniformValues) {
            var uniforms = IntersectingEllipses.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        IntersectingEllipses.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                intersectingEllipseCenter: { type: "2fv", value: initialValues.intersectingEllipseCenter },
                intersectingEllipseSharpness: { type: "1f", value: initialValues.intersectingEllipseSharpness },
                intersectingEllipseSize: { type: "2fv", value: initialValues.intersectingEllipseSize },
                mainAlpha: { type: "1f", value: initialValues.mainAlpha },
                mainColor: { type: "4fv", value: initialValues.mainColor },
                mainEllipseSharpness: { type: "1f", value: initialValues.mainEllipseSharpness },
                mainEllipseSize: { type: "2fv", value: initialValues.mainEllipseSize },
            });
        };
        IntersectingEllipses.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return IntersectingEllipses;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = IntersectingEllipses;
    var sourceLines = [
        "precision mediump float;",
        "",
        "#define DOMAIN 0 // 0 == pixi, 1 == shdr.bkcore.com",
        "",
        "#if DOMAIN == 0",
        "  varying vec2 vTextureCoord;",
        "  uniform sampler2D uSampler;",
        "",
        "  uniform vec4 mainColor;",
        "  uniform float mainAlpha;",
        "",
        "  uniform vec2 intersectingEllipseCenter;",
        "  uniform vec2 intersectingEllipseSize;",
        "  uniform float intersectingEllipseSharpness;",
        "",
        "  uniform vec2 mainEllipseSize;",
        "  uniform float mainEllipseSharpness;",
        "",
        "#elif DOMAIN == 1",
        "  uniform vec2 resolution;",
        "  uniform float time;",
        "",
        "  const vec4 mainColor = vec4(1.0, 1.0, 1.0, 1.0);",
        "  const float mainAlpha = 1.0;",
        "",
        "  const vec2 intersectingEllipseCenter = vec2(0.4, 0.0);",
        "  const vec2 intersectingEllipseSize = vec2(0.8, 1.0);",
        "  const float intersectingEllipseSharpness = 0.6;",
        "",
        "  const vec2 mainEllipseSize = vec2(0.5, 0.9);",
        "  const float mainEllipseSharpness = 0.8;",
        "",
        "#endif",
        "",
        "",
        "float ellipseGradient(vec2 p, vec2 ellipseCenter, vec2 ellipseSize)",
        "{",
        "  vec2 q = p - ellipseCenter;",
        "  q /= ellipseSize;",
        "",
        "  float dist = length(q);",
        "",
        "  return dist;",
        "}",
        "",
        "void main()",
        "{",
        "  #if DOMAIN == 0",
        "    vec2 uv = vTextureCoord;",
        "    vec4 color = texture2D(uSampler, vTextureCoord);",
        "  #elif DOMAIN == 1",
        "    vec2 uv = gl_FragCoord.xy / resolution;",
        "    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);",
        "  #endif",
        "",
        "  vec2 q = -1.0 + 2.0 * uv;",
        "",
        "  float mainDist = 1.0 - ellipseGradient(q, vec2(0.0, 0.0), mainEllipseSize);",
        "  float mainGradient = smoothstep(0.0, 1.0 - mainEllipseSharpness, mainDist);",
        "  color += mainColor * mainGradient;",
        "",
        "",
        "  float intersectingDist = ellipseGradient(q, intersectingEllipseCenter, intersectingEllipseSize);",
        "",
        "  float intersectingMask = step(intersectingEllipseSharpness, intersectingDist);",
        "  color *= intersectingMask;",
        "",
        "  float intersectingGradient = smoothstep(intersectingEllipseSharpness, 1.0, intersectingDist);",
        "  color *=  intersectingGradient;",
        "",
        "  gl_FragColor = color * mainAlpha;",
        "}",
    ];
    var _a;
});
define("src/shaders/LightBurst", ["require", "exports"], function (require, exports) {
    "use strict";
    var LightBurst = (function (_super) {
        __extends(LightBurst, _super);
        function LightBurst(initialUniformValues) {
            var uniforms = LightBurst.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        LightBurst.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                centerBloomStrength: { type: "1f", value: initialValues.centerBloomStrength },
                centerSize: { type: "1f", value: initialValues.centerSize },
                rayColor: { type: "4fv", value: initialValues.rayColor },
                raySharpness: { type: "1f", value: initialValues.raySharpness },
                rayStrength: { type: "1f", value: initialValues.rayStrength },
                rotation: { type: "1f", value: initialValues.rotation },
                seed: { type: "2fv", value: initialValues.seed },
            });
        };
        LightBurst.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return LightBurst;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = LightBurst;
    var sourceLines = [
        "precision mediump float;",
        "",
        "",
        "#define PI 3.14159265359",
        "#define DOMAIN 0 // 0 == pixi, 1 == shdr.bkcore.com",
        "",
        "#if DOMAIN == 0",
        "  varying vec2 vTextureCoord;",
        "  uniform sampler2D uSampler;",
        "",
        "  uniform vec2 seed;",
        "  uniform float rotation;",
        "  uniform float rayStrength;",
        "  uniform float raySharpness;",
        "  uniform vec4 rayColor;",
        "  uniform float centerSize;",
        "  uniform float centerBloomStrength;",
        "",
        "#elif DOMAIN == 1",
        "  uniform vec2 resolution;",
        "  uniform float time;",
        "",
        "  const vec2 seed = vec2(3.3492333784616219, 0.38182701375708206);",
        "  const float rotation = 0.0;",
        "  const float rayStrength = 0.9;",
        "  const float raySharpness = 2.0;",
        "  const vec4 rayColor = vec4(1.0, 0.4, 0.4, 1.0);",
        "  const float centerSize = 1.0;",
        "  const float centerBloomStrength = 5.0;",
        "#endif",
        "",
        "//--------------------------------------------------------------------",
        "",
        "// https://www.shadertoy.com/view/4dlGW2",
        "// Tileable noise, for creating useful textures. By David Hoskins, Sept. 2013.",
        "// It can be extrapolated to other types of randomised texture.",
        "",
        "// TODO license?",
        "// https://www.shadertoy.com/terms says default license is CC BY-NC-SA 3.0 which should be fine",
        "",
        "float hash(in vec2 p, in float scale)",
        "{",
        "  // This is tiling part, adjusts with the scale...",
        "  p = mod(p, scale);",
        "  return fract(sin(dot(p, seed)) * 5151.5473453);",
        "}",
        "",
        "float noise(in vec2 p, in float scale )",
        "{",
        "  vec2 f;",
        "",
        "  p *= scale;",
        "",
        "",
        "  f = fract(p);   // Separate integer from fractional",
        "    p = floor(p);",
        "",
        "    f = f*f*(3.0-2.0*f);  // Cosine interpolation approximation",
        "",
        "    float res = mix(mix(hash(p,          scale),",
        "            hash(p + vec2(1.0, 0.0), scale), f.x),",
        "          mix(hash(p + vec2(0.0, 1.0), scale),",
        "            hash(p + vec2(1.0, 1.0), scale), f.x), f.y);",
        "    return res;",
        "}",
        "",
        "float fbm(in vec2 p)",
        "{",
        "  float f = 0.0;",
        "  // Change starting scale to any integer value...",
        "  float scale = 20.0;",
        "  float amp   = 0.5;",
        "",
        "  for (int i = 0; i < 5; i++)",
        "  {",
        "    f += noise(p, scale) * amp;",
        "    amp *= .65;",
        "    // Scale must be multiplied by an integer value...",
        "    scale *= 2.0;",
        "  }",
        "  // Clamp it just in case....",
        "  return min(f, 1.0);",
        "}",
        "",
        "//--------------------------------------------------------------------",
        "",
        "float ray(vec2 q, float angleAdjust)",
        "{",
        "  float angle = (atan(q.y, q.x) + PI + angleAdjust) / (2.0 * PI);",
        "  return fbm(vec2(angle, seed.y));",
        "}",
        "",
        "void main()",
        "{",
        "  #if DOMAIN == 0",
        "    vec2 uv = vTextureCoord;",
        "    vec4 color = texture2D(uSampler, vTextureCoord);",
        "  #elif DOMAIN == 1",
        "    vec2 uv = gl_FragCoord.xy / resolution;",
        "    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);",
        "  #endif",
        "",
        "  vec2 q = uv - 0.5;",
        "  q *= 1.8;",
        "",
        "  float dist = length(q);",
        "",
        "  float centerIntensity = pow(1.0 - dist, 8.0);",
        "  centerIntensity = smoothstep(1.0 - centerSize, 1.0, centerIntensity);",
        "",
        "  float rayIntensity = ray(q, rotation);",
        "  rayIntensity = smoothstep(0.4, 1.0, rayIntensity) * rayStrength;",
        "  rayIntensity -= dist;",
        "  rayIntensity *= max(1.0, raySharpness + 1.0 - dist);",
        "  rayIntensity += centerIntensity * centerBloomStrength;",
        "  rayIntensity = max(0.0, rayIntensity);",
        "  color += rayColor * rayIntensity;",
        "",
        "  gl_FragColor = color;",
        "}",
    ];
    var _a;
});
define("modules/common/battlesfxfunctions/ProtonWrapper", ["require", "exports"], function (require, exports) {
    "use strict";
    var ProtonWrapper = (function () {
        function ProtonWrapper(renderer, container) {
            this.emitters = {};
            this.emitterKeysByID = {};
            this.onSpriteCreated = {};
            this.proton = new Proton();
            this.pixiRenderer = renderer;
            this.container = container;
            this.initProtonRenderer();
        }
        ProtonWrapper.prototype.destroy = function () {
            this.pixiRenderer = null;
            for (var key in this.emitters) {
                this.removeEmitterWithKey(key);
            }
            this.emitters = {};
            this.protonRenderer.stop();
            this.proton.destroy();
            this.proton = null;
        };
        ProtonWrapper.prototype.initProtonRenderer = function () {
            var renderer = this.protonRenderer = new Proton.Renderer("other", this.proton);
            renderer.onParticleCreated = this.onProtonParticleCreated.bind(this);
            renderer.onParticleUpdate = this.onProtonParticleUpdated.bind(this);
            renderer.onParticleDead = this.onProtonParticleDead.bind(this);
            renderer.start();
        };
        ProtonWrapper.prototype.onProtonParticleCreated = function (particle) {
            var sprite = new PIXI.Sprite(particle.target);
            sprite.anchor.x = 0.5;
            sprite.anchor.y = 0.5;
            particle.sprite = sprite;
            var emitter = particle.parent;
            var emitterKey = this.emitterKeysByID[emitter.id];
            if (this.onSpriteCreated[emitterKey]) {
                this.onSpriteCreated[emitterKey](sprite);
            }
            this.container.addChild(sprite);
        };
        ProtonWrapper.prototype.onProtonParticleUpdated = function (particle) {
            var sprite = particle.sprite;
            sprite.position.x = particle.p.x;
            sprite.position.y = particle.p.y;
            sprite.scale.x = particle.scale;
            sprite.scale.y = particle.scale;
            sprite.alpha = particle.alpha;
            sprite.rotation = particle.rotation * PIXI.DEG_TO_RAD;
        };
        ProtonWrapper.prototype.onProtonParticleDead = function (particle) {
            this.container.removeChild(particle.sprite);
        };
        ProtonWrapper.prototype.destroyEmitter = function (emitter) {
            emitter.stopEmit();
            emitter.removeAllParticles();
            emitter.destroy();
        };
        ProtonWrapper.prototype.addEmitter = function (emitter, key) {
            this.emitters[key] = emitter;
            this.emitterKeysByID[emitter.id] = key;
            this.proton.addEmitter(emitter);
        };
        ProtonWrapper.prototype.getEmitterKeyWithID = function (id) {
            return this.emitterKeysByID[id];
        };
        ProtonWrapper.prototype.getEmitterKey = function (emitter) {
            return this.getEmitterKeyWithID(emitter.id) || null;
        };
        ProtonWrapper.prototype.removeEmitterWithKey = function (key) {
            var emitter = this.emitters[key];
            this.destroyEmitter(emitter);
            this.emitterKeysByID[emitter.id] = null;
            delete this.emitterKeysByID[emitter.id];
            this.emitters[key] = null;
            delete this.emitters[key];
        };
        ProtonWrapper.prototype.removeEmitter = function (emitter) {
            this.removeEmitterWithKey(this.getEmitterKey(emitter));
        };
        ProtonWrapper.prototype.addInitializeToExistingParticles = function (emitter, initialize) {
            emitter.particles.forEach(function (particle) {
                initialize.initialize(particle);
            });
            emitter.addInitialize(initialize);
        };
        ProtonWrapper.prototype.update = function () {
            this.proton.update();
        };
        return ProtonWrapper;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ProtonWrapper;
    var _a;
});
define("modules/common/battlesfxfunctions/particleTest", ["require", "exports", "src/shaders/Beam", "src/shaders/ShinyParticle", "src/shaders/IntersectingEllipses", "src/shaders/LightBurst", "src/utility", "modules/common/battlesfxfunctions/ProtonWrapper"], function (require, exports, Beam_1, ShinyParticle_1, IntersectingEllipses_1, LightBurst_1, utility_43, ProtonWrapper_1) {
    "use strict";
    function particleTest(props) {
        var width2 = props.width / 2;
        var height2 = props.height / 2;
        var mainContainer = new PIXI.Container();
        var bg = new PIXI.Graphics();
        bg.beginFill(0x000000);
        bg.drawRect(0, 0, props.width, props.height);
        bg.endFill();
        bg.alpha = 1.0;
        var impactHasOccurred = false;
        var relativeImpactTime = 0.18;
        var beamOrigin = {
            x: 100,
            y: props.height * 0.66
        };
        var relativeBeamOrigin = {
            x: beamOrigin.x / props.width,
            y: beamOrigin.y / props.height
        };
        var renderTexture = new PIXI.RenderTexture(props.renderer, props.width, props.height);
        var renderedSprite = new PIXI.Sprite(renderTexture);
        if (!props.facingRight) {
            renderedSprite.x = props.width;
            renderedSprite.scale.x = -1;
        }
        var finalColor = [
            0.368627450980392,
            0.792156862745098,
            0.694117647058823,
            1.0
        ];
        var particleContainer = new PIXI.Container();
        mainContainer.addChild(particleContainer);
        var protonWrapper = new ProtonWrapper_1.default(props.renderer, particleContainer);
        var particleShaderColor = {
            r: 1.0,
            g: 1.0,
            b: 1.0,
            a: 1.0
        };
        var particleShaderColorArray = [
            particleShaderColor.r,
            particleShaderColor.g,
            particleShaderColor.b,
            particleShaderColor.a
        ];
        var particleShaderColorTween = new TWEEN.Tween(particleShaderColor).to({
            r: finalColor[0],
            g: finalColor[1],
            b: finalColor[2],
            a: 1.0
        }, props.duration / 2);
        var particlesAmountScale = props.width / 700;
        var beamSpriteSize = {
            x: props.width,
            y: props.height
        };
        var beamFilter = new Beam_1.default({
            seed: Math.random() * 100,
            beamColor: finalColor,
            aspectRatio: beamSpriteSize.x / beamSpriteSize.y,
            bulgeXPosition: relativeBeamOrigin.x + 0.1
        });
        var syncBeamUniforms = function (time) {
            var rampUpValue = Math.min(time / relativeImpactTime, 1.0);
            rampUpValue = Math.pow(rampUpValue, 7.0);
            var timeAfterImpact = Math.max(time - relativeImpactTime, 0.0);
            var relativeTimeAfterImpact = utility_43.getRelativeValue(timeAfterImpact, 0.0, 1.0 - relativeImpactTime);
            var rampDownValue = Math.min(Math.pow(relativeTimeAfterImpact * 1.2, 12.0), 1.0);
            var beamIntensity = rampUpValue - rampDownValue;
            beamFilter.setUniformValues({
                time: time * 100,
                noiseAmplitude: 0.4 * beamIntensity,
                lineIntensity: 2.0 + 3.0 * beamIntensity,
                bulgeIntensity: 6.0 * beamIntensity,
                bulgeSize: [
                    0.7 * Math.pow(beamIntensity, 1.5),
                    0.4 * Math.pow(beamIntensity, 1.5)
                ],
                bulgeSharpness: 0.3 + 0.35 * beamIntensity,
                lineXSize: [
                    relativeBeamOrigin.x * rampUpValue,
                    1.0
                ],
                lineXSharpness: 0.99 - beamIntensity * 0.99,
                lineYSize: 0.001 + beamIntensity * 0.03,
                lineYSharpness: 0.99 - beamIntensity * 0.15 + 0.01 * rampDownValue
            });
        };
        var beamSprite = utility_43.createDummySpriteForShader(0, beamOrigin.y - beamSpriteSize.y / 2, beamSpriteSize.x, beamSpriteSize.y);
        beamSprite.shader = beamFilter;
        beamSprite.blendMode = PIXI.BLEND_MODES.SCREEN;
        mainContainer.addChild(beamSprite);
        var smallEmitter = new Proton.BehaviourEmitter();
        smallEmitter.p.x = beamOrigin.x + 50;
        smallEmitter.p.y = beamOrigin.y;
        smallEmitter.damping = 0.013;
        var smallParticleGraphicsSize = {
            x: 4,
            y: 4
        };
        var smallParticleGraphics = new PIXI.Graphics();
        smallParticleGraphics.beginFill(0x5ECAB1, 1.0);
        smallParticleGraphics.drawRect(smallParticleGraphicsSize.x / 2, smallParticleGraphicsSize.y / 2, smallParticleGraphicsSize.x, smallParticleGraphicsSize.y);
        smallParticleGraphics.endFill();
        var smallParticleTexture = smallParticleGraphics.generateTexture(props.renderer, 1, PIXI.SCALE_MODES.DEFAULT, new PIXI.Rectangle(0, 0, smallParticleGraphicsSize.x * 1.5, smallParticleGraphicsSize.y * 1.5));
        smallEmitter.addInitialize(new Proton.ImageTarget(smallParticleTexture));
        smallEmitter.addInitialize(new Proton.Velocity(new Proton.Span(2.5, 3.5), new Proton.Span(270, 35, true), 'polar'));
        smallEmitter.addInitialize(new Proton.Position(new Proton.RectZone(0, -30, props.width + 100 - smallEmitter.p.x, 30)));
        smallEmitter.addInitialize(new Proton.Life(new Proton.Span(props.duration * (1.0 - relativeImpactTime) / 6000, props.duration * (1.0 - relativeImpactTime) / 3000)));
        smallEmitter.addBehaviour(new Proton.Scale(new Proton.Span(0.8, 1), 0));
        smallEmitter.addBehaviour(new Proton.Alpha(1, 0));
        smallEmitter.addBehaviour(new Proton.RandomDrift(20, 30, props.duration / 2000));
        protonWrapper.addEmitter(smallEmitter, "smallParticles");
        var smallParticleFilter = new ShinyParticle_1.default();
        var syncSmallParticleUniforms = function (time) {
            var lifeLeft = 1.0 - time;
            smallParticleFilter.setUniformValues({
                spikeColor: particleShaderColorArray,
                spikeIntensity: Math.pow(lifeLeft, 1.5) * 0.4,
                highlightIntensity: Math.pow(lifeLeft, 1.5)
            });
        };
        protonWrapper.onSpriteCreated["smallParticles"] = function (sprite) {
            sprite.shader = smallParticleFilter;
            sprite.blendMode = PIXI.BLEND_MODES.SCREEN;
        };
        var shinyEmitter = new Proton.BehaviourEmitter();
        shinyEmitter.p.x = beamOrigin.x;
        shinyEmitter.p.y = beamOrigin.y;
        var shinyParticleTexture = utility_43.getDummyTextureForShader();
        shinyEmitter.addInitialize(new Proton.ImageTarget(shinyParticleTexture));
        var shinyEmitterLifeInitialize = new Proton.Life(new Proton.Span(props.duration / 3000, props.duration / 1000));
        shinyEmitter.addInitialize(shinyEmitterLifeInitialize);
        shinyEmitter.damping = 0.009;
        var emitterZone = new Proton.RectZone(0, -5, props.width + 100 - shinyEmitter.p.x, 5);
        shinyEmitter.addInitialize(new Proton.Position(emitterZone));
        shinyEmitter.addBehaviour(new Proton.Scale(new Proton.Span(60, 100), 0));
        shinyEmitter.addBehaviour(new Proton.Alpha(1, 0));
        protonWrapper.addEmitter(shinyEmitter, "shinyParticles");
        var shinyParticleFilter = new ShinyParticle_1.default();
        var syncShinyParticleUniforms = function (time) {
            var lifeLeft = 1.0 - time;
            shinyParticleFilter.setUniformValues({
                spikeColor: particleShaderColorArray,
                spikeIntensity: 1 - time * 0.1,
                highlightIntensity: Math.pow(lifeLeft, 2.0)
            });
        };
        protonWrapper.onSpriteCreated["shinyParticles"] = function (sprite) {
            sprite.shader = shinyParticleFilter;
            sprite.blendMode = PIXI.BLEND_MODES.SCREEN;
        };
        shinyEmitter.rate = new Proton.Rate(150 * particlesAmountScale, 0);
        shinyEmitter.emit("once");
        var shockWaveMainEllipseMaxSize = {
            x: 0.3,
            y: 0.9
        };
        var shockWaveIntersectingEllipseMaxSize = {
            x: 0.8,
            y: 1.0
        };
        var shockWaveFilter = new IntersectingEllipses_1.default({
            mainColor: [1, 1, 1, 1]
        });
        var syncShockWaveUniforms = function (time) {
            var burstX;
            if (time < (relativeImpactTime - 0.02)) {
                burstX = 0;
            }
            else {
                burstX = time - (relativeImpactTime - 0.02);
            }
            var shockWaveSize = TWEEN.Easing.Quintic.Out(burstX);
            shockWaveFilter.setUniformValues({
                mainEllipseSize: [
                    shockWaveMainEllipseMaxSize.x * shockWaveSize,
                    shockWaveMainEllipseMaxSize.y * shockWaveSize
                ],
                intersectingEllipseSize: [
                    shockWaveIntersectingEllipseMaxSize.x * shockWaveSize,
                    shockWaveIntersectingEllipseMaxSize.y * shockWaveSize
                ],
                intersectingEllipseCenter: [
                    0.05 + 0.3 * shockWaveSize,
                    0.0
                ],
                mainEllipseSharpness: 0.8 + 0.18 * (1.0 - shockWaveSize),
                intersectingEllipseSharpness: 0.4 + 0.4 * (1.0 - shockWaveSize),
                mainAlpha: 1.0 - shockWaveSize
            });
        };
        var shockWaveSpriteSize = {
            x: props.height * 3.0,
            y: props.height * 3.0
        };
        var shockWaveSprite = utility_43.createDummySpriteForShader(beamOrigin.x - (shockWaveSpriteSize.x / 2 * 1.04), beamOrigin.y - shockWaveSpriteSize.y / 2, shockWaveSpriteSize.x, shockWaveSpriteSize.y);
        shockWaveSprite.shader = shockWaveFilter;
        mainContainer.addChild(shockWaveSprite);
        var lightBurstFilter = new LightBurst_1.default({
            seed: [Math.random() * 69, Math.random() * 420],
            rotation: 0.0,
            raySharpness: 2.0,
            rayColor: [0.75, 0.75, 0.62, 1.0]
        });
        var syncLightBurstUniforms = function (time) {
            var rampUpValue = Math.min(time / relativeImpactTime, 1.0);
            rampUpValue = Math.pow(rampUpValue, 7.0);
            var timeAfterImpact = Math.max(time - relativeImpactTime, 0.0);
            var rampDownValue = Math.pow(timeAfterImpact * 5.0, 2.0);
            var lightBurstIntensity = Math.max(rampUpValue - rampDownValue, 0.0);
            lightBurstFilter.setUniformValues({
                centerSize: Math.pow(lightBurstIntensity, 2.0),
                centerBloomStrength: Math.pow(lightBurstIntensity, 2.0) * 5.0,
                rayStrength: Math.pow(lightBurstIntensity, 3.0)
            });
        };
        var lightBurstSize = {
            x: props.height * 1.5,
            y: props.height * 3
        };
        var lightBurstSprite = utility_43.createDummySpriteForShader(beamOrigin.x - lightBurstSize.x / 2, beamOrigin.y - lightBurstSize.y / 2, lightBurstSize.x, lightBurstSize.y);
        lightBurstSprite.shader = lightBurstFilter;
        lightBurstSprite.blendMode = PIXI.BLEND_MODES.SCREEN;
        mainContainer.addChild(lightBurstSprite);
        function animate() {
            var elapsedTime = Date.now() - startTime;
            protonWrapper.update();
            var tweenTime = window.performance.now();
            particleShaderColorTween.update(tweenTime);
            particleShaderColorArray[0] = particleShaderColor.r;
            particleShaderColorArray[1] = particleShaderColor.g;
            particleShaderColorArray[2] = particleShaderColor.b;
            particleShaderColorArray[3] = particleShaderColor.a;
            var timePassed = elapsedTime / props.duration;
            var lifeLeft = 1 - timePassed;
            var timePassedSinceImpact = utility_43.getRelativeValue(timePassed, relativeImpactTime, 1.0);
            if (timePassed >= relativeImpactTime - 0.02) {
                if (!impactHasOccurred) {
                    impactHasOccurred = true;
                    var lifeLeftInSeconds = props.duration * lifeLeft / 1000;
                    var emitterLife = lifeLeftInSeconds * 0.8;
                    var velocityInitialize = new Proton.Velocity(new Proton.Span(1.5, 3), new Proton.Span(270, 25, true), 'polar');
                    protonWrapper.addInitializeToExistingParticles(shinyEmitter, velocityInitialize);
                    shinyEmitter.removeInitialize(shinyEmitterLifeInitialize);
                    shinyEmitter.addInitialize(new Proton.Life(new Proton.Span(emitterLife / 4, emitterLife / 2.5)));
                    shinyEmitter.rate = new Proton.Rate(4 * particlesAmountScale, 0.02);
                    shinyEmitter.life = emitterLife;
                    shinyEmitter.emit();
                    smallEmitter.rate = new Proton.Rate(6 * particlesAmountScale, 0.02);
                    smallEmitter.life = emitterLife;
                    smallEmitter.emit();
                    props.triggerEffect();
                }
                syncSmallParticleUniforms(timePassed);
            }
            syncBeamUniforms(timePassed);
            syncShinyParticleUniforms(timePassed);
            syncShockWaveUniforms(timePassed);
            syncLightBurstUniforms(timePassed);
            renderTexture.clear();
            renderTexture.render(mainContainer);
            if (elapsedTime < props.duration) {
                requestAnimationFrame(animate);
            }
            else {
                smallParticleTexture.destroy(true);
                protonWrapper.destroy();
                props.triggerEnd();
            }
        }
        props.triggerStart(renderedSprite);
        var startTime = Date.now();
        particleShaderColorTween.start();
        animate();
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = particleTest;
    var _a;
});
define("modules/common/battlesfxfunctions/makeSFXFromVideo", ["require", "exports"], function (require, exports) {
    "use strict";
    function makeSFXFromVideo(videoSrc, onStartFN, props) {
        function clearBaseTextureListeners() {
            baseTexture.removeListener("loaded", onVideoLoaded);
            baseTexture.removeListener("error", onVideoError);
        }
        function onVideoLoaded() {
            clearBaseTextureListeners();
            baseTexture.autoUpdate = false;
            if (onStartFN) {
                onStartFN(sprite);
            }
            startTime = Date.now();
            props.triggerStart(sprite);
            animate();
        }
        function onVideoError() {
            clearBaseTextureListeners();
            throw new Error("Video " + videoSrc + " failed to load.");
        }
        var baseTexture = PIXI.VideoBaseTexture.fromUrl(videoSrc);
        var texture = new PIXI.Texture(baseTexture);
        var sprite = new PIXI.Sprite(texture);
        if (!props.facingRight) {
            sprite.x = props.width;
            sprite.scale.x = -1;
        }
        if (baseTexture.hasLoaded) {
            onVideoLoaded();
        }
        else if (baseTexture.isLoading) {
            baseTexture.on("loaded", onVideoLoaded);
            baseTexture.on("error", onVideoError);
        }
        else {
            onVideoError();
        }
        var startTime;
        function animate() {
            var elapsedTime = Date.now() - startTime;
            baseTexture.update();
            if (elapsedTime < props.duration && !baseTexture.source.paused) {
                requestAnimationFrame(animate);
            }
            else {
                props.triggerEnd();
                sprite.destroy(true, true);
            }
        }
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = makeSFXFromVideo;
    var _a;
});
define("modules/common/battlesfxtemplates/battleSFX", ["require", "exports", "src/shaders/BlackToAlpha", "modules/common/battlesfxfunctions/rocketAttack", "modules/common/battlesfxfunctions/guard", "modules/common/battlesfxfunctions/particleTest", "modules/common/battlesfxfunctions/makeSFXFromVideo"], function (require, exports, BlackToAlpha_1, rocketAttack_1, guard_1, particleTest_1, makeSFXFromVideo_1) {
    "use strict";
    exports.rocketAttack = {
        duration: 1500,
        battleOverlay: rocketAttack_1.default,
        SFXWillTriggerEffect: true
    };
    exports.guard = {
        duration: 1000,
        battleOverlay: guard_1.default,
        SFXWillTriggerEffect: true
    };
    exports.particleTest = {
        duration: 3500,
        battleOverlay: particleTest_1.default,
        SFXWillTriggerEffect: true
    };
    exports.videoTest = {
        duration: 1000,
        battleOverlay: makeSFXFromVideo_1.default.bind(null, "img/bushiAttack.webm", function (sprite) {
            sprite.blendMode = PIXI.BLEND_MODES.SCREEN;
            sprite.shader = new BlackToAlpha_1.default();
        }),
        SFXWillTriggerEffect: false
    };
    var _a;
});
define("modules/common/statuseffecttemplates/poisoned", ["require", "exports", "modules/common/effectactiontemplates/effectActions"], function (require, exports, effectActions_1) {
    "use strict";
    var poisoned = {
        type: "poisoned",
        displayName: "Poisoned",
        attributes: {
            attack: {
                flat: 9
            },
            defence: {
                flat: 9
            },
            speed: {
                flat: 9
            }
        },
        afterAbilityUse: [
            {
                action: effectActions_1.healSelf,
                data: {
                    maxHealthPercentage: -0.1
                },
                sfx: {
                    duration: 1200,
                    userOverlay: function (props) {
                        var canvas = document.createElement("canvas");
                        canvas.width = props.width;
                        canvas.height = props.height;
                        var ctx = canvas.getContext("2d");
                        ctx.fillStyle = "rgba(30, 150, 30, 0.5)";
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        return canvas;
                    }
                }
            }
        ]
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = poisoned;
    var _a;
});
define("modules/common/effectactiontemplates/effectActions", ["require", "exports", "modules/common/statuseffecttemplates/poisoned", "src/StatusEffect", "src/targeting"], function (require, exports, poisoned_1, StatusEffect_1, targeting_2) {
    "use strict";
    exports.singleTargetDamage = {
        name: "singleTargetDamage",
        targetFormations: targeting_2.TargetFormation.enemy,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetAll,
        executeAction: function (user, target, battle, data) {
            var baseDamage = data.baseDamage;
            var damageType = data.damageType;
            var damageIncrease = user.getAttackDamageIncrease(damageType);
            var damage = baseDamage * damageIncrease;
            target.receiveDamage(damage, damageType);
        }
    };
    exports.closeAttack = {
        name: "closeAttack",
        targetFormations: targeting_2.TargetFormation.enemy,
        battleAreaFunction: targeting_2.areaRowNeighbors,
        targetRangeFunction: targeting_2.targetNextRow,
        executeAction: function (user, target, battle) {
            var baseDamage = 0.66;
            var damageType = 0;
            var damageIncrease = user.getAttackDamageIncrease(damageType);
            var damage = baseDamage * damageIncrease;
            target.receiveDamage(damage, damageType);
        }
    };
    exports.wholeRowAttack = {
        name: "wholeRowAttack",
        targetFormations: targeting_2.TargetFormation.either,
        battleAreaFunction: targeting_2.areaColumn,
        targetRangeFunction: targeting_2.targetAll,
        executeAction: function (user, target, battle) {
            var baseDamage = 0.75;
            var damageType = 1;
            var damageIncrease = user.getAttackDamageIncrease(damageType);
            var damage = baseDamage * damageIncrease;
            target.receiveDamage(damage, damageType);
        }
    };
    exports.bombAttack = {
        name: "bombAttack",
        targetFormations: targeting_2.TargetFormation.enemy,
        battleAreaFunction: targeting_2.areaNeighbors,
        targetRangeFunction: targeting_2.targetAll,
        executeAction: function (user, target, battle) {
            var baseDamage = 0.5;
            var damageType = 0;
            var damageIncrease = user.getAttackDamageIncrease(damageType);
            var damage = baseDamage * damageIncrease;
            target.receiveDamage(damage, damageType);
        }
    };
    exports.guardRow = {
        name: "guardRow",
        targetFormations: targeting_2.TargetFormation.either,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetSelf,
        executeAction: function (user, target, battle, data) {
            var guardPerInt = data.perInt || 0;
            var flat = data.flat || 0;
            var guardAmount = guardPerInt * user.attributes.intelligence + flat;
            user.addGuard(guardAmount, 0);
        }
    };
    exports.receiveCounterAttack = {
        name: "receiveCounterAttack",
        targetFormations: targeting_2.TargetFormation.either,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetSelf,
        executeAction: function (user, target, battle, data) {
            var counterStrength = target.getCounterAttackStrength();
            if (counterStrength) {
                exports.singleTargetDamage.executeAction(target, user, battle, {
                    baseDamage: data.baseDamage * counterStrength,
                    damageType: 0
                });
            }
        }
    };
    exports.increaseCaptureChance = {
        name: "increaseCaptureChance",
        targetFormations: targeting_2.TargetFormation.enemy,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetAll,
        executeAction: function (user, target, battle, data) {
            if (!data)
                return;
            if (data.flat) {
                target.battleStats.captureChance += data.flat;
            }
            if (isFinite(data.multiplier)) {
                target.battleStats.captureChance *= data.multiplier;
            }
        }
    };
    exports.buffTest = {
        name: "buffTest",
        targetFormations: targeting_2.TargetFormation.either,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetAll,
        executeAction: function (user, target, battle) {
            target.addStatusEffect(new StatusEffect_1.default(poisoned_1.default, 2));
        }
    };
    exports.healTarget = {
        name: "healTarget",
        targetFormations: targeting_2.TargetFormation.ally,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetAll,
        executeAction: function (user, target, battle, data) {
            var healAmount = 0;
            if (data.flat) {
                healAmount += data.flat;
            }
            if (data.maxHealthPercentage) {
                healAmount += target.maxHealth * data.maxHealthPercentage;
            }
            if (data.perUserUnit) {
                healAmount += data.perUserUnit * user.getAttackDamageIncrease(1);
            }
            target.removeStrength(-healAmount);
        }
    };
    exports.healSelf = {
        name: "healSelf",
        targetFormations: targeting_2.TargetFormation.ally,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetSelf,
        executeAction: function (user, target, battle, data) {
            exports.healTarget.executeAction(user, user, battle, data);
        }
    };
    exports.standBy = {
        name: "standBy",
        targetFormations: targeting_2.TargetFormation.either,
        battleAreaFunction: targeting_2.areaSingle,
        targetRangeFunction: targeting_2.targetSelf,
        executeAction: function () { }
    };
    var _a;
});
define("modules/common/abilitytemplates/abilities", ["require", "exports", "modules/common/battlesfxtemplates/battleSFX", "modules/common/effectactiontemplates/effectActions"], function (require, exports, BattleSFX, EffectActions) {
    "use strict";
    exports.rangedAttack = {
        type: "rangedAttack",
        displayName: "Ranged Attack",
        description: "Standard ranged attack",
        moveDelay: 100,
        actionsUse: 1,
        mainEffect: {
            action: EffectActions.singleTargetDamage,
            sfx: BattleSFX.rocketAttack,
            data: {
                baseDamage: 1,
                damageType: 0
            },
            attachedEffects: [
                {
                    action: EffectActions.receiveCounterAttack,
                    data: {
                        baseDamage: 0.5
                    }
                }
            ]
        },
        canUpgradeInto: ["bombAttack", "boardingHook", "ranceAttack"]
    };
    exports.closeAttack = {
        type: "closeAttack",
        displayName: "Close Attack",
        description: "Close range attack that hits adjacent targets in same row as well",
        moveDelay: 90,
        actionsUse: 2,
        mainEffect: {
            action: EffectActions.closeAttack,
            sfx: BattleSFX.rocketAttack
        }
    };
    exports.wholeRowAttack = {
        type: "wholeRowAttack",
        displayName: "Row Attack",
        description: "Attack entire row of units",
        moveDelay: 300,
        actionsUse: 1,
        bypassesGuard: true,
        mainEffect: {
            action: EffectActions.wholeRowAttack,
            sfx: BattleSFX.particleTest
        }
    };
    exports.bombAttack = {
        type: "bombAttack",
        displayName: "Bomb Attack",
        description: "Ranged attack that hits all adjacent enemy units",
        moveDelay: 120,
        actionsUse: 1,
        mainEffect: {
            action: EffectActions.bombAttack,
            sfx: BattleSFX.rocketAttack
        }
    };
    exports.guardRow = {
        type: "guardRow",
        displayName: "Guard Row",
        description: "Protect allies in the same row and boost defence up to 2x",
        moveDelay: 100,
        actionsUse: 1,
        mainEffect: {
            action: EffectActions.guardRow,
            sfx: BattleSFX.guard,
            data: {
                perInt: 20
            }
        }
    };
    exports.guardColumn = exports.guardRow;
    exports.boardingHook = {
        type: "boardingHook",
        displayName: "Boarding Hook",
        description: "0.8x damage but increases target capture chance",
        moveDelay: 100,
        actionsUse: 1,
        mainEffect: {
            action: EffectActions.singleTargetDamage,
            sfx: BattleSFX.rocketAttack,
            data: {
                baseDamage: 0.8,
                damageType: 0
            },
            attachedEffects: [
                {
                    action: EffectActions.increaseCaptureChance,
                    data: {
                        flat: 0.5
                    }
                },
                {
                    action: EffectActions.receiveCounterAttack,
                    data: {
                        baseDamage: 0.5
                    }
                }
            ]
        }
    };
    exports.debugAbility = {
        type: "debugAbility",
        displayName: "Debug Ability",
        description: "who knows what its going to do today",
        moveDelay: 0,
        actionsUse: 1,
        mainEffect: {
            action: EffectActions.buffTest,
            sfx: BattleSFX.guard,
            data: {}
        }
    };
    exports.standBy = {
        type: "standBy",
        displayName: "Standby",
        description: "Skip a turn but next one comes faster",
        moveDelay: 50,
        actionsUse: 1,
        AIEvaluationPriority: 0.6,
        AIScoreAdjust: -0.1,
        disableInAIBattles: true,
        mainEffect: {
            action: EffectActions.standBy,
            sfx: {
                duration: 750
            }
        }
    };
    var _a;
});
define("modules/common/resourcetemplates/resources", ["require", "exports"], function (require, exports) {
    "use strict";
    exports.testResource1 = {
        type: "testResource1",
        displayName: "Test Resource 1",
        icon: "modules/common/resourcetemplates/img/test1.png",
        rarity: 1,
        distributionGroups: ["common"]
    };
    exports.testResource2 = {
        type: "testResource2",
        displayName: "Test Resource 2",
        icon: "modules/common/resourcetemplates/img/test2.png",
        rarity: 1,
        distributionGroups: ["common"]
    };
    exports.testResource3 = {
        type: "testResource3",
        displayName: "Test Resource 3",
        icon: "modules/common/resourcetemplates/img/test3.png",
        rarity: 1,
        distributionGroups: ["common"]
    };
    exports.testResource4 = {
        type: "testResource4",
        displayName: "Test Resource 4",
        icon: "modules/common/resourcetemplates/img/test4.png",
        rarity: 1,
        distributionGroups: ["rare"]
    };
    exports.testResource5 = {
        type: "testResource5",
        displayName: "Test Resource 5",
        icon: "modules/common/resourcetemplates/img/test5.png",
        rarity: 1,
        distributionGroups: ["rare"]
    };
    var _a;
});
define("modules/common/passiveskilltemplates/passiveSkills", ["require", "exports", "modules/common/effectactiontemplates/effectActions"], function (require, exports, EffectActions) {
    "use strict";
    exports.autoHeal = {
        type: "autoHeal",
        displayName: "Auto heal",
        description: "Heal 50 health after every turn",
        atBattleStart: [
            {
                action: EffectActions.healSelf,
                data: {
                    flat: 50
                },
                sfx: {
                    duration: 1200
                },
                trigger: function (user, target) {
                    return user.currentHealth < user.maxHealth;
                }
            }
        ]
    };
    exports.poisoned = {
        type: "poisoned",
        displayName: "Poisoned",
        description: "-10% max health per turn",
        atBattleStart: [
            {
                action: EffectActions.healSelf,
                data: {
                    maxHealthPercentage: -0.1
                },
                sfx: {
                    duration: 1200,
                    userOverlay: function (props) {
                        var canvas = document.createElement("canvas");
                        canvas.width = props.width;
                        canvas.height = props.height;
                        var ctx = canvas.getContext("2d");
                        ctx.fillStyle = "rgba(30, 150, 30, 0.5)";
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        return canvas;
                    }
                }
            }
        ]
    };
    exports.overdrive = {
        type: "overdrive",
        displayName: "Overdrive",
        description: "Gives buffs at battle start but become poisoned",
        atBattleStart: [
            {
                action: EffectActions.buffTest
            }
        ]
    };
    exports.initialGuard = {
        type: "initialGuard",
        displayName: "Initial Guard",
        description: "Adds initial guard",
        isHidden: true,
        atBattleStart: [
            {
                action: EffectActions.guardRow,
                data: { perInt: 0, flat: 50 }
            }
        ],
        inBattlePrep: [
            function (user, battlePrep) {
                EffectActions.guardRow.executeAction(user, user, null, { perInt: 0, flat: 50 });
            }
        ]
    };
    exports.warpJammer = {
        type: "warpJammer",
        displayName: "Warp Jammer",
        description: "Forces an extra unit to defend in neutral territory",
        inBattlePrep: [
            function (user, battlePrep) {
                if (user.fleet.player === battlePrep.attacker) {
                    battlePrep.minDefendersInNeutralTerritory += 1;
                }
            }
        ],
        canUpgradeInto: ["medic"]
    };
    exports.medic = {
        type: "medic",
        displayName: "Medic",
        description: "Heals all units in same star to full at turn start",
        atTurnStart: [
            function (user) {
                var star = user.fleet.location;
                var allFriendlyUnits = star.getAllUnitsOfPlayer(user.fleet.player);
                for (var i = 0; i < allFriendlyUnits.length; i++) {
                    allFriendlyUnits[i].addStrength(allFriendlyUnits[i].maxHealth);
                }
            }
        ]
    };
    var _a;
});
define("modules/common/copyCommonTemplates", ["require", "exports", "modules/common/abilitytemplates/abilities", "modules/common/resourcetemplates/resources", "modules/common/effectactiontemplates/effectActions", "modules/common/statuseffecttemplates/poisoned", "modules/common/battlesfxtemplates/battleSFX", "modules/common/passiveskilltemplates/passiveSkills"], function (require, exports, AbilityTemplates, ResourceTemplates, EffectActionTemplates, poisoned_2, BattleSFXTemplates, PassiveSkillTemplates) {
    "use strict";
    function copyCommonTemplates(moduleData) {
        moduleData.copyTemplates(AbilityTemplates, "Abilities");
        moduleData.copyTemplates(ResourceTemplates, "Resources");
        moduleData.copyTemplates(EffectActionTemplates, "EffectActions");
        moduleData.copyTemplates(BattleSFXTemplates, "BattleSFX");
        moduleData.copyTemplates(PassiveSkillTemplates, "PassiveSkills");
        moduleData.copyTemplates((_a = {}, _a[poisoned_2.default.type] = poisoned_2.default, _a), "StatusEffects");
        var _a;
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = copyCommonTemplates;
    var _a;
});
define("modules/defaultemblems/SubEmblemTemplates", ["require", "exports"], function (require, exports) {
    "use strict";
    var Aguila_explayada_2 = {
        key: "Aguila_explayada_2",
        src: "modules/defaultemblems/img/Aguila_explayada_2.svg",
        coverage: [2],
        position: [2]
    };
    var Berliner_Baer = {
        key: "Berliner_Baer",
        src: "modules/defaultemblems/img/Berliner_Baer.svg",
        coverage: [2],
        position: [2]
    };
    var Cles_en_sautoir = {
        key: "Cles_en_sautoir",
        src: "modules/defaultemblems/img/Cles_en_sautoir.svg",
        coverage: [2],
        position: [2]
    };
    var Coa_Illustration_Cross_Bowen_3 = {
        key: "Coa_Illustration_Cross_Bowen_3",
        src: "modules/defaultemblems/img/Coa_Illustration_Cross_Bowen_3.svg",
        coverage: [2],
        position: [2]
    };
    var Coa_Illustration_Cross_Malte_1 = {
        key: "Coa_Illustration_Cross_Malte_1",
        src: "modules/defaultemblems/img/Coa_Illustration_Cross_Malte_1.svg",
        coverage: [2],
        position: [2]
    };
    var Coa_Illustration_Elements_Planet_Moon = {
        key: "Coa_Illustration_Elements_Planet_Moon",
        src: "modules/defaultemblems/img/Coa_Illustration_Elements_Planet_Moon.svg",
        coverage: [2],
        position: [2]
    };
    var Couronne_heraldique_svg = {
        key: "Couronne_heraldique_svg",
        src: "modules/defaultemblems/img/Couronne_heraldique_svg.svg",
        coverage: [2],
        position: [2]
    };
    var Gomaisasa = {
        key: "Gomaisasa",
        src: "modules/defaultemblems/img/Gomaisasa.svg",
        coverage: [2],
        position: [2]
    };
    var Gryphon_Segreant = {
        key: "Gryphon_Segreant",
        src: "modules/defaultemblems/img/Gryphon_Segreant.svg",
        coverage: [2],
        position: [2]
    };
    var Heraldic_pentacle = {
        key: "Heraldic_pentacle",
        src: "modules/defaultemblems/img/Heraldic_pentacle.svg",
        coverage: [2],
        position: [2]
    };
    var Japanese_Crest_Futatsudomoe_1 = {
        key: "Japanese_Crest_Futatsudomoe_1",
        src: "modules/defaultemblems/img/Japanese_Crest_Futatsudomoe_1.svg",
        coverage: [2],
        position: [2]
    };
    var Japanese_Crest_Hana_Hisi = {
        key: "Japanese_Crest_Hana_Hisi",
        src: "modules/defaultemblems/img/Japanese_Crest_Hana_Hisi.svg",
        coverage: [2],
        position: [2]
    };
    var Japanese_Crest_Mitsumori_Janome = {
        key: "Japanese_Crest_Mitsumori_Janome",
        src: "modules/defaultemblems/img/Japanese_Crest_Mitsumori_Janome.svg",
        coverage: [2],
        position: [2]
    };
    var Japanese_Crest_Oda_ka = {
        key: "Japanese_Crest_Oda_ka",
        src: "modules/defaultemblems/img/Japanese_Crest_Oda_ka.svg",
        coverage: [2],
        position: [2]
    };
    var Japanese_crest_Tsuki_ni_Hoshi = {
        key: "Japanese_crest_Tsuki_ni_Hoshi",
        src: "modules/defaultemblems/img/Japanese_crest_Tsuki_ni_Hoshi.svg",
        coverage: [2],
        position: [2]
    };
    var Japanese_Crest_Ume = {
        key: "Japanese_Crest_Ume",
        src: "modules/defaultemblems/img/Japanese_Crest_Ume.svg",
        coverage: [2],
        position: [2]
    };
    var Mitsuuroko = {
        key: "Mitsuuroko",
        src: "modules/defaultemblems/img/Mitsuuroko.svg",
        coverage: [2],
        position: [2]
    };
    var Musubikashiwa = {
        key: "Musubikashiwa",
        src: "modules/defaultemblems/img/Musubi-kashiwa.svg",
        coverage: [2],
        position: [2]
    };
    var Takeda_mon = {
        key: "Takeda_mon",
        src: "modules/defaultemblems/img/Takeda_mon.svg",
        coverage: [2],
        position: [2]
    };
    var threeHorns = {
        key: "threeHorns",
        src: "modules/defaultemblems/img/threeHorns.svg",
        coverage: [2],
        position: [2]
    };
    var Flag_of_Edward_England = {
        key: "Flag_of_Edward_England",
        src: "modules/defaultemblems/img/Flag_of_Edward_England.svg",
        coverage: [2],
        position: [2],
        disallowRandomGeneration: true
    };
    var SubEmblemTemplates = (_b = {},
        _b[Aguila_explayada_2.key] = Aguila_explayada_2,
        _b[Berliner_Baer.key] = Berliner_Baer,
        _b[Cles_en_sautoir.key] = Cles_en_sautoir,
        _b[Coa_Illustration_Cross_Bowen_3.key] = Coa_Illustration_Cross_Bowen_3,
        _b[Coa_Illustration_Cross_Malte_1.key] = Coa_Illustration_Cross_Malte_1,
        _b[Coa_Illustration_Elements_Planet_Moon.key] = Coa_Illustration_Elements_Planet_Moon,
        _b[Couronne_heraldique_svg.key] = Couronne_heraldique_svg,
        _b[Gomaisasa.key] = Gomaisasa,
        _b[Gryphon_Segreant.key] = Gryphon_Segreant,
        _b[Heraldic_pentacle.key] = Heraldic_pentacle,
        _b[Japanese_Crest_Futatsudomoe_1.key] = Japanese_Crest_Futatsudomoe_1,
        _b[Japanese_Crest_Hana_Hisi.key] = Japanese_Crest_Hana_Hisi,
        _b[Japanese_Crest_Mitsumori_Janome.key] = Japanese_Crest_Mitsumori_Janome,
        _b[Japanese_Crest_Oda_ka.key] = Japanese_Crest_Oda_ka,
        _b[Japanese_crest_Tsuki_ni_Hoshi.key] = Japanese_crest_Tsuki_ni_Hoshi,
        _b[Japanese_Crest_Ume.key] = Japanese_Crest_Ume,
        _b[Mitsuuroko.key] = Mitsuuroko,
        _b[Musubikashiwa.key] = Musubikashiwa,
        _b[Takeda_mon.key] = Takeda_mon,
        _b[threeHorns.key] = threeHorns,
        _b[Flag_of_Edward_England.key] = Flag_of_Edward_England,
        _b
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = SubEmblemTemplates;
    var _a, _b;
});
define("modules/defaultemblems/defaultEmblems", ["require", "exports", "modules/defaultemblems/SubEmblemTemplates", "src/App"], function (require, exports, SubEmblemTemplates_1, App_37) {
    "use strict";
    var defaultEmblems = {
        key: "defaultEmblems",
        metaData: {
            name: "Default Emblems",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        loadAssets: function (onLoaded) {
            var loader = new PIXI.loaders.Loader();
            for (var templateKey in SubEmblemTemplates_1.default) {
                var template = SubEmblemTemplates_1.default[templateKey];
                loader.add({
                    url: template.src,
                    loadType: 2,
                    xhrType: "png"
                });
            }
            loader.load(function (loader) {
                for (var templateKey in SubEmblemTemplates_1.default) {
                    var template = SubEmblemTemplates_1.default[templateKey];
                    var image = loader.resources[template.src].data;
                    App_37.default.images[template.src] = image;
                    if (!image.width) {
                        document.body.appendChild(image);
                        image.width = image.offsetWidth;
                        image.height = image.offsetHeight;
                        document.body.removeChild(image);
                    }
                }
                onLoaded();
            });
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(SubEmblemTemplates_1.default, "SubEmblems");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultEmblems;
    var _a, _b;
});
define("modules/defaultruleset/defaultRuleset", ["require", "exports"], function (require, exports) {
    "use strict";
    var defaultRuleSet = {
        key: "defaultRuleSet",
        metaData: {
            name: "Default Ruleset",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        ruleSet: {
            manufactory: {
                startingCapacity: 1,
                maxCapacity: 3,
                buildCost: 1000
            },
            research: {
                baseResearchSpeed: 3000
            },
            battle: {
                rowsPerFormation: 2,
                cellsPerRow: 3,
                maxUnitsPerSide: 6,
                maxUnitsPerRow: 3,
                baseMaxCapturedUnits: 1,
                absoluteMaxCapturedUnits: 3,
                baseUnitCaptureChance: 0.1,
                humanUnitDeathChance: 0.65,
                aiUnitDeathChance: 0.65,
                independentUnitDeathChance: 1.0,
                loserUnitExtraDeathChance: 0.35
            }
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultRuleSet;
    var _a, _b;
});
define("modules/defaultai/aiUtils", ["require", "exports", "src/mapai/Objective", "src/DiplomacyState", "src/utility"], function (require, exports, Objective_1, DiplomacyState_3, utility_44) {
    "use strict";
    function moveToRoutine(front, afterMoveCallback, getMoveTargetFN) {
        var fleets = front.getAssociatedFleets();
        if (fleets.length <= 0) {
            afterMoveCallback();
            return;
        }
        var finishedMovingCount = 0;
        var finishFleetMoveFN = function () {
            finishedMovingCount++;
            if (finishedMovingCount >= fleets.length) {
                afterMoveCallback();
            }
        };
        for (var i = 0; i < fleets.length; i++) {
            var moveTarget = getMoveTargetFN ? getMoveTargetFN(fleets[i]) : front.objective.target;
            fleets[i].pathFind(moveTarget, null, finishFleetMoveFN);
        }
    }
    exports.moveToRoutine = moveToRoutine;
    function independentTargetFilter(target) {
        return target.enemy.isIndependent;
    }
    exports.independentTargetFilter = independentTargetFilter;
    function buildingControllerFilter(target) {
        return target.building && target.enemy === target.building.controller;
    }
    exports.buildingControllerFilter = buildingControllerFilter;
    function musterAndAttackRoutine(targetFilter, front, afterMoveCallback) {
        var shouldMoveToTarget;
        var unitsByLocation = front.getUnitsByLocation();
        var fleets = front.getAssociatedFleets();
        var atMuster = unitsByLocation[front.musterLocation.id] ?
            unitsByLocation[front.musterLocation.id].length : 0;
        var inRangeOfTarget = 0;
        for (var i = 0; i < fleets.length; i++) {
            var distance = fleets[i].location.getDistanceToStar(front.targetLocation);
            if (fleets[i].getMinCurrentMovePoints() >= distance) {
                inRangeOfTarget += fleets[i].units.length;
            }
        }
        if (front.hasMustered) {
            shouldMoveToTarget = true;
        }
        else {
            if (atMuster >= front.minUnitsDesired || inRangeOfTarget >= front.minUnitsDesired) {
                front.hasMustered = true;
                shouldMoveToTarget = true;
            }
            else {
                shouldMoveToTarget = false;
            }
        }
        var moveTarget = shouldMoveToTarget ? front.targetLocation : front.musterLocation;
        var finishAllMoveFN = function () {
            unitsByLocation = front.getUnitsByLocation();
            var atTarget = unitsByLocation[front.targetLocation.id] ?
                unitsByLocation[front.targetLocation.id].length : 0;
            if (atTarget >= front.minUnitsDesired) {
                var star = front.targetLocation;
                var player = front.units[0].fleet.player;
                var attackTargets = star.getTargetsForPlayer(player);
                var target = attackTargets.filter(targetFilter)[0];
                player.attackTarget(star, target, afterMoveCallback);
            }
            else {
                afterMoveCallback();
            }
        };
        var finishedMovingCount = 0;
        var finishFleetMoveFN = function () {
            finishedMovingCount++;
            if (finishedMovingCount >= fleets.length) {
                finishAllMoveFN();
            }
        };
        for (var i = 0; i < fleets.length; i++) {
            fleets[i].pathFind(moveTarget, null, finishFleetMoveFN);
        }
    }
    exports.musterAndAttackRoutine = musterAndAttackRoutine;
    function defaultUnitDesireFN(front) {
        var desire = 1;
        var unitsOverMinimum = front.units.length - front.minUnitsDesired;
        var unitsOverIdeal = front.units.length - front.idealUnitsDesired;
        var unitsUnderMinimum = front.minUnitsDesired - front.units.length;
        if (unitsOverMinimum > 0) {
            desire *= 0.85 / unitsOverMinimum;
        }
        if (unitsOverIdeal > 0) {
            desire *= 0.6 / unitsOverIdeal;
        }
        if (unitsUnderMinimum > 0) {
            var intertiaPerMissingUnit = 0.5 / front.minUnitsDesired;
            var newUnitInertia = intertiaPerMissingUnit * (unitsUnderMinimum - 1);
            desire *= 1 - newUnitInertia;
        }
        return desire;
    }
    exports.defaultUnitDesireFN = defaultUnitDesireFN;
    function defaultUnitFitFN(unit, front, lowHealthThreshhold, healthAdjust, distanceAdjust) {
        if (lowHealthThreshhold === void 0) { lowHealthThreshhold = 0.75; }
        if (healthAdjust === void 0) { healthAdjust = 1; }
        if (distanceAdjust === void 0) { distanceAdjust = 1; }
        var score = 1;
        var healthPercentage = unit.currentHealth / unit.maxHealth;
        if (healthPercentage < lowHealthThreshhold) {
            score *= healthPercentage * healthAdjust;
        }
        var turnsToReach = unit.getTurnsToReachStar(front.targetLocation);
        if (turnsToReach > 0) {
            turnsToReach *= distanceAdjust;
            var distanceMultiplier = 1 / (Math.log(turnsToReach + 2.5) / Math.log(2.5));
            score *= distanceMultiplier;
        }
        return score;
    }
    exports.defaultUnitFitFN = defaultUnitFitFN;
    function scoutingUnitDesireFN(front) {
        if (front.units.length < 1)
            return 1;
        else
            return 0;
    }
    exports.scoutingUnitDesireFN = scoutingUnitDesireFN;
    function scoutingUnitFitFN(unit, front) {
        var baseScore = 0;
        var isStealthy = unit.isStealthy();
        if (isStealthy)
            baseScore += 0.2;
        var visionRange = unit.getVisionRange();
        if (visionRange <= 0) {
            return -1;
        }
        else {
            baseScore += Math.pow(visionRange, 1.5) / 2;
        }
        var strength = unit.getStrengthEvaluation();
        baseScore -= strength / 1000;
        var cost = unit.getTotalCost();
        baseScore -= cost / 1000;
        var score = baseScore * defaultUnitFitFN(unit, front, -1, 0, 2);
        return utility_44.clamp(score, 0, 1);
    }
    exports.scoutingUnitFitFN = scoutingUnitFitFN;
    function mergeScoresByStar(merged, scores) {
        for (var i = 0; i < scores.length; i++) {
            var star = scores[i].star;
            if (!merged[star.id]) {
                merged[star.id] = scores[i];
            }
            else {
                merged[star.id].score += scores[i].score;
            }
        }
        return merged;
    }
    exports.mergeScoresByStar = mergeScoresByStar;
    function makeObjectivesFromScores(template, evaluationScores, basePriority) {
        var allObjectives = [];
        var minScore = 0;
        var maxScore;
        for (var i = 0; i < evaluationScores.length; i++) {
            var score = evaluationScores[i].score;
            maxScore = isFinite(maxScore) ? Math.max(maxScore, score) : score;
        }
        for (var i = 0; i < evaluationScores.length; i++) {
            var star = evaluationScores[i].star || null;
            var player = evaluationScores[i].player || null;
            if (score < 0.04)
                continue;
            var relativeScore = utility_44.getRelativeValue(evaluationScores[i].score, minScore, maxScore);
            var priority = relativeScore * basePriority;
            allObjectives.push(new Objective_1.default(template, priority, star, player));
        }
        return allObjectives;
    }
    exports.makeObjectivesFromScores = makeObjectivesFromScores;
    function perimeterObjectiveCreation(template, isForScouting, basePriority, grandStrategyAI, mapEvaluator, objectivesAI) {
        var playersToEstablishPerimeterAgainst = [];
        var diplomacyStatus = mapEvaluator.player.diplomacyStatus;
        var statusByPlayer = diplomacyStatus.statusByPlayer;
        for (var playerId in statusByPlayer) {
            if (statusByPlayer[playerId] >= DiplomacyState_3.default.war) {
                playersToEstablishPerimeterAgainst.push(diplomacyStatus.metPlayers[playerId]);
            }
        }
        var allScoresByStar = {};
        for (var i = 0; i < playersToEstablishPerimeterAgainst.length; i++) {
            var player = playersToEstablishPerimeterAgainst[i];
            var scores = mapEvaluator.getScoredPerimeterLocationsAgainstPlayer(player, 1, isForScouting);
            mergeScoresByStar(allScoresByStar, scores);
        }
        var allScores = [];
        for (var starId in allScoresByStar) {
            if (allScoresByStar[starId].score > 0.04) {
                allScores.push(allScoresByStar[starId]);
            }
        }
        var objectives = makeObjectivesFromScores(template, allScores, basePriority);
        return objectives;
    }
    exports.perimeterObjectiveCreation = perimeterObjectiveCreation;
    function getUnitsToBeatImmediateTarget(mapEvaluator, objective) {
        var min;
        var ideal;
        var star = objective.target;
        var hostileUnits = mapEvaluator.getHostileUnitsAtStar(star).all;
        if (hostileUnits.length <= 1) {
            min = hostileUnits.length + 1;
            ideal = hostileUnits.length + 1;
        }
        else {
            min = Math.min(hostileUnits.length + 2, 6);
            ideal = 6;
        }
        return ({
            min: min,
            ideal: ideal
        });
    }
    exports.getUnitsToBeatImmediateTarget = getUnitsToBeatImmediateTarget;
    var _a, _b;
});
define("modules/defaultai/objectives/declareWar", ["require", "exports", "modules/defaultai/aiUtils"], function (require, exports, aiUtils_1) {
    "use strict";
    var declareWar = {
        key: "declareWar",
        creatorFunction: function (grandStrategyAI, mapEvaluator) {
            var template = declareWar;
            var basePriority = grandStrategyAI.desireForWar;
            var scores = [];
            for (var playerId in mapEvaluator.player.diplomacyStatus.metPlayers) {
                var player = mapEvaluator.player.diplomacyStatus.metPlayers[playerId];
                if (!mapEvaluator.player.diplomacyStatus.canDeclareWarOn(player)) {
                    continue;
                }
                var score = mapEvaluator.getDesireToGoToWarWith(player) *
                    mapEvaluator.getAbilityToGoToWarWith(player);
                scores.push({
                    player: player,
                    score: score
                });
            }
            return aiUtils_1.makeObjectivesFromScores(template, scores, basePriority);
        },
        diplomacyRoutineFN: function (objective, diplomacyAI, adjustments, afterDoneCallback) {
            diplomacyAI.diplomacyStatus.declareWarOn(objective.targetPlayer);
            afterDoneCallback();
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = declareWar;
    var _a, _b;
});
define("modules/defaultai/objectives/expansion", ["require", "exports", "modules/defaultai/aiUtils"], function (require, exports, aiUtils_2) {
    "use strict";
    var expansion = {
        key: "expansion",
        movePriority: 4,
        preferredUnitComposition: {
            combat: 0.65,
            defence: 0.25,
            utility: 0.1
        },
        moveRoutineFN: aiUtils_2.musterAndAttackRoutine.bind(null, aiUtils_2.independentTargetFilter),
        unitDesireFN: aiUtils_2.defaultUnitDesireFN,
        unitFitFN: aiUtils_2.defaultUnitFitFN,
        creatorFunction: function (grandStrategyAI, mapEvaluator) {
            var basePriority = grandStrategyAI.desireForExpansion;
            var independentNeighborStars = mapEvaluator.getIndependentNeighborStars();
            var evaluations = mapEvaluator.evaluateIndependentTargets(independentNeighborStars);
            var scores = mapEvaluator.scoreIndependentTargets(evaluations);
            var template = expansion;
            return aiUtils_2.makeObjectivesFromScores(template, scores, basePriority);
        },
        unitsToFillObjectiveFN: aiUtils_2.getUnitsToBeatImmediateTarget
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = expansion;
    var _a, _b;
});
define("modules/defaultai/objectives/cleanUpPirates", ["require", "exports", "modules/defaultai/aiUtils"], function (require, exports, aiUtils_3) {
    "use strict";
    var cleanUpPirates = {
        key: "cleanUpPirates",
        movePriority: 3,
        preferredUnitComposition: {
            combat: 0.65,
            defence: 0.25,
            utility: 0.1
        },
        moveRoutineFN: aiUtils_3.musterAndAttackRoutine.bind(null, aiUtils_3.independentTargetFilter),
        unitDesireFN: aiUtils_3.defaultUnitDesireFN,
        unitFitFN: aiUtils_3.defaultUnitFitFN,
        creatorFunction: function (grandStrategyAI, mapEvaluator, objectivesAI) {
            var basePriority = grandStrategyAI.desireForExpansion;
            var ownedStarsWithPirates = mapEvaluator.player.controlledLocations.filter(function (star) {
                return star.getIndependentUnits().length > 0 && !star.getSecondaryController();
            });
            var evaluations = mapEvaluator.evaluateIndependentTargets(ownedStarsWithPirates);
            var scores = mapEvaluator.scoreIndependentTargets(evaluations);
            var template = cleanUpPirates;
            return aiUtils_3.makeObjectivesFromScores(template, scores, basePriority);
        },
        unitsToFillObjectiveFN: aiUtils_3.getUnitsToBeatImmediateTarget
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = cleanUpPirates;
    var _a, _b;
});
define("modules/defaultai/objectives/discovery", ["require", "exports", "src/utility", "modules/defaultai/aiUtils"], function (require, exports, utility_45, aiUtils_4) {
    "use strict";
    var discovery = {
        key: "discovery",
        movePriority: 999,
        preferredUnitComposition: {
            scouting: 1
        },
        moveRoutineFN: aiUtils_4.moveToRoutine,
        unitDesireFN: aiUtils_4.scoutingUnitDesireFN,
        unitFitFN: aiUtils_4.scoutingUnitFitFN,
        creatorFunction: function (grandStrategyAI, mapEvaluator) {
            var scores = [];
            var starsWithDistance = {};
            var linksToUnrevealedStars = mapEvaluator.player.getLinksToUnRevealedStars();
            var minDistance;
            var maxDistance;
            for (var starId in linksToUnrevealedStars) {
                var star = mapEvaluator.player.revealedStars[starId];
                var nearest = mapEvaluator.player.getNearestOwnedStarTo(star);
                var distance = star.getDistanceToStar(nearest);
                starsWithDistance[starId] = distance;
                if (!isFinite(minDistance)) {
                    minDistance = distance;
                }
                else {
                    minDistance = Math.min(minDistance, distance);
                }
                if (!isFinite(maxDistance)) {
                    maxDistance = distance;
                }
                else {
                    maxDistance = Math.max(maxDistance, distance);
                }
            }
            for (var starId in linksToUnrevealedStars) {
                var star = mapEvaluator.player.revealedStars[starId];
                var score = 0;
                var relativeDistance = utility_45.getRelativeValue(starsWithDistance[starId], minDistance, maxDistance, true);
                var distanceMultiplier = 0.3 + 0.7 * relativeDistance;
                var linksScore = linksToUnrevealedStars[starId].length * 20;
                score += linksScore;
                var desirabilityScore = mapEvaluator.evaluateIndividualStarDesirability(star);
                desirabilityScore *= distanceMultiplier;
                score += desirabilityScore;
                score *= distanceMultiplier;
                scores.push({
                    star: star,
                    score: score
                });
            }
            var template = discovery;
            return aiUtils_4.makeObjectivesFromScores(template, scores, 0.5);
        },
        unitsToFillObjectiveFN: function (mapEvaluator, objective) {
            return { min: 1, ideal: 1 };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = discovery;
    var _a, _b;
});
define("modules/defaultai/objectives/heal", ["require", "exports", "src/mapai/Objective", "modules/defaultai/aiUtils"], function (require, exports, Objective_2, aiUtils_5) {
    "use strict";
    var heal = {
        key: "heal",
        movePriority: -1,
        preferredUnitComposition: {},
        moveRoutineFN: function (front, afterMoveCallback) {
            aiUtils_5.moveToRoutine(front, afterMoveCallback, function (fleet) {
                return fleet.player.getNearestOwnedStarTo(fleet.location);
            });
        },
        unitDesireFN: function (front) {
            return 1;
        },
        unitFitFN: function (unit, front) {
            var healthPercentage = unit.currentHealth / unit.maxHealth;
            return 1 - healthPercentage;
        },
        creatorFunction: function (grandStrategyAI, mapEvaluator) {
            var template = heal;
            return [new Objective_2.default(template, 1, null)];
        },
        unitsToFillObjectiveFN: function (mapEvaluator, objective) {
            return { min: 0, ideal: 0 };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = heal;
    var _a, _b;
});
define("modules/defaultai/objectives/conquer", ["require", "exports", "src/mapai/Objective", "src/DiplomacyState", "src/utility", "modules/defaultai/aiUtils"], function (require, exports, Objective_3, DiplomacyState_4, utility_46, aiUtils_6) {
    "use strict";
    var conquer = {
        key: "conquer",
        movePriority: 6,
        preferredUnitComposition: {
            combat: 0.65,
            defence: 0.25,
            utility: 0.1
        },
        moveRoutineFN: aiUtils_6.musterAndAttackRoutine.bind(null, aiUtils_6.buildingControllerFilter),
        unitDesireFN: aiUtils_6.defaultUnitDesireFN,
        unitFitFN: aiUtils_6.defaultUnitFitFN,
        creatorFunction: function (grandStrategyAI, mapEvaluator, objectivesAI) {
            var hostilePlayers = [];
            var diplomacyStatus = mapEvaluator.player.diplomacyStatus;
            for (var playerId in diplomacyStatus.metPlayers) {
                if (diplomacyStatus.statusByPlayer[playerId] >= DiplomacyState_4.default.war) {
                    hostilePlayers.push(diplomacyStatus.metPlayers[playerId]);
                }
            }
            var relativeThreatOfPlayers = mapEvaluator.getRelativePerceivedThreatOfAllKnownPlayers();
            var possibleTargets = [];
            for (var i = 0; i < hostilePlayers.length; i++) {
                var desirabilityByStar = mapEvaluator.evaluateDesirabilityOfPlayersStars(hostilePlayers[i]).byStar;
                var sortedIds = utility_46.getObjectKeysSortedByValueOfProp(desirabilityByStar, "desirabilityByStar", "desc");
                if (sortedIds.length === 0) {
                    continue;
                }
                possibleTargets.push(desirabilityByStar[sortedIds[0]].star);
            }
            var template = conquer;
            var objectives = [];
            for (var i = 0; i < possibleTargets.length; i++) {
                var star = possibleTargets[i];
                var player = star.owner;
                var threat = relativeThreatOfPlayers[player.id];
                objectives.push(new Objective_3.default(template, threat, star));
            }
            return objectives;
        },
        unitsToFillObjectiveFN: aiUtils_6.getUnitsToBeatImmediateTarget
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = conquer;
    var _a, _b;
});
define("modules/defaultai/objectives/expandManufactoryCapacity", ["require", "exports", "src/mapai/Objective", "src/App"], function (require, exports, Objective_4, App_38) {
    "use strict";
    var expandManufactoryCapacity = {
        key: "expandManufactoryCapacity",
        creatorFunction: function (grandStrategyAI, mapEvaluator, objectivesAI) {
            var template = expandManufactoryCapacity;
            return [new Objective_4.default(template, 0.5, null)];
        },
        economyRoutineFN: function (objective, economyAI) {
            var costByStar = [];
            var player = economyAI.player;
            var stars = player.controlledLocations;
            if (player.money < 1200)
                return;
            for (var i = 0; i < stars.length; i++) {
                var star = stars[i];
                var fullyExpanded = star.manufactory && star.manufactory.capacity >= star.manufactory.maxCapacity;
                if (fullyExpanded)
                    continue;
                var expansionCost;
                if (!star.manufactory)
                    expansionCost = App_38.default.moduleData.ruleSet.manufactory.buildCost;
                else {
                    expansionCost = star.manufactory.getCapacityUpgradeCost();
                }
                costByStar.push({
                    star: star,
                    cost: expansionCost
                });
            }
            if (costByStar.length === 0)
                return;
            costByStar.sort(function (a, b) {
                return a.cost - b.cost;
            });
            var star = costByStar[0].star;
            var cost = costByStar[0].cost;
            if (player.money < cost * 1.1) {
                return;
            }
            if (star.manufactory) {
                star.manufactory.upgradeCapacity(1);
            }
            else {
                star.buildManufactory();
                player.money -= App_38.default.moduleData.ruleSet.manufactory.buildCost;
            }
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = expandManufactoryCapacity;
    var _a, _b;
});
define("modules/defaultai/objectives/scoutingPerimeter", ["require", "exports", "modules/defaultai/aiUtils"], function (require, exports, aiUtils_7) {
    "use strict";
    var scoutingPerimeter = {
        key: "scoutingPerimeter",
        movePriority: 7,
        preferredUnitComposition: {
            scouting: 1
        },
        moveRoutineFN: aiUtils_7.moveToRoutine,
        unitDesireFN: aiUtils_7.scoutingUnitDesireFN,
        unitFitFN: aiUtils_7.scoutingUnitFitFN,
        creatorFunction: null,
        unitsToFillObjectiveFN: function (mapEvaluator, objective) {
            return { min: 1, ideal: 1 };
        }
    };
    scoutingPerimeter.creatorFunction = aiUtils_7.perimeterObjectiveCreation.bind(null, scoutingPerimeter, true, 0.3);
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = scoutingPerimeter;
    var _a, _b;
});
define("modules/defaultai/Objectives", ["require", "exports", "modules/defaultai/objectives/declareWar", "modules/defaultai/objectives/expansion", "modules/defaultai/objectives/cleanUpPirates", "modules/defaultai/objectives/discovery", "modules/defaultai/objectives/heal", "modules/defaultai/objectives/conquer", "modules/defaultai/objectives/expandManufactoryCapacity", "modules/defaultai/objectives/scoutingPerimeter"], function (require, exports, declareWar_1, expansion_1, cleanUpPirates_1, discovery_1, heal_1, conquer_1, expandManufactoryCapacity_1, scoutingPerimeter_1) {
    "use strict";
    var Objectives = (_c = {},
        _c[declareWar_1.default.key] = declareWar_1.default,
        _c[expansion_1.default.key] = expansion_1.default,
        _c[cleanUpPirates_1.default.key] = cleanUpPirates_1.default,
        _c[discovery_1.default.key] = discovery_1.default,
        _c[heal_1.default.key] = heal_1.default,
        _c[conquer_1.default.key] = conquer_1.default,
        _c[expandManufactoryCapacity_1.default.key] = expandManufactoryCapacity_1.default,
        _c[scoutingPerimeter_1.default.key] = scoutingPerimeter_1.default,
        _c
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Objectives;
    var _a, _b, _c;
});
define("src/cacheSpriteSheetAsImages", ["require", "exports", "src/App"], function (require, exports, App_39) {
    "use strict";
    ;
    function processSpriteSheet(sheetData, sheetImg, processFrameFN) {
        for (var spriteName in sheetData.frames) {
            processFrameFN(sheetImg, sheetData.frames[spriteName].frame, spriteName);
        }
    }
    function addImageToApp(name, image) {
        App_39.default.images[name] = image;
    }
    function cacheSpriteSheetAsImages(sheetData, sheetImg, onImageCreated) {
        if (onImageCreated === void 0) { onImageCreated = addImageToApp; }
        var spriteToImageFN = function (sheetImg, frame, spriteName) {
            var canvas = document.createElement("canvas");
            canvas.width = frame.w;
            canvas.height = frame.h;
            var context = canvas.getContext("2d");
            context.drawImage(sheetImg, frame.x, frame.y, frame.w, frame.h, 0, 0, frame.w, frame.h);
            var image = new Image();
            image.src = canvas.toDataURL();
            onImageCreated(spriteName, image);
        };
        processSpriteSheet(sheetData, sheetImg, spriteToImageFN);
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = cacheSpriteSheetAsImages;
    var _a, _b, _c;
});
define("modules/defaultai/defaultAI", ["require", "exports", "modules/defaultai/Objectives"], function (require, exports, Objectives_1) {
    "use strict";
    var defaultAI = {
        key: "defaultAI",
        metaData: {
            name: "Default AI",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(Objectives_1.default, "Objectives");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultAI;
    var _a, _b, _c;
});
define("modules/defaultitems/ItemTemplates", ["require", "exports", "modules/common/abilitytemplates/abilities", "modules/common/passiveskilltemplates/passiveSkills"], function (require, exports, abilities_1, passiveSkills_1) {
    "use strict";
    var bombLauncher1 = {
        type: "bombLauncher1",
        displayName: "Bomb Launcher 1",
        description: "",
        icon: "modules/default/img/items/cannon.png",
        techLevel: 1,
        buildCost: 100,
        slot: "high",
        ability: abilities_1.bombAttack
    };
    var bombLauncher2 = {
        type: "bombLauncher2",
        displayName: "Bomb Launcher 2",
        description: "",
        icon: "modules/default/img/items/cannon.png",
        techLevel: 2,
        buildCost: 200,
        attributes: {
            attack: 1
        },
        slot: "high",
        ability: abilities_1.bombAttack
    };
    var bombLauncher3 = {
        type: "bombLauncher3",
        displayName: "Bomb Launcher 3",
        description: "",
        icon: "modules/default/img/items/cannon.png",
        techLevel: 3,
        buildCost: 300,
        attributes: {
            attack: 3
        },
        slot: "high",
        ability: abilities_1.bombAttack
    };
    var afterBurner1 = {
        type: "afterBurner1",
        displayName: "Afterburner 1",
        description: "",
        icon: "modules/default/img/items/blueThing.png",
        techLevel: 1,
        buildCost: 100,
        attributes: {
            speed: 1
        },
        slot: "mid",
        passiveSkill: passiveSkills_1.overdrive
    };
    var afterBurner2 = {
        type: "afterBurner2",
        displayName: "Afterburner 2",
        description: "",
        icon: "modules/default/img/items/blueThing.png",
        techLevel: 2,
        buildCost: 200,
        attributes: {
            speed: 2
        },
        slot: "mid"
    };
    var afterBurner3 = {
        type: "afterBurner3",
        displayName: "Afterburner 3",
        description: "",
        icon: "modules/default/img/items/blueThing.png",
        techLevel: 3,
        buildCost: 300,
        attributes: {
            maxActionPoints: 1,
            speed: 3
        },
        slot: "mid"
    };
    var shieldPlating1 = {
        type: "shieldPlating1",
        displayName: "Shield Plating 1",
        description: "",
        icon: "modules/default/img/items/armor1.png",
        techLevel: 1,
        buildCost: 100,
        attributes: {
            defence: 1
        },
        slot: "low"
    };
    var shieldPlating2 = {
        type: "shieldPlating2",
        displayName: "Shield Plating 2",
        description: "",
        icon: "modules/default/img/items/armor1.png",
        techLevel: 2,
        buildCost: 200,
        attributes: {
            defence: 2
        },
        slot: "low"
    };
    var shieldPlating3 = {
        type: "shieldPlating3",
        displayName: "Shield Plating 3",
        description: "",
        icon: "modules/default/img/items/armor1.png",
        techLevel: 3,
        buildCost: 300,
        attributes: {
            defence: 3,
            speed: -1
        },
        slot: "low",
        ability: abilities_1.guardRow
    };
    var ItemTemplates = (_d = {},
        _d[bombLauncher1.type] = bombLauncher1,
        _d[bombLauncher2.type] = bombLauncher2,
        _d[bombLauncher3.type] = bombLauncher3,
        _d[afterBurner1.type] = afterBurner1,
        _d[afterBurner2.type] = afterBurner2,
        _d[afterBurner3.type] = afterBurner3,
        _d[shieldPlating1.type] = shieldPlating1,
        _d[shieldPlating2.type] = shieldPlating2,
        _d[shieldPlating3.type] = shieldPlating3,
        _d
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ItemTemplates;
    var _a, _b, _c, _d;
});
define("modules/defaultitems/defaultItems", ["require", "exports", "modules/defaultitems/ItemTemplates"], function (require, exports, ItemTemplates_1) {
    "use strict";
    var defaultItems = {
        key: "defaultItems",
        metaData: {
            name: "Default items",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(ItemTemplates_1.default, "Items");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultItems;
    var _a, _b, _c, _d;
});
define("modules/defaulttechnologies/TechnologyTemplates", ["require", "exports"], function (require, exports) {
    "use strict";
    var stealth = {
        key: "stealth",
        displayName: "Stealth",
        description: "stealthy stuff",
        maxLevel: 9
    };
    var lasers = {
        key: "lasers",
        displayName: "Lasers",
        description: "pew pew",
        maxLevel: 9
    };
    var missiles = {
        key: "missiles",
        displayName: "Missiles",
        description: "boom",
        maxLevel: 9
    };
    var test1 = {
        key: "test1",
        displayName: "test1",
        description: "test1",
        maxLevel: 1
    };
    var test2 = {
        key: "test2",
        displayName: "test2",
        description: "test2",
        maxLevel: 2
    };
    var TechnologyTemplates = (_e = {},
        _e[stealth.key] = stealth,
        _e[lasers.key] = lasers,
        _e[missiles.key] = missiles,
        _e[test1.key] = test1,
        _e[test2.key] = test2,
        _e
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = TechnologyTemplates;
    var _a, _b, _c, _d, _e;
});
define("modules/defaulttechnologies/defaultTechnologies", ["require", "exports", "modules/defaulttechnologies/TechnologyTemplates"], function (require, exports, TechnologyTemplates_1) {
    "use strict";
    var defaultTechnologies = {
        key: "defaultTechnologies",
        metaData: {
            name: "Default technologies",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(TechnologyTemplates_1.default, "Technologies");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultTechnologies;
    var _a, _b, _c, _d, _e;
});
define("modules/defaultattitudemodifiers/AttitudeModifierTemplates", ["require", "exports", "src/DiplomacyState"], function (require, exports, DiplomacyState_5) {
    "use strict";
    var neighborStars = {
        type: "neighborStars",
        displayName: "neighborStars",
        family: "geographic",
        duration: -1,
        startCondition: function (evaluation) {
            return (evaluation.neighborStars >= 2 && evaluation.opinion < 50);
        },
        getEffectFromEvaluation: function (evaluation) {
            return -2 * evaluation.neighborStars;
        }
    };
    var atWar = {
        type: "atWar",
        displayName: "At war",
        family: "current",
        duration: -1,
        startCondition: function (evaluation) {
            return (evaluation.currentStatus >= DiplomacyState_5.default.war);
        },
        constantEffect: -30
    };
    var declaredWar = {
        type: "declaredWar",
        displayName: "Declared war",
        family: "history",
        duration: 15,
        triggers: ["addDeclaredWarAttitudeModifier"],
        constantEffect: -35
    };
    var AttitudeModifierTemplates = (_f = {},
        _f[neighborStars.type] = neighborStars,
        _f[atWar.type] = atWar,
        _f[declaredWar.type] = declaredWar,
        _f
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = AttitudeModifierTemplates;
    var _a, _b, _c, _d, _e, _f;
});
define("modules/defaultattitudemodifiers/defaultAttitudemodifiers", ["require", "exports", "modules/defaultattitudemodifiers/AttitudeModifierTemplates"], function (require, exports, AttitudeModifierTemplates_1) {
    "use strict";
    var defaultAttitudeModifiers = {
        key: "defaultAttitudeModifiers",
        metaData: {
            name: "Default attitude modifiers",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(AttitudeModifierTemplates_1.default, "AttitudeModifiers");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultAttitudeModifiers;
    var _a, _b, _c, _d, _e, _f;
});
define("src/mapgencore/Region", ["require", "exports"], function (require, exports) {
    "use strict";
    var Region = (function () {
        function Region(id, isFiller) {
            this.stars = [];
            this.fillerPoints = [];
            this.id = id;
            this.isFiller = isFiller;
        }
        Region.prototype.addStar = function (star) {
            this.stars.push(star);
            star.mapGenData.region = this;
        };
        Region.prototype.addFillerPoint = function (point) {
            this.fillerPoints.push(point);
            point.mapGenData.region;
        };
        Region.prototype.severLinksByQualifier = function (qualifierFN) {
            for (var i = 0; i < this.stars.length; i++) {
                var star = this.stars[i];
                var links = star.getAllLinks();
                for (var j = 0; j < links.length; j++) {
                    if (qualifierFN(star, links[j])) {
                        star.removeLink(links[j]);
                    }
                }
            }
        };
        Region.prototype.severLinksToRegionsExcept = function (exemptRegions) {
            this.severLinksByQualifier(function (a, b) {
                return exemptRegions.indexOf(b.mapGenData.region) !== -1;
            });
        };
        return Region;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Region;
    var _a, _b, _c, _d, _e, _f;
});
define("src/mapgencore/Sector", ["require", "exports", "src/App", "src/Unit", "src/Building", "src/Fleet", "src/utility"], function (require, exports, App_40, Unit_7, Building_4, Fleet_5, utility_47) {
    "use strict";
    var Sector = (function () {
        function Sector(id) {
            this.stars = [];
            this.addedDistributables = [];
            this.id = id;
        }
        Sector.prototype.addStar = function (star) {
            if (star.mapGenData.sector) {
                throw new Error("Star already part of a sector");
            }
            this.stars.push(star);
            star.mapGenData.sector = this;
        };
        Sector.prototype.addResource = function (resource) {
            var star = this.stars[0];
            this.resourceType = resource;
            this.resourceLocation = star;
            star.setResource(resource);
        };
        Sector.prototype.getNeighboringStars = function () {
            var neighbors = [];
            var alreadyAdded = {};
            for (var i = 0; i < this.stars.length; i++) {
                var frontier = this.stars[i].getLinkedInRange(1).all;
                for (var j = 0; j < frontier.length; j++) {
                    if (frontier[j].mapGenData.sector !== this && !alreadyAdded[frontier[j].id]) {
                        neighbors.push(frontier[j]);
                        alreadyAdded[frontier[j].id] = true;
                    }
                }
            }
            return neighbors;
        };
        Sector.prototype.getNeighboringSectors = function () {
            var sectors = [];
            var alreadyAdded = {};
            var neighborStars = this.getNeighboringStars();
            for (var i = 0; i < neighborStars.length; i++) {
                var sector = neighborStars[i].mapGenData.sector;
                if (!alreadyAdded[sector.id]) {
                    alreadyAdded[sector.id] = true;
                    sectors.push(sector);
                }
            }
            return sectors;
        };
        Sector.prototype.getMajorityRegions = function () {
            var regionsByStars = {};
            var biggestRegionStarCount = 0;
            for (var i = 0; i < this.stars.length; i++) {
                var star = this.stars[i];
                var region = star.mapGenData.region;
                if (!regionsByStars[region.id]) {
                    regionsByStars[region.id] =
                        {
                            count: 0,
                            region: region
                        };
                }
                regionsByStars[region.id].count++;
                if (regionsByStars[region.id].count > biggestRegionStarCount) {
                    biggestRegionStarCount = regionsByStars[region.id].count;
                }
            }
            var majorityRegions = [];
            for (var regionId in regionsByStars) {
                if (regionsByStars[regionId].count >= biggestRegionStarCount) {
                    majorityRegions.push(regionsByStars[regionId].region);
                }
            }
            return majorityRegions;
        };
        Sector.prototype.getPerimeterLengthWithStar = function (star) {
            var perimeterLength = 0;
            for (var i = 0; i < this.stars.length; i++) {
                var ownStar = this.stars[i];
                var halfEdges = ownStar.voronoiCell.halfedges;
                for (var j = 0; j < halfEdges.length; j++) {
                    var edge = halfEdges[j].edge;
                    if (edge.lSite === star || edge.rSite === star) {
                        var edgeLength = Math.abs(edge.va.x - edge.vb.x) + Math.abs(edge.va.y - edge.vb.y);
                        perimeterLength += edgeLength;
                    }
                }
            }
            return perimeterLength;
        };
        Sector.prototype.setupIndependents = function (player, intensity, variance) {
            if (intensity === void 0) { intensity = 1; }
            if (variance === void 0) { variance = 0.33; }
            var independentStars = this.stars.filter(function (star) {
                return !star.owner || star.owner.isIndependent;
            });
            var distanceFromPlayerOwnedLocationById = {};
            var starIsOwnedByPlayerQualifierFN = function (star) {
                return star.owner && !star.owner.isIndependent;
            };
            var makeUnitFN = function (template, player, unitStatsModifier, unitHealthModifier) {
                var unit = new Unit_7.default(template);
                unit.setAttributes(unitStatsModifier);
                unit.setBaseHealth(unitHealthModifier);
                player.addUnit(unit);
                return unit;
            };
            var maxDistance = 0;
            for (var i = 0; i < independentStars.length; i++) {
                var star = independentStars[i];
                player.addStar(star);
                star.addBuilding(new Building_4.default({
                    template: App_40.default.moduleData.Templates.Buildings["starBase"],
                    location: star
                }));
                var nearestPlayerStar = star.getNearestStarForQualifier(starIsOwnedByPlayerQualifierFN);
                var distance = star.getDistanceToStar(nearestPlayerStar);
                distanceFromPlayerOwnedLocationById[star.id] = distance;
                maxDistance = Math.max(maxDistance, distance);
            }
            var starsAtMaxDistance = independentStars.filter(function (star) {
                return distanceFromPlayerOwnedLocationById[star.id] === maxDistance;
            });
            var commanderStar = starsAtMaxDistance.sort(function (a, b) {
                return b.mapGenData.connectedness - a.mapGenData.connectedness;
            })[0];
            var minUnits = 2;
            var maxUnits = 5;
            var globalBuildableUnitTypes = player.getGloballyBuildableUnits();
            for (var i = 0; i < independentStars.length; i++) {
                var star = independentStars[i];
                var distance = distanceFromPlayerOwnedLocationById[star.id];
                var inverseMapGenDistance = 1 - star.mapGenData.distance;
                var localBuildableUnitTypes = [];
                for (var j = 0; j < star.buildableUnitTypes.length; j++) {
                    var template = star.buildableUnitTypes[j];
                    if (!template.technologyRequirements ||
                        star.owner.meetsTechnologyRequirements(template.technologyRequirements)) {
                        localBuildableUnitTypes.push(template);
                    }
                }
                var unitsToAddCount = minUnits;
                for (var j = minUnits; j < distance; j++) {
                    unitsToAddCount += (1 - variance + Math.random() * distance * variance) * intensity;
                    if (unitsToAddCount >= maxUnits) {
                        unitsToAddCount = maxUnits;
                        break;
                    }
                }
                var elitesAmount = Math.floor(unitsToAddCount / 2);
                var templateCandidates = localBuildableUnitTypes.concat(globalBuildableUnitTypes);
                var units = [];
                if (star === commanderStar) {
                    var template = utility_47.getRandomArrayItem(localBuildableUnitTypes);
                    var commander = makeUnitFN(template, player, 1.4, 1.4 + inverseMapGenDistance);
                    commander.name = "Pirate commander";
                    units.push(commander);
                }
                for (var j = 0; j < unitsToAddCount; j++) {
                    var isElite = j < elitesAmount;
                    var unitHealthModifier = (isElite ? 1.2 : 1) + inverseMapGenDistance;
                    var unitStatsModifier = (isElite ? 1.2 : 1);
                    var template = utility_47.getRandomArrayItem(templateCandidates);
                    var unit = makeUnitFN(template, player, unitStatsModifier, unitHealthModifier);
                    unit.name = (isElite ? "Pirate elite" : "Pirate");
                    units.push(unit);
                }
                var fleet = new Fleet_5.default(player, units, star, undefined, false);
                fleet.name = "Pirates";
            }
        };
        return Sector;
    }());
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Sector;
    var _a, _b, _c, _d, _e, _f;
});
define("src/mapgencore/triangulation", ["require", "exports", "src/mapgencore/Triangle", "src/utility"], function (require, exports, Triangle_1, utility_48) {
    "use strict";
    function triangulate(vertices) {
        var triangles = [];
        var superTriangle = makeSuperTriangle(vertices);
        triangles.push(superTriangle);
        for (var i = 0; i < vertices.length; i++) {
            var vertex = vertices[i];
            var edgeBuffer = [];
            for (var j = 0; j < triangles.length; j++) {
                var triangle = triangles[j];
                if (triangle.circumCircleContainsPoint(vertex)) {
                    var edges = triangle.getEdges();
                    edgeBuffer = edgeBuffer.concat(edges);
                    triangles.splice(j, 1);
                    j--;
                }
            }
            if (i >= vertices.length)
                continue;
            for (var j = edgeBuffer.length - 2; j >= 0; j--) {
                for (var k = edgeBuffer.length - 1; k >= j + 1; k--) {
                    if (edgesEqual(edgeBuffer[k], edgeBuffer[j])) {
                        edgeBuffer.splice(k, 1);
                        edgeBuffer.splice(j, 1);
                        k--;
                        continue;
                    }
                }
            }
            for (var j = 0; j < edgeBuffer.length; j++) {
                var newTriangle = new Triangle_1.default(edgeBuffer[j][0], edgeBuffer[j][1], vertex);
                triangles.push(newTriangle);
            }
        }
        for (var i = triangles.length - 1; i >= 0; i--) {
            if (triangles[i].getAmountOfSharedVerticesWith(superTriangle)) {
                triangles.splice(i, 1);
            }
        }
        return triangles;
    }
    exports.triangulate = triangulate;
    function makeSuperTriangle(vertices, highestCoordinateValue) {
        var max;
        if (highestCoordinateValue) {
            max = highestCoordinateValue;
        }
        else {
            max = vertices[0].x;
            for (var i = 0; i < vertices.length; i++) {
                if (vertices[i].x > max) {
                    max = vertices[i].x;
                }
                if (vertices[i].y > max) {
                    max = vertices[i].y;
                }
            }
        }
        var triangle = new Triangle_1.default({
            x: 3 * max,
            y: 0
        }, {
            x: 0,
            y: 3 * max
        }, {
            x: -3 * max,
            y: -3 * max
        });
        return triangle;
    }
    function edgesEqual(e1, e2) {
        return ((utility_48.pointsEqual(e1[0], e2[0]) && utility_48.pointsEqual(e1[1], e2[1])) ||
            (utility_48.pointsEqual(e1[0], e2[1]) && utility_48.pointsEqual(e1[1], e2[0])));
    }
    var _a, _b, _c, _d, _e, _f;
});
define("src/TemplateIndexes", ["require", "exports", "src/App"], function (require, exports, App_41) {
    "use strict";
    var TemplateIndexes = (function () {
        function TemplateIndexes() {
            this.builtIndexes = {
                distributablesByDistributionGroup: null,
                itemsByTechLevel: null,
            };
        }
        Object.defineProperty(TemplateIndexes.prototype, "distributablesByDistributionGroup", {
            get: function () {
                if (!this.builtIndexes.distributablesByDistributionGroup) {
                    this.builtIndexes.distributablesByDistributionGroup =
                        TemplateIndexes.getDistributablesByDistributionGroup();
                }
                return this.builtIndexes.distributablesByDistributionGroup;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TemplateIndexes.prototype, "itemsByTechLevel", {
            get: function () {
                if (!this.builtIndexes.itemsByTechLevel) {
                    this.builtIndexes.itemsByTechLevel = TemplateIndexes.getItemsByTechLevel();
                }
                return this.builtIndexes.itemsByTechLevel;
            },
            enumerable: true,
            configurable: true
        });
        TemplateIndexes.prototype.clear = function () {
            for (var key in this.builtIndexes) {
                this.builtIndexes[key] = null;
            }
        };
        TemplateIndexes.getDistributablesByDistributionGroup = function () {
            var result = {};
            function putInGroups(distributables, distributableType) {
                for (var key in distributables) {
                    var distributable = distributables[key];
                    for (var i = 0; i < distributable.distributionGroups.length; i++) {
                        var groupName = distributable.distributionGroups[i];
                        if (!result[groupName]) {
                            result[groupName] =
                                {
                                    unitFamilies: [],
                                    resources: []
                                };
                        }
                        result[groupName][distributableType].push(distributable);
                    }
                }
            }
            putInGroups(App_41.default.moduleData.Templates.UnitFamilies, "unitFamilies");
            putInGroups(App_41.default.moduleData.Templates.Resources, "resources");
            return result;
        };
        TemplateIndexes.getItemsByTechLevel = function () {
            var itemsByTechLevel = {};
            for (var itemName in App_41.default.moduleData.Templates.Items) {
                var item = App_41.default.moduleData.Templates.Items[itemName];
                if (!itemsByTechLevel[item.techLevel]) {
                    itemsByTechLevel[item.techLevel] = [];
                }
                itemsByTechLevel[item.techLevel].push(item);
            }
            return itemsByTechLevel;
        };
        return TemplateIndexes;
    }());
    var indexes = new TemplateIndexes();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = indexes;
    var _a, _b, _c, _d, _e, _f;
});
define("src/mapgencore/mapGenUtils", ["require", "exports", "src/App", "src/mapgencore/Sector", "src/mapgencore/triangulation", "src/Building", "src/Color", "src/Emblem", "src/Flag", "src/TemplateIndexes", "src/pathfinding", "src/utility"], function (require, exports, App_42, Sector_1, triangulation_1, Building_5, Color_5, Emblem_4, Flag_5, TemplateIndexes_1, pathfinding_1, utility_49) {
    "use strict";
    function linkAllStars(stars) {
        if (stars.length < 3) {
            if (stars.length === 2) {
                stars[0].addLink(stars[1]);
            }
            return;
        }
        var triangles = triangulation_1.triangulate(stars);
        for (var i = 0; i < triangles.length; i++) {
            var edges = triangles[i].getEdges();
            for (var j = 0; j < edges.length; j++) {
                edges[j][0].addLink(edges[j][1]);
            }
        }
    }
    exports.linkAllStars = linkAllStars;
    function partiallyCutLinks(stars, minConnections, maxCutsPerRegion) {
        for (var i = 0; i < stars.length; i++) {
            var star = stars[i];
            var regionsAlreadyCut = {};
            var neighbors = star.getAllLinks();
            if (neighbors.length <= minConnections)
                continue;
            for (var j = neighbors.length - 1; j >= 0; j--) {
                var neighbor = neighbors[j];
                if (regionsAlreadyCut[neighbor.mapGenData.region.id] >= maxCutsPerRegion) {
                    continue;
                }
                var neighborLinks = neighbor.getAllLinks();
                if (neighbors.length <= minConnections || neighborLinks.length <= minConnections)
                    continue;
                var totalLinks = neighbors.length + neighborLinks.length;
                var cutThreshhold = 0.05 + 0.025 * (totalLinks - minConnections) * (1 - star.mapGenData.distance);
                var minMultipleCutThreshhold = 0.15;
                if (cutThreshhold > 0) {
                    if (Math.random() < cutThreshhold) {
                        star.removeLink(neighbor);
                        neighbors.pop();
                        if (!regionsAlreadyCut[neighbor.mapGenData.region.id]) {
                            regionsAlreadyCut[neighbor.mapGenData.region.id] = 0;
                        }
                        regionsAlreadyCut[neighbor.mapGenData.region.id]++;
                        var path = pathfinding_1.aStar(star, neighbor);
                        if (!path) {
                            star.addLink(neighbor);
                            regionsAlreadyCut[neighbor.mapGenData.region.id]--;
                            neighbors.push(neighbor);
                        }
                    }
                    cutThreshhold -= minMultipleCutThreshhold;
                }
            }
        }
    }
    exports.partiallyCutLinks = partiallyCutLinks;
    function calculateConnectedness(stars, maxRange) {
        for (var i = 0; i < stars.length; i++) {
            var connectedness = 0;
            var linkedByRange = stars[i].getLinkedInRange(maxRange).byRange;
            for (var rangeString in linkedByRange) {
                var range = parseInt(rangeString);
                connectedness += linkedByRange[rangeString].length / range;
            }
            stars[i].mapGenData.connectedness = connectedness;
        }
    }
    exports.calculateConnectedness = calculateConnectedness;
    function makeSectors(stars, minSize, maxSize) {
        var totalStars = stars.length;
        var unassignedStars = stars.slice(0);
        var leftoverStars = [];
        var averageSize = (minSize + maxSize) / 2;
        var averageSectorsAmount = Math.round(totalStars / averageSize);
        var sectorsById = {};
        var sectorIdGen = 0;
        var sectorsOverMaxSize = [];
        var sameSectorFN = function (a, b) {
            return a.mapGenData.sector === b.mapGenData.sector;
        };
        calculateConnectedness(stars, minSize);
        unassignedStars.sort(function (a, b) {
            return b.mapGenData.connectedness - a.mapGenData.connectedness;
        });
        while (averageSectorsAmount > 0 && unassignedStars.length > 0) {
            var seedStar = unassignedStars.pop();
            var canFormMinSizeSector = seedStar.getIslandForQualifier(sameSectorFN, minSize).length >= minSize;
            if (canFormMinSizeSector) {
                var sector = new Sector_1.default(sectorIdGen++);
                sectorsById[sector.id] = sector;
                var discoveryStarIndex = 0;
                sector.addStar(seedStar);
                while (sector.stars.length < minSize) {
                    var discoveryStar = sector.stars[discoveryStarIndex];
                    var frontier = discoveryStar.getLinkedInRange(1).all;
                    frontier = frontier.filter(function (star) {
                        return !star.mapGenData.sector;
                    });
                    while (sector.stars.length < minSize && frontier.length > 0) {
                        var frontierSortScores = {};
                        for (var i = 0; i < frontier.length; i++) {
                            var perimeter = sector.getPerimeterLengthWithStar(frontier[i]) / 15;
                            var sortScore = frontier[i].mapGenData.connectedness - perimeter;
                            frontierSortScores[frontier[i].id] = sortScore;
                        }
                        frontier.sort(function (a, b) {
                            return frontierSortScores[b.id] - frontierSortScores[a.id];
                        });
                        var toAdd = frontier.pop();
                        unassignedStars.splice(unassignedStars.indexOf(toAdd), 1);
                        sector.addStar(toAdd);
                    }
                    discoveryStarIndex++;
                }
            }
            else {
                leftoverStars.push(seedStar);
            }
        }
        while (leftoverStars.length > 0) {
            var star = leftoverStars.pop();
            var neighbors = star.getLinkedInRange(1).all;
            var alreadyAddedNeighborSectors = {};
            var candidateSectors = [];
            for (var j = 0; j < neighbors.length; j++) {
                if (!neighbors[j].mapGenData.sector)
                    continue;
                else {
                    if (!alreadyAddedNeighborSectors[neighbors[j].mapGenData.sector.id]) {
                        alreadyAddedNeighborSectors[neighbors[j].mapGenData.sector.id] = true;
                        candidateSectors.push(neighbors[j].mapGenData.sector);
                    }
                }
            }
            if (candidateSectors.length < 1) {
                leftoverStars.unshift(star);
                continue;
            }
            var unclaimedNeighborsPerSector = {};
            for (var j = 0; j < candidateSectors.length; j++) {
                var sectorNeighbors = candidateSectors[j].getNeighboringStars();
                var unclaimed = 0;
                for (var k = 0; k < sectorNeighbors.length; k++) {
                    if (!sectorNeighbors[k].mapGenData.sector) {
                        unclaimed++;
                    }
                }
                unclaimedNeighborsPerSector[candidateSectors[j].id] = unclaimed;
            }
            candidateSectors.sort(function (a, b) {
                var sizeSort = a.stars.length - b.stars.length;
                if (sizeSort)
                    return sizeSort;
                var unclaimedSort = unclaimedNeighborsPerSector[b.id] -
                    unclaimedNeighborsPerSector[a.id];
                if (sizeSort)
                    return unclaimedSort;
                var perimeterSort = b.getPerimeterLengthWithStar(star) - a.getPerimeterLengthWithStar(star);
                if (perimeterSort)
                    return perimeterSort;
            });
            candidateSectors[0].addStar(star);
        }
        return sectorsById;
    }
    exports.makeSectors = makeSectors;
    function setSectorDistributionFlags(sectors) {
        for (var i = 0; i < sectors.length; i++) {
            var sector = sectors[i];
            sector.distributionFlags = [];
            var majorityRegions = sector.getMajorityRegions();
            for (var j = 0; j < majorityRegions.length; j++) {
                if (majorityRegions[j].id.indexOf("center") !== -1) {
                    sector.distributionFlags.push("rare");
                }
                else {
                    sector.distributionFlags.push("common");
                }
            }
        }
    }
    exports.setSectorDistributionFlags = setSectorDistributionFlags;
    function distributeDistributablesPerSector(sectors, distributableType, allDistributables, placerFunction) {
        if (!sectors[0].distributionFlags) {
            setSectorDistributionFlags(sectors);
        }
        var probabilityWeights = {};
        for (var name_7 in allDistributables) {
            probabilityWeights[name_7] = allDistributables[name_7].rarity;
        }
        for (var i = 0; i < sectors.length; i++) {
            var sector = sectors[i];
            var alreadyAddedByWeight = utility_49.getRelativeWeightsFromObject(probabilityWeights);
            var candidates = [];
            for (var j = 0; j < sector.distributionFlags.length; j++) {
                var flag = sector.distributionFlags[j];
                var distributablesForFlag = TemplateIndexes_1.default.distributablesByDistributionGroup[flag][distributableType];
                candidates = candidates.concat(distributablesForFlag);
            }
            if (candidates.length === 0)
                continue;
            var neighborSectors = sector.getNeighboringSectors();
            var candidatesNotInNeighboringSectors = candidates.filter(function (candidate) {
                for (var k = 0; k < neighborSectors.length; k++) {
                    if (neighborSectors[k].addedDistributables.indexOf(candidate) !== -1) {
                        return false;
                    }
                }
                return true;
            });
            if (candidatesNotInNeighboringSectors.length > 0) {
                candidates = candidatesNotInNeighboringSectors;
            }
            var candidatesByWeight = {};
            for (var j = 0; j < candidates.length; j++) {
                candidatesByWeight[candidates[j].type] =
                    alreadyAddedByWeight[candidates[j].type];
            }
            var selectedKey = utility_49.getRandomKeyWithWeights(candidatesByWeight);
            var selectedType = allDistributables[selectedKey];
            probabilityWeights[selectedKey] /= 2;
            placerFunction(sector, selectedType);
            sector.addedDistributables.push(selectedType);
        }
    }
    exports.distributeDistributablesPerSector = distributeDistributablesPerSector;
    function addDefenceBuildings(star, amount, addSectorCommand) {
        if (amount === void 0) { amount = 1; }
        if (addSectorCommand === void 0) { addSectorCommand = true; }
        if (!star.owner) {
            console.warn("Tried to add defence buildings to star without owner.");
            return;
        }
        if (amount < 1) {
            return;
        }
        if (addSectorCommand) {
            star.addBuilding(new Building_5.default({
                template: App_42.default.moduleData.Templates.Buildings["sectorCommand"],
                location: star
            }));
            var amount = amount - 1;
        }
        for (var i = 0; i < amount; i++) {
            star.addBuilding(new Building_5.default({
                template: App_42.default.moduleData.Templates.Buildings["starBase"],
                location: star
            }));
        }
    }
    exports.addDefenceBuildings = addDefenceBuildings;
    function setupPirates(player) {
        player.name = "Pirates";
        player.color = Color_5.default.fromHex(0x000000);
        player.colorAlpha = 0;
        player.secondaryColor = Color_5.default.fromHex(0xFFFFFF);
        player.isIndependent = true;
        var foregroundEmblem = new Emblem_4.default(player.secondaryColor);
        foregroundEmblem.inner = App_42.default.moduleData.Templates.SubEmblems["Flag_of_Edward_England"];
        player.flag = new Flag_5.default({
            width: 46,
            mainColor: player.color,
            secondaryColor: player.secondaryColor
        });
        player.flag.setForegroundEmblem(foregroundEmblem);
    }
    exports.setupPirates = setupPirates;
    function severLinksToNonAdjacentStars(star) {
        var allLinks = star.getAllLinks();
        var neighborVoronoiIds = star.voronoiCell.getNeighborIds();
        for (var i = 0; i < allLinks.length; i++) {
            var toSever = allLinks[i];
            if (neighborVoronoiIds.indexOf(toSever.voronoiId) === -1) {
                star.removeLink(toSever);
            }
        }
    }
    exports.severLinksToNonAdjacentStars = severLinksToNonAdjacentStars;
    var _a, _b, _c, _d, _e, _f;
});
define("modules/defaultmapgen/mapgenfunctions/spiralGalaxyGeneration", ["require", "exports", "src/App", "src/FillerPoint", "src/Player", "src/Star", "src/utility", "src/mapgencore/MapGenResult", "src/mapgencore/Region", "src/mapgencore/voronoi", "src/mapgencore/mapGenUtils"], function (require, exports, App_43, FillerPoint_2, Player_4, Star_2, utility_50, MapGenResult_2, Region_1, voronoi_2, mapGenUtils_1) {
    "use strict";
    var spiralGalaxyGeneration = function (options, players) {
        var sg = (function setStarGenerationProps(options) {
            var totalSize = options.defaultOptions.width * options.defaultOptions.height;
            var totalStars = options.defaultOptions.starCount;
            var actualArms = options.basicOptions["arms"];
            var totalArms = actualArms * 2;
            var percentageInCenter = 0.3;
            var percentageInArms = 1 - percentageInCenter;
            var amountInCenter = totalStars * percentageInCenter;
            var amountPerArm = Math.round(totalStars / actualArms * percentageInArms);
            var amountPerFillerArm = Math.round(amountPerArm / 2);
            var amountPerCenter = Math.round(amountInCenter / totalArms);
            var actualStarsInArms = actualArms * amountPerArm;
            var actualStarsInCenter = totalArms * amountPerCenter;
            var actualStars = actualStarsInCenter + actualStarsInArms;
            var starsDeficit = totalStars - actualStars;
            var armsToMakeUpDeficit = [];
            var starsToAddPerDeficitArm = 0;
            if (starsDeficit !== 0) {
                starsToAddPerDeficitArm = starsDeficit > 0 ? 1 : -1;
                var deficitStep = totalArms / Math.abs(starsDeficit);
                for (var i = 0; i < totalArms; i += deficitStep) {
                    armsToMakeUpDeficit.push(Math.round(i));
                }
            }
            return ({
                totalArms: totalArms,
                armsToMakeUpDeficit: armsToMakeUpDeficit,
                starsToAddPerDeficitArm: starsToAddPerDeficitArm,
                amountPerArm: amountPerArm,
                amountPerFillerArm: amountPerFillerArm,
                amountPerCenter: amountPerCenter,
                centerSize: 0.4,
                armDistance: Math.PI * 2 / totalArms,
                armOffsetMax: 0.5,
                armRotationFactor: actualArms / 3,
                galaxyRotation: utility_50.randRange(0, Math.PI * 2)
            });
        })(options);
        function makePoint(distanceMin, distanceMax, arm, maxOffset) {
            var distance = utility_50.randRange(distanceMin, distanceMax);
            var offset = Math.random() * maxOffset - maxOffset / 2;
            offset *= (1 / distance);
            if (offset < 0)
                offset = Math.pow(offset, 2) * -1;
            else
                offset = Math.pow(offset, 2);
            var armRotation = distance * sg.armRotationFactor;
            var angle = arm * sg.armDistance + sg.galaxyRotation + offset + armRotation;
            var width = options.defaultOptions.width / 2;
            var height = options.defaultOptions.height / 2;
            var x = Math.cos(angle) * distance * width + width;
            var y = Math.sin(angle) * distance * height + height;
            return ({
                pos: {
                    x: x,
                    y: y
                },
                distance: distance
            });
        }
        function makeStar(point, distance) {
            var star = new Star_2.default(point.x, point.y);
            star.mapGenData.distance = distance;
            star.baseIncome = utility_50.randInt(4, 10) * 10;
            return star;
        }
        var stars = [];
        var fillerPoints = [];
        var regions = [];
        var centerRegion = new Region_1.default("center", false);
        regions.push(centerRegion);
        var fillerRegionId = 0;
        var regionId = 0;
        for (var i = 0; i < sg.totalArms; i++) {
            var isFiller = i % 2 !== 0;
            var regionName = isFiller ? "filler_" + fillerRegionId++ : "arm_" + regionId++;
            var region = new Region_1.default(regionName, isFiller);
            regions.push(region);
            var amountForThisArm = isFiller ? sg.amountPerFillerArm : sg.amountPerArm;
            var amountForThisCenter = sg.amountPerCenter;
            if (sg.armsToMakeUpDeficit.indexOf(i) !== -1) {
                amountForThisCenter += sg.starsToAddPerDeficitArm;
            }
            var maxOffsetForThisArm = isFiller ? sg.armOffsetMax / 2 : sg.armOffsetMax;
            for (var j = 0; j < amountForThisArm; j++) {
                var point = makePoint(sg.centerSize, 1, i, maxOffsetForThisArm);
                if (isFiller) {
                    var fillerPoint = new FillerPoint_2.default(point.pos.x, point.pos.y);
                    region.addFillerPoint(fillerPoint);
                    fillerPoint.mapGenData.distance = point.distance;
                    fillerPoints.push(fillerPoint);
                }
                else {
                    var star = makeStar(point.pos, point.distance);
                    region.addStar(star);
                    stars.push(star);
                }
            }
            for (var j = 0; j < amountForThisCenter; j++) {
                var point = makePoint(0, sg.centerSize, i, maxOffsetForThisArm);
                var star = makeStar(point.pos, point.distance);
                centerRegion.addStar(star);
                stars.push(star);
            }
        }
        var allPoints = fillerPoints.concat(stars);
        var voronoi = voronoi_2.makeVoronoi(allPoints, options.defaultOptions.width, options.defaultOptions.height);
        var regularity = options.basicOptions["starSizeRegularity"] / 100;
        var centerDensity = options.basicOptions["centerDensity"] / 100;
        var inverseCenterDensity = 1 - centerDensity;
        for (var i = 0; i < 2; i++) {
            voronoi_2.relaxVoronoi(voronoi, function (star) {
                return (inverseCenterDensity + centerDensity * star.mapGenData.distance) * regularity;
            });
            voronoi = voronoi_2.makeVoronoi(allPoints, options.defaultOptions.width, options.defaultOptions.height);
        }
        mapGenUtils_1.linkAllStars(stars);
        for (var i = 0; i < regions.length; i++) {
            regions[i].severLinksByQualifier(function (a, b) {
                return (a.mapGenData.region !== b.mapGenData.region &&
                    a.mapGenData.region !== regions[0] &&
                    b.mapGenData.region !== regions[0]);
            });
            for (var j = 0; j < regions[i].stars.length; j++) {
                mapGenUtils_1.severLinksToNonAdjacentStars(regions[i].stars[j]);
            }
        }
        var isConnected = stars[0].getLinkedInRange(stars.length).all.length === stars.length;
        if (!isConnected) {
            console.log("Regenerated map due to insufficient connections");
            return spiralGalaxyGeneration(options, players);
        }
        mapGenUtils_1.partiallyCutLinks(stars, 4, 2);
        var sectorsById = mapGenUtils_1.makeSectors(stars, 3, 3);
        var allSectors = [];
        for (var sectorId in sectorsById) {
            allSectors.push(sectorsById[sectorId]);
        }
        var resourcePlacerFN = function (sector, resource) {
            sector.addResource(resource);
        };
        mapGenUtils_1.distributeDistributablesPerSector(allSectors, "resources", App_43.default.moduleData.Templates.Resources, resourcePlacerFN);
        var localUnitPlacerFN = function (sector, unitFamily) {
            for (var i = 0; i < sector.stars.length; i++) {
                var star = sector.stars[i];
                star.buildableUnitTypes = star.buildableUnitTypes.concat(unitFamily.associatedTemplates);
            }
        };
        mapGenUtils_1.distributeDistributablesPerSector(allSectors, "unitFamilies", App_43.default.moduleData.Templates.UnitFamilies, localUnitPlacerFN);
        var startRegions = (function setStartingRegions() {
            var armCount = options.basicOptions["arms"];
            var playerCount = Math.min(players.length, armCount);
            var playerArmStep = armCount / playerCount;
            var startRegions = [];
            var candidateRegions = regions.filter(function (region) {
                return region.id.indexOf("arm") !== -1;
            });
            for (var i = 0; i < playerCount; i++) {
                var regionNumber = Math.floor(i * playerArmStep);
                var regionToAdd = candidateRegions[regionNumber];
                startRegions.push(regionToAdd);
            }
            return startRegions;
        })();
        var startPositions = (function getStartPoints(regions) {
            var startPositions = [];
            for (var i = 0; i < regions.length; i++) {
                var region = regions[i];
                var starsByDistance = region.stars.slice(0).sort(function (a, b) {
                    return b.mapGenData.distance - a.mapGenData.distance;
                });
                var star = starsByDistance[0];
                startPositions.push(star);
            }
            return startPositions;
        })(startRegions);
        for (var i = 0; i < startPositions.length; i++) {
            var star = startPositions[i];
            var player = players[i];
            player.addStar(star);
            mapGenUtils_1.addDefenceBuildings(star, 2);
            star.buildManufactory();
        }
        var pirates = new Player_4.default(true);
        mapGenUtils_1.setupPirates(pirates);
        for (var i = 0; i < allSectors.length; i++) {
            var sector = allSectors[i];
            sector.setupIndependents(pirates, 1, 0);
        }
        return new MapGenResult_2.default({
            stars: stars,
            fillerPoints: fillerPoints,
            width: options.defaultOptions.width,
            height: options.defaultOptions.height,
            seed: "" + Math.random(),
            independents: [pirates]
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = spiralGalaxyGeneration;
    var _a, _b, _c, _d, _e, _f;
});
define("modules/defaultmapgen/templates/spiralGalaxy", ["require", "exports", "modules/defaultmapgen/mapgenfunctions/spiralGalaxyGeneration"], function (require, exports, spiralGalaxyGeneration_1) {
    "use strict";
    var spiralGalaxy = {
        key: "spiralGalaxy",
        displayName: "Spiral galaxy",
        description: "Create a spiral galaxy with arms",
        minPlayers: 2,
        maxPlayers: 5,
        mapGenFunction: spiralGalaxyGeneration_1.default,
        options: {
            defaultOptions: {
                height: {
                    displayName: "Height",
                    range: {
                        min: 800,
                        max: 1600,
                        step: 1
                    }
                },
                width: {
                    displayName: "Width",
                    range: {
                        min: 800,
                        max: 1600,
                        step: 1
                    }
                },
                starCount: {
                    displayName: "Star count",
                    range: {
                        min: 20,
                        max: 40,
                        step: 1
                    }
                }
            },
            basicOptions: {
                arms: {
                    displayName: "Arms",
                    range: {
                        min: 3,
                        max: 6,
                        step: 1,
                        defaultValue: 5
                    }
                },
                starSizeRegularity: {
                    displayName: "Star size regularity",
                    range: {
                        min: 1,
                        max: 100,
                        step: 1,
                        defaultValue: 100
                    }
                },
                centerDensity: {
                    displayName: "Center density",
                    range: {
                        min: 1,
                        max: 90,
                        step: 1,
                        defaultValue: 50
                    }
                }
            }
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = spiralGalaxy;
    var _a, _b, _c, _d, _e, _f;
});
define("modules/defaultmapgen/templates/tinierSpiralGalaxy", ["require", "exports", "modules/defaultmapgen/mapgenfunctions/spiralGalaxyGeneration"], function (require, exports, spiralGalaxyGeneration_2) {
    "use strict";
    var tinierSpiralGalaxy = {
        key: "tinierSpiralGalaxy",
        displayName: "Tinier Spiral galaxy",
        description: "Create a spiral galaxy with arms but tinier (just for testing)",
        minPlayers: 2,
        maxPlayers: 4,
        mapGenFunction: spiralGalaxyGeneration_2.default,
        options: {
            defaultOptions: {
                height: {
                    displayName: "height",
                    range: {
                        min: 500,
                        max: 1000,
                        step: 1
                    }
                },
                width: {
                    displayName: "width",
                    range: {
                        min: 500,
                        max: 1000,
                        step: 1
                    }
                },
                starCount: {
                    displayName: "starCount",
                    range: {
                        min: 15,
                        max: 30,
                        step: 1,
                        defaultValue: 20
                    }
                }
            },
            basicOptions: {
                arms: {
                    displayName: "arms",
                    range: {
                        min: 2,
                        max: 5,
                        step: 1,
                        defaultValue: 4
                    }
                },
                starSizeRegularity: {
                    displayName: "starSizeRegularity",
                    range: {
                        min: 1,
                        max: 100,
                        step: 1,
                        defaultValue: 100
                    }
                },
                centerDensity: {
                    displayName: "centerDensity",
                    range: {
                        min: 1,
                        max: 90,
                        step: 1,
                        defaultValue: 50
                    }
                }
            }
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = tinierSpiralGalaxy;
    var _a, _b, _c, _d, _e, _f;
});
define("modules/defaultmapgen/defaultMapgen", ["require", "exports", "modules/defaultmapgen/templates/spiralGalaxy", "modules/defaultmapgen/templates/tinierSpiralGalaxy"], function (require, exports, spiralGalaxy_1, tinierSpiralGalaxy_1) {
    "use strict";
    var Templates = (_g = {},
        _g[spiralGalaxy_1.default.key] = spiralGalaxy_1.default,
        _g[tinierSpiralGalaxy_1.default.key] = tinierSpiralGalaxy_1.default,
        _g
    );
    var defaultMapGen = {
        key: "defaultMapGen",
        metaData: {
            name: "Default map gen",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(Templates, "MapGen");
            if (!moduleData.defaultMap) {
                moduleData.defaultMap = spiralGalaxy_1.default;
            }
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultMapGen;
    var _a, _b, _c, _d, _e, _f, _g;
});
define("modules/defaultunits/unitArchetypes", ["require", "exports"], function (require, exports) {
    "use strict";
    exports.combat = {
        type: "combat",
        idealWeightInBattle: 1,
        idealWeightInFleet: 1,
        rowScores: {
            ROW_FRONT: 1,
            ROW_BACK: 0.6
        }
    };
    exports.utility = {
        type: "utility",
        idealWeightInBattle: 0.33,
        idealWeightInFleet: 0.5,
        rowScores: {
            ROW_FRONT: 0.4,
            ROW_BACK: 0.6
        }
    };
    exports.scouting = {
        type: "scouting",
        idealWeightInBattle: 0.01,
        idealWeightInFleet: 0.2,
        rowScores: {
            ROW_FRONT: 0.01,
            ROW_BACK: 0.02
        }
    };
    exports.defence = {
        type: "defence",
        idealWeightInBattle: 0.5,
        idealWeightInFleet: 0.5,
        rowScores: {
            ROW_FRONT: 1,
            ROW_BACK: 0.5
        },
        scoreMultiplierForRowFN: function (row, rowUnits, enemyUnits) {
            var multiplier = (row === "ROW_BACK" ? 0.7 : 1);
            var totalDefenceUnderThreshhold = 0;
            var threshhold = 6;
            var alreadyHasDefender = false;
            for (var i = 0; i < rowUnits.length; i++) {
                var unit = rowUnits[i];
                if (!unit)
                    continue;
                if (unit.template.archetype.type === "defence") {
                    return multiplier;
                }
                totalDefenceUnderThreshhold += Math.max(0, threshhold - unit.attributes.defence);
            }
            return multiplier + totalDefenceUnderThreshhold * 0.2;
        }
    };
    var UnitArchetypes = (_h = {},
        _h[exports.combat.type] = exports.combat,
        _h[exports.utility.type] = exports.utility,
        _h[exports.scouting.type] = exports.scouting,
        _h[exports.defence.type] = exports.defence,
        _h
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = UnitArchetypes;
    var _a, _b, _c, _d, _e, _f, _g, _h;
});
define("modules/defaultunits/unitFamilies", ["require", "exports"], function (require, exports) {
    "use strict";
    exports.debug = {
        type: "debug",
        debugOnly: true,
        alwaysAvailable: true,
        rarity: 0,
        distributionGroups: []
    };
    exports.basic = {
        type: "basic",
        debugOnly: false,
        alwaysAvailable: true,
        rarity: 0,
        distributionGroups: []
    };
    exports.red = {
        type: "red",
        debugOnly: false,
        alwaysAvailable: false,
        rarity: 1,
        distributionGroups: ["common", "rare"]
    };
    exports.blue = {
        type: "blue",
        debugOnly: false,
        alwaysAvailable: false,
        rarity: 1,
        distributionGroups: ["common", "rare"]
    };
    var UnitFamilies = (_j = {},
        _j[exports.debug.type] = exports.debug,
        _j[exports.basic.type] = exports.basic,
        _j[exports.red.type] = exports.red,
        _j[exports.blue.type] = exports.blue,
        _j
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = UnitFamilies;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/defaultUnitDrawingFunction", ["require", "exports", "src/App", "src/utility"], function (require, exports, App_44, utility_51) {
    "use strict";
    var defaultUnitDrawingFunction = function (unit, SFXParams) {
        var spriteTemplate = unit.template.sprite;
        var texture = PIXI.Texture.fromFrame(spriteTemplate.imageSrc);
        var container = new PIXI.Container;
        var props = {
            zDistance: 8,
            xDistance: 5,
            maxUnitsPerColumn: 7,
            degree: -0.5,
            rotationAngle: 70,
            scalingFactor: 0.04
        };
        var maxUnitsPerColumn = props.maxUnitsPerColumn;
        var isConvex = true;
        var degree = props.degree;
        if (degree < 0) {
            isConvex = !isConvex;
            degree = Math.abs(degree);
        }
        var image = App_44.default.images[spriteTemplate.imageSrc];
        var zDistance = props.zDistance;
        var xDistance = props.xDistance;
        var unitsToDraw;
        if (!unit.isSquadron) {
            unitsToDraw = 1;
        }
        else {
            var lastHealthDrawnAt = unit.lastHealthDrawnAt || unit.battleStats.lastHealthBeforeReceivingDamage;
            unit.lastHealthDrawnAt = unit.currentHealth;
            unitsToDraw = Math.round(lastHealthDrawnAt * 0.04) * (1 / unit.template.maxHealth);
            var heightRatio = 25 / image.height;
            heightRatio = Math.min(heightRatio, 1.25);
            maxUnitsPerColumn = Math.round(maxUnitsPerColumn * heightRatio);
            unitsToDraw = Math.round(unitsToDraw * heightRatio);
            zDistance *= (1 / heightRatio);
            unitsToDraw = utility_51.clamp(unitsToDraw, 1, maxUnitsPerColumn * 3);
        }
        var xMin, xMax, yMin, yMax;
        var rotationAngle = Math.PI / 180 * props.rotationAngle;
        var sA = Math.sin(rotationAngle);
        var cA = Math.cos(rotationAngle);
        var rotationMatrix = [
            1, 0, 0,
            0, cA, -sA,
            0, sA, cA
        ];
        var minXOffset = isConvex ? 0 : Math.sin(Math.PI / (maxUnitsPerColumn + 1));
        var yPadding = Math.min(SFXParams.height * 0.1, 30);
        var desiredHeight = SFXParams.height - yPadding;
        var averageHeight = image.height * (maxUnitsPerColumn / 2 * props.scalingFactor);
        var spaceToFill = desiredHeight - (averageHeight * maxUnitsPerColumn);
        zDistance = spaceToFill / maxUnitsPerColumn * 1.35;
        for (var i = unitsToDraw - 1; i >= 0; i--) {
            var column = Math.floor(i / maxUnitsPerColumn);
            var isLastColumn = column === Math.floor(unitsToDraw / maxUnitsPerColumn);
            var zPos;
            if (isLastColumn) {
                var maxUnitsInThisColumn = unitsToDraw % maxUnitsPerColumn;
                if (maxUnitsInThisColumn === 1) {
                    zPos = (maxUnitsPerColumn - 1) / 2;
                }
                else {
                    var positionInLastColumn = i % maxUnitsInThisColumn;
                    zPos = positionInLastColumn * ((maxUnitsPerColumn - 1) / (maxUnitsInThisColumn - 1));
                }
            }
            else {
                zPos = i % maxUnitsPerColumn;
            }
            var xOffset = Math.sin(Math.PI / (maxUnitsPerColumn + 1) * (zPos + 1));
            if (isConvex) {
                xOffset = 1 - xOffset;
            }
            xOffset -= minXOffset;
            var scale = 1 - zPos * props.scalingFactor;
            var scaledWidth = image.width * scale;
            var scaledHeight = image.height * scale;
            var x = xOffset * scaledWidth * degree + column * (scaledWidth + xDistance * scale);
            var y = (scaledHeight + zDistance * scale) * (maxUnitsPerColumn - zPos);
            var translated = utility_51.transformMat3({ x: x, y: y }, rotationMatrix);
            x = Math.round(translated.x);
            y = Math.round(translated.y);
            var sprite = new PIXI.Sprite(texture);
            sprite.scale.x = sprite.scale.y = scale;
            sprite.x = x;
            sprite.y = y;
            container.addChild(sprite);
        }
        SFXParams.triggerStart(container);
        return container;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultUnitDrawingFunction;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/battleCruiser", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_1, abilities_2) {
    "use strict";
    var battleCruiser = {
        type: "battleCruiser",
        displayName: "Battlecruiser",
        description: "Strong combat ship with low speed",
        archetype: UnitArchetypes.combat,
        families: [UnitFamilies.basic],
        cultures: [],
        sprite: {
            imageSrc: "battleCruiser.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 200,
        icon: "modules/defaultunits/img/icons/bc.png",
        maxHealth: 1,
        maxMovePoints: 1,
        visionRange: 1,
        detectionRange: -1,
        attributeLevels: {
            attack: 0.8,
            defence: 0.8,
            intelligence: 0.7,
            speed: 0.6
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_2.rangedAttack,
                    abilities_2.wholeRowAttack,
                    abilities_2.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_1.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = battleCruiser;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/commandShip", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities", "modules/common/passiveskilltemplates/passiveSkills"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_2, abilities_3, passiveSkills_2) {
    "use strict";
    var commandShip = {
        type: "commandShip",
        displayName: "Command Ship",
        description: "todo",
        archetype: UnitArchetypes.utility,
        families: [UnitFamilies.basic],
        cultures: [],
        sprite: {
            imageSrc: "shieldBoat.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: false,
        buildCost: 300,
        icon: "modules/defaultunits/img/icons/sh.png",
        maxHealth: 0.7,
        maxMovePoints: 1,
        visionRange: 1,
        detectionRange: -1,
        attributeLevels: {
            attack: 0.5,
            defence: 0.6,
            intelligence: 0.7,
            speed: 0.6
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_3.rangedAttack,
                    abilities_3.standBy
                ]
            }
        ],
        possiblePassiveSkills: [
            {
                flatProbability: 1,
                probabilityItems: [
                    passiveSkills_2.initialGuard
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_2.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = commandShip;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/redShip", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_3, abilities_4) {
    "use strict";
    var redShip = {
        type: "redShip",
        displayName: "Red ship",
        description: "Just used for testing unit distribution. (all the other units are just for testing something too)",
        archetype: UnitArchetypes.utility,
        families: [UnitFamilies.red],
        cultures: [],
        sprite: {
            imageSrc: "scout.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 200,
        icon: "modules/defaultunits/img/icons/sc.png",
        maxHealth: 0.6,
        maxMovePoints: 2,
        visionRange: 2,
        detectionRange: 0,
        attributeLevels: {
            attack: 0.5,
            defence: 0.5,
            intelligence: 0.8,
            speed: 0.7
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_4.rangedAttack,
                    abilities_4.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_3.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = redShip;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/stealthShip", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_4, abilities_5) {
    "use strict";
    var stealthShip = {
        type: "stealthShip",
        displayName: "Stealth Ship",
        description: "Weak ship that is undetectable by regular vision",
        archetype: UnitArchetypes.scouting,
        families: [UnitFamilies.debug],
        cultures: [],
        sprite: {
            imageSrc: "scout.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 500,
        icon: "modules/defaultunits/img/icons/sc.png",
        maxHealth: 0.6,
        maxMovePoints: 1,
        visionRange: 1,
        detectionRange: -1,
        isStealthy: true,
        attributeLevels: {
            attack: 0.5,
            defence: 0.5,
            intelligence: 0.8,
            speed: 0.7
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_5.rangedAttack,
                    abilities_5.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_4.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = stealthShip;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/blueShip", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_5, abilities_6) {
    "use strict";
    var blueShip = {
        type: "blueShip",
        displayName: "Blue ship",
        description: "Just used for testing unit distribution. (all the other units are just for testing something too)",
        archetype: UnitArchetypes.utility,
        families: [UnitFamilies.blue],
        cultures: [],
        sprite: {
            imageSrc: "scout.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 200,
        icon: "modules/defaultunits/img/icons/sc.png",
        maxHealth: 0.6,
        maxMovePoints: 2,
        visionRange: 2,
        detectionRange: 0,
        attributeLevels: {
            attack: 0.5,
            defence: 0.5,
            intelligence: 0.8,
            speed: 0.7
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_6.rangedAttack,
                    abilities_6.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_5.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = blueShip;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/debugShip", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities", "modules/common/passiveskilltemplates/passiveSkills"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_6, abilities_7, passiveSkills_3) {
    "use strict";
    var debugShip = {
        type: "debugShip",
        displayName: "Debug Ship",
        description: "debug",
        archetype: UnitArchetypes.combat,
        families: [UnitFamilies.debug],
        cultures: [],
        sprite: {
            imageSrc: "debugShip.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: false,
        buildCost: 0,
        icon: "modules/defaultunits/img/icons/f.png",
        maxHealth: 1,
        maxMovePoints: 999,
        visionRange: 1,
        detectionRange: -1,
        attributeLevels: {
            attack: 9,
            defence: 9,
            intelligence: 9,
            speed: 9
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_7.debugAbility,
                    abilities_7.rangedAttack,
                    abilities_7.standBy
                ]
            },
            {
                flatProbability: 1,
                probabilityItems: [
                    {
                        weight: 0.33,
                        probabilityItems: [abilities_7.bombAttack]
                    },
                    {
                        weight: 0.33,
                        probabilityItems: [abilities_7.boardingHook]
                    },
                    {
                        weight: 0.33,
                        probabilityItems: [abilities_7.guardRow]
                    }
                ]
            }
        ],
        possiblePassiveSkills: [
            {
                flatProbability: 1,
                probabilityItems: [
                    {
                        weight: 0.33,
                        probabilityItems: [passiveSkills_3.autoHeal]
                    },
                    {
                        weight: 0.33,
                        probabilityItems: [passiveSkills_3.warpJammer]
                    },
                    {
                        weight: 0.33,
                        probabilityItems: [passiveSkills_3.medic]
                    }
                ]
            }
        ],
        learnableAbilities: [
            abilities_7.guardRow,
            abilities_7.closeAttack
        ],
        unitDrawingFN: defaultUnitDrawingFunction_6.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = debugShip;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/scout", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_7, abilities_8) {
    "use strict";
    var scout = {
        type: "scout",
        displayName: "Scout",
        description: "Weak in combat, but has high vision and can reveal stealthy units and details of units in same star",
        archetype: UnitArchetypes.scouting,
        families: [UnitFamilies.basic],
        cultures: [],
        sprite: {
            imageSrc: "scout.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 200,
        icon: "modules/defaultunits/img/icons/sc.png",
        maxHealth: 0.6,
        maxMovePoints: 2,
        visionRange: 2,
        detectionRange: 0,
        attributeLevels: {
            attack: 0.5,
            defence: 0.5,
            intelligence: 0.8,
            speed: 0.7
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_8.rangedAttack,
                    abilities_8.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_7.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = scout;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/bomberSquadron", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_8, abilities_9) {
    "use strict";
    var bomberSquadron = {
        type: "bomberSquadron",
        displayName: "Bomber Squadron",
        description: "Can damage multiple targets with special bomb attack",
        archetype: UnitArchetypes.combat,
        families: [UnitFamilies.basic],
        cultures: [],
        sprite: {
            imageSrc: "bomber.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 200,
        icon: "modules/defaultunits/img/icons/fb.png",
        maxHealth: 0.5,
        maxMovePoints: 1,
        visionRange: 1,
        detectionRange: -1,
        attributeLevels: {
            attack: 0.7,
            defence: 0.4,
            intelligence: 0.5,
            speed: 0.8
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_9.rangedAttack,
                    abilities_9.bombAttack,
                    abilities_9.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_8.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = bomberSquadron;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/fighterSquadron", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_9, abilities_10) {
    "use strict";
    var fighterSquadron = {
        type: "fighterSquadron",
        displayName: "Fighter Squadron",
        description: "Fast and cheap unit with good attack and speed but low defence",
        archetype: UnitArchetypes.combat,
        families: [UnitFamilies.basic],
        cultures: [],
        sprite: {
            imageSrc: "fighter.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 100,
        icon: "modules/defaultunits/img/icons/fa.png",
        maxHealth: 0.7,
        maxMovePoints: 2,
        visionRange: 1,
        detectionRange: -1,
        attributeLevels: {
            attack: 0.8,
            defence: 0.6,
            intelligence: 0.4,
            speed: 1
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_10.rangedAttack,
                    abilities_10.closeAttack,
                    abilities_10.standBy
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_9.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = fighterSquadron;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/templates/shieldBoat", ["require", "exports", "modules/defaultunits/unitArchetypes", "modules/defaultunits/unitFamilies", "modules/defaultunits/defaultUnitDrawingFunction", "modules/common/abilitytemplates/abilities", "modules/common/passiveskilltemplates/passiveSkills"], function (require, exports, UnitArchetypes, UnitFamilies, defaultUnitDrawingFunction_10, abilities_11, passiveSkills_4) {
    "use strict";
    var shieldBoat = {
        type: "shieldBoat",
        displayName: "Shield Boat",
        description: "Great defence and ability to protect allies in same row",
        archetype: UnitArchetypes.defence,
        families: [UnitFamilies.basic],
        cultures: [],
        sprite: {
            imageSrc: "shieldBoat.png",
            anchor: { x: 0.5, y: 0.5 }
        },
        isSquadron: true,
        buildCost: 200,
        icon: "modules/defaultunits/img/icons/sh.png",
        maxHealth: 0.9,
        maxMovePoints: 1,
        visionRange: 1,
        detectionRange: -1,
        attributeLevels: {
            attack: 0.5,
            defence: 0.9,
            intelligence: 0.6,
            speed: 0.4
        },
        possibleAbilities: [
            {
                flatProbability: 1,
                probabilityItems: [
                    abilities_11.rangedAttack,
                    abilities_11.guardRow,
                    abilities_11.standBy
                ]
            }
        ],
        possiblePassiveSkills: [
            {
                flatProbability: 1,
                probabilityItems: [
                    passiveSkills_4.initialGuard
                ]
            }
        ],
        unitDrawingFN: defaultUnitDrawingFunction_10.default
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = shieldBoat;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
});
define("modules/defaultunits/UnitTemplates", ["require", "exports", "modules/defaultunits/templates/battleCruiser", "modules/defaultunits/templates/commandShip", "modules/defaultunits/templates/redShip", "modules/defaultunits/templates/stealthShip", "modules/defaultunits/templates/blueShip", "modules/defaultunits/templates/debugShip", "modules/defaultunits/templates/scout", "modules/defaultunits/templates/bomberSquadron", "modules/defaultunits/templates/fighterSquadron", "modules/defaultunits/templates/shieldBoat"], function (require, exports, battleCruiser_1, commandShip_1, redShip_1, stealthShip_1, blueShip_1, debugShip_1, scout_1, bomberSquadron_1, fighterSquadron_1, shieldBoat_1) {
    "use strict";
    var UnitTemplates = (_k = {},
        _k[battleCruiser_1.default.type] = battleCruiser_1.default,
        _k[commandShip_1.default.type] = commandShip_1.default,
        _k[redShip_1.default.type] = redShip_1.default,
        _k[stealthShip_1.default.type] = stealthShip_1.default,
        _k[blueShip_1.default.type] = blueShip_1.default,
        _k[debugShip_1.default.type] = debugShip_1.default,
        _k[scout_1.default.type] = scout_1.default,
        _k[bomberSquadron_1.default.type] = bomberSquadron_1.default,
        _k[fighterSquadron_1.default.type] = fighterSquadron_1.default,
        _k[shieldBoat_1.default.type] = shieldBoat_1.default,
        _k
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = UnitTemplates;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultunits/defaultUnits", ["require", "exports", "modules/defaultunits/UnitTemplates", "modules/defaultunits/unitFamilies", "modules/defaultunits/unitArchetypes", "src/cacheSpriteSheetAsImages"], function (require, exports, UnitTemplates_1, UnitFamilies_1, UnitArchetypes_1, cacheSpriteSheetAsImages_1) {
    "use strict";
    var defaultUnits = {
        key: "defaultUnits",
        metaData: {
            name: "Default units",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        loadAssets: function (onLoaded) {
            var loader = new PIXI.loaders.Loader();
            var spriteSheetKey = "units";
            loader.add(spriteSheetKey, "modules/defaultunits/img/sprites/units.json");
            loader.add("explosion", "modules/common/battlesfxfunctions/img/explosion.json");
            loader.add("modules/common/battlesfxfunctions/img/rocket.png");
            loader.load(function (loader) {
                var json = loader.resources[spriteSheetKey].data;
                var image = loader.resources[spriteSheetKey + "_image"].data;
                cacheSpriteSheetAsImages_1.default(json, image);
                onLoaded();
            });
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(UnitTemplates_1.default, "Units");
            moduleData.copyTemplates(UnitFamilies_1.default, "UnitFamilies");
            moduleData.copyTemplates(UnitArchetypes_1.default, "UnitArchetypes");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultUnits;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("src/shaders/Nebula", ["require", "exports"], function (require, exports) {
    "use strict";
    var Nebula = (function (_super) {
        __extends(Nebula, _super);
        function Nebula(initialUniformValues) {
            var uniforms = Nebula.makeUniformsObject(initialUniformValues);
            _super.call(this, null, sourceLines.join("\n"), uniforms);
        }
        Nebula.makeUniformsObject = function (initialValues) {
            if (initialValues === void 0) { initialValues = {}; }
            return ({
                baseColor: { type: "3fv", value: initialValues.baseColor },
                cloudLightness: { type: "1f", value: initialValues.cloudLightness },
                coverage: { type: "1f", value: initialValues.coverage },
                diffusion: { type: "1f", value: initialValues.diffusion },
                highlightA: { type: "1f", value: initialValues.highlightA },
                highlightB: { type: "1f", value: initialValues.highlightB },
                highlightColor: { type: "3fv", value: initialValues.highlightColor },
                overlayColor: { type: "3fv", value: initialValues.overlayColor },
                scale: { type: "1f", value: initialValues.scale },
                seed: { type: "2fv", value: initialValues.seed },
                streakLightness: { type: "1f", value: initialValues.streakLightness },
                streakiness: { type: "1f", value: initialValues.streakiness },
            });
        };
        Nebula.prototype.setUniformValues = function (values) {
            for (var key in values) {
                this.uniforms[key].value = values[key];
            }
        };
        return Nebula;
    }(PIXI.AbstractFilter));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = Nebula;
    var sourceLines = [
        "precision mediump float;",
        "",
        "uniform vec3 baseColor;",
        "uniform vec3 overlayColor;",
        "uniform vec3 highlightColor;",
        "",
        "uniform float coverage;",
        "",
        "uniform float scale;",
        "",
        "uniform float diffusion;",
        "uniform float streakiness;",
        "",
        "uniform float streakLightness;",
        "uniform float cloudLightness;",
        "",
        "uniform float highlightA;",
        "uniform float highlightB;",
        "",
        "uniform vec2 seed;",
        "",
        "/*",
        "const vec3 baseColor = vec3(1.0, 0.0, 0.0);",
        "const vec3 overlayColor = vec3(0.0, 0.0, 1.0);",
        "const vec3 highlightColor = vec3(1.0, 1.0, 1.0);",
        "",
        "const float coverage = 0.3;",
        "const float coverage2 = coverage / 2.0;",
        "",
        "const float scale = 4.0;",
        "",
        "const float diffusion = 3.0;",
        "const float streakiness = 2.0;",
        "",
        "const float streakLightness = 1.0;",
        "const float cloudLightness = 1.0;",
        "",
        "const float highlightA = 0.9;",
        "const float highlightB = 2.2;",
        "",
        "const vec2 seed = vec2(69.0, 42.0);",
        "*/",
        "",
        "const int sharpness = 6;",
        "",
        "float hash(vec2 p)",
        "{",
        "  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));",
        "}",
        "",
        "float noise(vec2 x)",
        "{",
        "  vec2 i = floor(x);",
        "  vec2 f = fract(x);",
        "  float a = hash(i);",
        "  float b = hash(i + vec2(1.0, 0.0));",
        "  float c = hash(i + vec2(0.0, 1.0));",
        "  float d = hash(i + vec2(1.0, 1.0));",
        "  vec2 u = f * f * (3.0 - 2.0 * f);",
        "  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;",
        "}",
        "",
        "float fbm(vec2 x)",
        "{",
        "  float v = 0.0;",
        "  float a = 0.5;",
        "  vec2 shift = vec2(100);",
        "  mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));",
        "  for (int i = 0; i < sharpness; ++i)",
        "  {",
        "    v += a * noise(x);",
        "    x = rot * x * 2.0 + shift;",
        "    a *= 0.5;",
        "    }",
        "  return v;",
        "}",
        "",
        "float relativeValue(float v, float min, float max)",
        "{",
        "  return (v - min) / (max - min);",
        "}",
        "",
        "float displace(vec2 pos, out vec2 q)",
        "{",
        "  q = vec2(fbm(pos),",
        "    fbm(pos + vec2(23.3, 46.7)));",
        "  return fbm(pos + vec2(q.x * streakiness, q.y));",
        "}",
        "",
        "vec3 colorLayer(vec2 pos, vec3 color)",
        "{",
        "  float v = fbm(pos);",
        "  return mix(vec3(0.0), color, v);",
        "}",
        "",
        "vec3 nebula(vec2 pos, out float volume)",
        "{",
        "  vec2 on = vec2(0.0);",
        "",
        "  volume = displace(pos, on);",
        "  volume = relativeValue(volume, coverage, streakLightness);",
        "  volume += relativeValue(fbm(pos), coverage, cloudLightness);",
        "  volume = pow(volume, diffusion);",
        "",
        "  vec3 c = colorLayer(pos + vec2(42.0, 6.9), baseColor);",
        "  c = mix(c, overlayColor, dot(on.x, on.y));",
        "  c = mix(c, highlightColor, volume *",
        "    smoothstep(highlightA, highlightB, abs(on.x)+abs(on.y)) );",
        "",
        "",
        "  return c * volume;",
        "}",
        "",
        "float star(vec2 pos, float volume)",
        "{",
        "  float genValue = hash(pos);",
        "",
        "  genValue -= volume * 0.01;",
        "",
        "  float color = 0.0;",
        "",
        "  if (genValue < 0.001)",
        "  {",
        "    float r = hash(pos + vec2(4.20, 6.9));",
        "    color = r;",
        "    return color;",
        "  }",
        "  else",
        "  {",
        "    return color;",
        "  }",
        "}",
        "",
        "void main(void)",
        "{",
        "  vec2 pos = gl_FragCoord.xy / 50.0 / scale;",
        "  pos += seed;",
        "  float volume = 0.0;",
        "  vec3 c = nebula(pos, volume);",
        "  c += vec3(star(pos, volume));",
        "",
        "  gl_FragColor = vec4(c, 1.0);",
        "}",
    ];
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultbackgrounds/drawNebula", ["require", "exports", "src/shaders/Nebula", "src/colorGeneration", "src/utility"], function (require, exports, Nebula_1, colorGeneration_4, utility_52) {
    "use strict";
    function drawNebula(seed, renderer) {
        var oldRng = Math.random;
        Math.random = RNG.prototype.uniform.bind(new RNG(seed));
        var nebulaColorScheme = colorGeneration_4.generateColorScheme();
        var filter = new Nebula_1.default({
            baseColor: nebulaColorScheme.main.getRGB(),
            overlayColor: nebulaColorScheme.secondary.getRGB(),
            highlightColor: [1.0, 1.0, 1.0],
            coverage: utility_52.randRange(0.28, 0.32),
            scale: utility_52.randRange(4, 8),
            diffusion: utility_52.randRange(1.5, 3.0),
            streakiness: utility_52.randRange(1.5, 2.5),
            streakLightness: utility_52.randRange(1, 1.2),
            cloudLightness: utility_52.randRange(1, 1.2),
            highlightA: 0.9,
            highlightB: 2.2,
            seed: [Math.random() * 100, Math.random() * 100]
        });
        var filterContainer = new PIXI.Container();
        filterContainer.filterArea = new PIXI.Rectangle(0, 0, renderer.width, renderer.height);
        filterContainer.filters = [filter];
        var texture = filterContainer.generateTexture(renderer, PIXI.SCALE_MODES.DEFAULT, 1, filterContainer.filterArea);
        var sprite = new PIXI.Sprite(texture);
        filterContainer.filters = null;
        filterContainer = null;
        return sprite;
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = drawNebula;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultbackgrounds/defaultBackgrounds", ["require", "exports", "modules/defaultbackgrounds/drawNebula"], function (require, exports, drawNebula_1) {
    "use strict";
    var defaultBackgrounds = {
        key: "defaultBackgrounds",
        metaData: {
            name: "Default backgrounds",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            if (!moduleData.mapBackgroundDrawingFunction) {
                moduleData.mapBackgroundDrawingFunction = drawNebula_1.default;
            }
            if (!moduleData.starBackgroundDrawingFunction) {
                moduleData.starBackgroundDrawingFunction = drawNebula_1.default;
            }
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultBackgrounds;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/debugSectors", ["require", "exports", "src/Color"], function (require, exports, Color_6) {
    "use strict";
    var debugSectors = {
        key: "debugSectors",
        displayName: "Sectors (debug)",
        interactive: false,
        alpha: 0.5,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            if (!points[0].mapGenData || !points[0].mapGenData.sector) {
                return doc;
            }
            var sectorIds = {};
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                if (star.mapGenData && star.mapGenData.sector) {
                    sectorIds[star.mapGenData.sector.id] = true;
                }
            }
            var sectorsCount = Object.keys(sectorIds).length;
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var sector = star.mapGenData.sector;
                var hue = sector.id / sectorsCount;
                var color = Color_6.default.fromHSL(hue, 0.8, 0.5).getHex();
                var poly = new PIXI.Polygon(star.voronoiCell.vertices);
                var gfx = new PIXI.Graphics();
                gfx.beginFill(color, 1);
                gfx.drawShape(poly);
                gfx.endFill();
                doc.addChild(gfx);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = debugSectors;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/nonFillerStars", ["require", "exports", "src/eventManager"], function (require, exports, eventManager_41) {
    "use strict";
    var nonFillerStars = {
        key: "nonFillerStars",
        displayName: "Stars",
        interactive: true,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            var mouseDownFN = function (event) {
                eventManager_41.default.dispatchEvent("mouseDown", event, this);
            };
            var mouseUpFN = function (event) {
                eventManager_41.default.dispatchEvent("mouseUp", event);
            };
            var onClickFN = function (star) {
                eventManager_41.default.dispatchEvent("starClick", star);
            };
            var mouseOverFN = function (star) {
                eventManager_41.default.dispatchEvent("hoverStar", star);
            };
            var mouseOutFN = function (event) {
                eventManager_41.default.dispatchEvent("clearHover");
            };
            var touchStartFN = function (event) {
                eventManager_41.default.dispatchEvent("touchStart", event);
            };
            var touchEndFN = function (event) {
                eventManager_41.default.dispatchEvent("touchEnd", event);
            };
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var starSize = 1;
                if (star.buildings["defence"]) {
                    starSize += star.buildings["defence"].length * 2;
                }
                var gfx = new PIXI.Graphics();
                if (!star.owner.isIndependent) {
                    gfx.lineStyle(starSize / 2, star.owner.color.getHex(), 1);
                }
                gfx.beginFill(0xFFFFF0);
                gfx.drawCircle(star.x, star.y, starSize);
                gfx.endFill();
                gfx.interactive = true;
                gfx.hitArea = new PIXI.Polygon(star.voronoiCell.vertices);
                var boundMouseDown = mouseDownFN.bind(star);
                var gfxClickFN = function (event) {
                    var originalEvent = event.data.originalEvent;
                    if (originalEvent.button)
                        return;
                    onClickFN(this);
                }.bind(star);
                gfx.on("mousedown", boundMouseDown);
                gfx.on("mouseup", mouseUpFN);
                gfx.on("rightdown", boundMouseDown);
                gfx.on("rightup", mouseUpFN);
                gfx.on("click", gfxClickFN);
                gfx.on("mouseover", mouseOverFN.bind(gfx, star));
                gfx.on("mouseout", mouseOutFN);
                gfx.on("tap", gfxClickFN);
                doc.addChild(gfx);
            }
            doc.interactive = true;
            doc.on("touchstart", touchStartFN);
            doc.on("touchend", touchEndFN);
            doc.on("touchmove", function (event) {
                var local = event.data.getLocalPosition(doc);
                var starAtLocal = map.voronoi.getStarAtPoint(local);
                if (starAtLocal) {
                    eventManager_41.default.dispatchEvent("hoverStar", starAtLocal);
                }
            });
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = nonFillerStars;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/playerInfluence", ["require", "exports", "src/Color", "src/mapai/MapEvaluator"], function (require, exports, Color_7, MapEvaluator_2) {
    "use strict";
    var playerInfluence = {
        key: "playerInfluence",
        displayName: "Influence",
        interactive: false,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            var mapEvaluator = new MapEvaluator_2.default(map, this.player);
            var influenceByStar = mapEvaluator.buildPlayerInfluenceMap(this.player);
            var minInfluence, maxInfluence;
            for (var starId in influenceByStar) {
                var influence = influenceByStar[starId];
                if (!isFinite(minInfluence) || influence < minInfluence) {
                    minInfluence = influence;
                }
                if (!isFinite(maxInfluence) || influence > maxInfluence) {
                    maxInfluence = influence;
                }
            }
            function getRelativeValue(min, max, value) {
                var difference = max - min;
                if (difference < 1)
                    difference = 1;
                var threshhold = difference / 10;
                if (threshhold < 1)
                    threshhold = 1;
                var relative = (Math.round(value / threshhold) * threshhold - min) / (difference);
                return relative;
            }
            var colorIndexes = {};
            function getRelativeColor(min, max, value) {
                if (!colorIndexes[value]) {
                    if (value < 0)
                        value = 0;
                    else if (value > 1)
                        value = 1;
                    var deviation = Math.abs(0.5 - value) * 2;
                    var hue = 110 * value;
                    var saturation = 0.5 + 0.2 * deviation;
                    var lightness = 0.6 + 0.25 * deviation;
                    colorIndexes[value] = Color_7.default.fromHSL(hue / 360, saturation, lightness / 2).getHex();
                }
                return colorIndexes[value];
            }
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var influence = influenceByStar[star.id];
                if (!influence)
                    continue;
                var relativeInfluence = getRelativeValue(minInfluence, maxInfluence, influence);
                var color = getRelativeColor(minInfluence, maxInfluence, relativeInfluence);
                var poly = new PIXI.Polygon(star.voronoiCell.vertices);
                var gfx = new PIXI.Graphics();
                gfx.beginFill(color, 0.6);
                gfx.drawShape(poly);
                gfx.endFill;
                doc.addChild(gfx);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = playerInfluence;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/starLinks", ["require", "exports"], function (require, exports) {
    "use strict";
    var starLinks = {
        key: "starLinks",
        displayName: "Links",
        interactive: false,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var gfx = new PIXI.Graphics();
            doc.addChild(gfx);
            gfx.lineStyle(1, 0xCCCCCC, 0.6);
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            var starsFullyConnected = {};
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                if (starsFullyConnected[star.id])
                    continue;
                starsFullyConnected[star.id] = true;
                for (var j = 0; j < star.linksTo.length; j++) {
                    gfx.moveTo(star.x, star.y);
                    gfx.lineTo(star.linksTo[j].x, star.linksTo[j].y);
                }
                for (var j = 0; j < star.linksFrom.length; j++) {
                    gfx.moveTo(star.linksFrom[j].x, star.linksFrom[j].y);
                    gfx.lineTo(star.x, star.y);
                }
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = starLinks;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/nonFillerVoronoiLines", ["require", "exports"], function (require, exports) {
    "use strict";
    var nonFillerVoronoiLines = {
        key: "nonFillerVoronoiLines",
        displayName: "Star borders",
        interactive: false,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var gfx = new PIXI.Graphics();
            doc.addChild(gfx);
            gfx.lineStyle(1, 0xA0A0A0, 0.5);
            var visible = this.player ? this.player.getRevealedStars() : null;
            var lines = map.voronoi.getNonFillerVoronoiLines(visible);
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                gfx.moveTo(line.va.x, line.va.y);
                gfx.lineTo(line.vb.x, line.vb.y);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = nonFillerVoronoiLines;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/starOwners", ["require", "exports"], function (require, exports) {
    "use strict";
    var starOwners = {
        key: "starOwners",
        displayName: "Star owners",
        interactive: false,
        alpha: 0.5,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var occupier = star.getSecondaryController();
                if (!star.owner || (!occupier && star.owner.colorAlpha === 0))
                    continue;
                var poly = new PIXI.Polygon(star.voronoiCell.vertices);
                var gfx = new PIXI.Graphics();
                var alpha = 1;
                if (isFinite(star.owner.colorAlpha))
                    alpha *= star.owner.colorAlpha;
                gfx.beginFill(star.owner.color.getHex(), alpha);
                gfx.drawShape(poly);
                gfx.endFill();
                if (occupier) {
                    var container = new PIXI.Container();
                    doc.addChild(container);
                    var mask = new PIXI.Graphics();
                    mask.isMask = true;
                    mask.beginFill(0);
                    mask.drawShape(poly);
                    mask.endFill();
                    container.addChild(gfx);
                    container.addChild(mask);
                    gfx.filters = [this.getOccupationShader(star.owner, occupier)];
                    container.mask = mask;
                }
                else {
                    doc.addChild(gfx);
                }
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = starOwners;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/fogOfWar", ["require", "exports"], function (require, exports) {
    "use strict";
    var fogOfWar = {
        key: "fogOfWar",
        displayName: "Fog of war",
        interactive: false,
        alpha: 0.35,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            if (!this.player)
                return doc;
            var points = this.player.getRevealedButNotVisibleStars();
            if (!points || points.length < 1)
                return doc;
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var sprite = this.getFowSpriteForStar(star);
                doc.addChild(sprite);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = fogOfWar;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("src/borderPolygon", ["require", "exports", "src/options", "src/utility"], function (require, exports, Options_7, utility_53) {
    "use strict";
    function starsOnlyShareNarrowBorder(a, b) {
        var minBorderWidth = Options_7.default.display.borderWidth * 2;
        var edge = a.getEdgeWith(b);
        if (!edge) {
            return false;
        }
        var edgeLength = Math.abs(edge.va.x - edge.vb.x) + Math.abs(edge.va.y - edge.vb.y);
        if (edgeLength < minBorderWidth) {
            var sharedNeighbors = a.getSharedNeighborsWith(b);
            var sharedOwnedNeighbors = sharedNeighbors.filter(function (sharedNeighbor) {
                return sharedNeighbor.owner === a.owner;
            });
            return sharedOwnedNeighbors.length === 0;
        }
        else {
            return false;
        }
    }
    exports.starsOnlyShareNarrowBorder = starsOnlyShareNarrowBorder;
    function getBorderingHalfEdges(stars) {
        var borderingHalfEdges = [];
        function getHalfEdgeOppositeSite(halfEdge) {
            return halfEdge.edge.lSite === halfEdge.site ?
                halfEdge.edge.rSite : halfEdge.edge.lSite;
        }
        function halfEdgeIsBorder(halfEdge) {
            var oppositeSite = getHalfEdgeOppositeSite(halfEdge);
            var isBorderWithOtherOwner = !oppositeSite || !oppositeSite.owner || (oppositeSite.owner !== halfEdge.site.owner);
            var isBorderWithSameOwner = false;
            if (!isBorderWithOtherOwner) {
                isBorderWithSameOwner = starsOnlyShareNarrowBorder(halfEdge.site, oppositeSite) ||
                    halfEdge.site.getDistanceToStar(oppositeSite) > 3;
            }
            return isBorderWithOtherOwner || isBorderWithSameOwner;
        }
        function halfEdgeSharesOwner(halfEdge) {
            var oppositeSite = getHalfEdgeOppositeSite(halfEdge);
            var sharesOwner = Boolean(oppositeSite) && Boolean(oppositeSite.owner) &&
                (oppositeSite.owner === halfEdge.site.owner);
            return sharesOwner && !starsOnlyShareNarrowBorder(halfEdge.site, oppositeSite);
        }
        function getContiguousHalfEdgeBetweenSharedSites(sharedEdge) {
            var contiguousEdgeEndPoint = sharedEdge.getStartpoint();
            var oppositeSite = getHalfEdgeOppositeSite(sharedEdge);
            for (var i_1 = 0; i_1 < oppositeSite.voronoiCell.halfedges.length; i_1++) {
                var halfEdge = oppositeSite.voronoiCell.halfedges[i_1];
                if (halfEdge.getStartpoint() === contiguousEdgeEndPoint) {
                    return halfEdge;
                }
            }
            return false;
        }
        var startEdge;
        var star;
        for (var i_2 = 0; i_2 < stars.length; i_2++) {
            if (star)
                break;
            for (var j = 0; j < stars[i_2].voronoiCell.halfedges.length; j++) {
                var halfEdge = stars[i_2].voronoiCell.halfedges[j];
                if (halfEdgeIsBorder(halfEdge)) {
                    star = stars[i_2];
                    startEdge = halfEdge;
                    break;
                }
            }
        }
        if (!star)
            throw new Error("Couldn't find starting location for border polygon");
        var hasProcessedStartEdge = false;
        var contiguousEdge = null;
        for (var j = 0; j < stars.length * 40; j++) {
            var indexShift = 0;
            for (var _i = 0; _i < star.voronoiCell.halfedges.length; _i++) {
                if (!hasProcessedStartEdge) {
                    contiguousEdge = startEdge;
                }
                if (contiguousEdge) {
                    indexShift = star.voronoiCell.halfedges.indexOf(contiguousEdge);
                    contiguousEdge = null;
                }
                var i = (_i + indexShift) % (star.voronoiCell.halfedges.length);
                var halfEdge = star.voronoiCell.halfedges[i];
                if (halfEdgeIsBorder(halfEdge)) {
                    borderingHalfEdges.push({
                        star: star,
                        halfEdge: halfEdge
                    });
                    if (!startEdge) {
                        startEdge = halfEdge;
                    }
                    else if (halfEdge === startEdge) {
                        if (!hasProcessedStartEdge) {
                            hasProcessedStartEdge = true;
                        }
                        else {
                            return borderingHalfEdges;
                        }
                    }
                }
                else if (halfEdgeSharesOwner(halfEdge)) {
                    contiguousEdge = getContiguousHalfEdgeBetweenSharedSites(halfEdge);
                    star = contiguousEdge.site;
                    break;
                }
            }
        }
        throw new Error("getHalfEdgesConnectingStars got stuck in infinite loop when star id = " + star.id);
    }
    exports.getBorderingHalfEdges = getBorderingHalfEdges;
    function joinPointsWithin(points, maxDistance) {
        for (var i = points.length - 2; i >= 0; i--) {
            var x1 = points[i].x;
            var y1 = points[i].y;
            var x2 = points[i + 1].x;
            var y2 = points[i + 1].y;
            if (Math.abs(x1 - x2) + Math.abs(y1 - y2) < maxDistance) {
                var newPoint = {
                    x: (x1 + x2) / 2,
                    y: (y1 + y2) / 2
                };
                points.splice(i, 2, newPoint);
            }
        }
    }
    exports.joinPointsWithin = joinPointsWithin;
    function convertHalfEdgeDataToOffset(halfEdgeData) {
        var convertedToPoints = halfEdgeData.map(function (data) {
            var v1 = data.halfEdge.getStartpoint();
            return ({
                x: v1.x,
                y: v1.y
            });
        });
        joinPointsWithin(convertedToPoints, Options_7.default.display.borderWidth / 2);
        var offset = new Offset();
        offset.arcSegments(0);
        var convertedToOffset = offset.data(convertedToPoints).padding(Options_7.default.display.borderWidth / 2);
        return convertedToOffset;
    }
    exports.convertHalfEdgeDataToOffset = convertHalfEdgeDataToOffset;
    function getRevealedBorderEdges(revealedStars, voronoiInfo) {
        var polyLines = [];
        var processedStarsById = {};
        for (var ii = 0; ii < revealedStars.length; ii++) {
            var star = revealedStars[ii];
            if (processedStarsById[star.id]) {
                continue;
            }
            if (!star.owner.isIndependent) {
                var ownedIsland = star.getIslandForQualifier(function (a, b) {
                    return (a.owner === b.owner && !starsOnlyShareNarrowBorder(a, b));
                });
                var currentPolyLine = [];
                var halfEdgesDataForIsland = getBorderingHalfEdges(ownedIsland);
                var offsetted = convertHalfEdgeDataToOffset(halfEdgesDataForIsland);
                for (var j_1 = 0; j_1 < offsetted.length; j_1++) {
                    var point = offsetted[j_1];
                    var nextPoint = offsetted[(j_1 + 1) % offsetted.length];
                    var edgeCenter = {
                        x: utility_53.clamp((point.x + nextPoint.x) / 2, voronoiInfo.bounds.x1, voronoiInfo.bounds.x2),
                        y: utility_53.clamp((point.y + nextPoint.y) / 2, voronoiInfo.bounds.y1, voronoiInfo.bounds.y2)
                    };
                    var pointStar = point.star || voronoiInfo.getStarAtPoint(edgeCenter);
                    if (!pointStar) {
                        pointStar = voronoiInfo.getStarAtPoint(point);
                        if (!pointStar) {
                            pointStar = voronoiInfo.getStarAtPoint(nextPoint);
                        }
                    }
                    processedStarsById[pointStar.id] = true;
                    point.star = pointStar;
                }
                var startIndex = 0;
                for (var j_2 = 0; j_2 < offsetted.length; j_2++) {
                    var currPoint = offsetted[j_2];
                    var prevPoint = offsetted[(j_2 === 0 ? offsetted.length - 1 : j_2 - 1)];
                    if (revealedStars.indexOf(currPoint.star) !== -1 && revealedStars.indexOf(prevPoint.star) === -1) {
                        startIndex = j_2;
                    }
                }
                for (var _j = startIndex; _j < offsetted.length + startIndex; _j++) {
                    var j = _j % offsetted.length;
                    var point = offsetted[j];
                    if (revealedStars.indexOf(point.star) === -1) {
                        if (currentPolyLine.length > 1) {
                            currentPolyLine.push(point);
                            polyLines.push(currentPolyLine);
                            currentPolyLine = [];
                        }
                    }
                    else {
                        currentPolyLine.push(point);
                    }
                }
                if (currentPolyLine.length > 1) {
                    polyLines.push(currentPolyLine);
                }
            }
        }
        var polyLinesData = [];
        for (var i = 0; i < polyLines.length; i++) {
            var polyLine = polyLines[i];
            var isClosed = utility_53.pointsEqual(polyLine[0], polyLine[polyLine.length - 1]);
            if (isClosed)
                polyLine.pop();
            for (var j_3 = 0; j_3 < polyLine.length; j_3++) {
                polyLine[j_3].x += (j_3 % 2) * 0.1;
                polyLine[j_3].y += (j_3 % 2) * 0.1;
            }
            polyLinesData.push({
                points: polyLine,
                isClosed: isClosed
            });
        }
        return polyLinesData;
    }
    exports.getRevealedBorderEdges = getRevealedBorderEdges;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/ownerBorders", ["require", "exports", "src/options", "src/borderPolygon"], function (require, exports, options_9, borderPolygon_1) {
    "use strict";
    var ownerBorders = {
        key: "ownerBorders",
        displayName: "Owner borders",
        interactive: false,
        alpha: 0.7,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            if (options_9.default.display.borderWidth <= 0) {
                return doc;
            }
            var revealedStars = this.player.getRevealedStars();
            var borderEdges = borderPolygon_1.getRevealedBorderEdges(revealedStars, map.voronoi);
            for (var i = 0; i < borderEdges.length; i++) {
                var gfx = new PIXI.Graphics();
                doc.addChild(gfx);
                var polyLineData = borderEdges[i];
                var player = polyLineData.points[0].star.owner;
                gfx.lineStyle(options_9.default.display.borderWidth, player.secondaryColor, 1);
                var polygon = new PIXI.Polygon(polyLineData.points);
                polygon.closed = polyLineData.isClosed;
                gfx.drawShape(polygon);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = ownerBorders;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/maplayertemplates/starIncome", ["require", "exports", "src/Color"], function (require, exports, Color_8) {
    "use strict";
    var starIncome = {
        key: "starIncome",
        displayName: "Income",
        interactive: false,
        drawingFunction: function (map) {
            var doc = new PIXI.Container();
            var points;
            if (!this.player) {
                points = map.stars;
            }
            else {
                points = this.player.getRevealedStars();
            }
            var incomeBounds = map.getIncomeBounds();
            function getRelativeValue(min, max, value) {
                var difference = max - min;
                if (difference < 1)
                    difference = 1;
                var threshhold = difference / 10;
                if (threshhold < 1)
                    threshhold = 1;
                var relative = (Math.round(value / threshhold) * threshhold - min) / (difference);
                return relative;
            }
            var colorIndexes = {};
            function getRelativeColor(min, max, value) {
                if (!colorIndexes[value]) {
                    if (value < 0)
                        value = 0;
                    else if (value > 1)
                        value = 1;
                    var deviation = Math.abs(0.5 - value) * 2;
                    var hue = 110 * value;
                    var saturation = 0.5 + 0.2 * deviation;
                    var lightness = 0.6 + 0.25 * deviation;
                    colorIndexes[value] = Color_8.default.fromHSL(hue / 360, saturation, lightness / 2).getHex();
                }
                return colorIndexes[value];
            }
            for (var i = 0; i < points.length; i++) {
                var star = points[i];
                var income = star.getIncome();
                var relativeIncome = getRelativeValue(incomeBounds.min, incomeBounds.max, income);
                var color = getRelativeColor(incomeBounds.min, incomeBounds.max, relativeIncome);
                var poly = new PIXI.Polygon(star.voronoiCell.vertices);
                var gfx = new PIXI.Graphics();
                gfx.beginFill(color, 0.6);
                gfx.drawShape(poly);
                gfx.endFill();
                doc.addChild(gfx);
            }
            return doc;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = starIncome;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/allMapLayerTemplates", ["require", "exports", "modules/defaultmapmodes/maplayertemplates/debugSectors", "modules/defaultmapmodes/maplayertemplates/nonFillerStars", "modules/defaultmapmodes/maplayertemplates/playerInfluence", "modules/defaultmapmodes/maplayertemplates/starLinks", "modules/defaultmapmodes/maplayertemplates/fleets", "modules/defaultmapmodes/maplayertemplates/nonFillerVoronoiLines", "modules/defaultmapmodes/maplayertemplates/resources", "modules/defaultmapmodes/maplayertemplates/starOwners", "modules/defaultmapmodes/maplayertemplates/fogOfWar", "modules/defaultmapmodes/maplayertemplates/ownerBorders", "modules/defaultmapmodes/maplayertemplates/starIncome"], function (require, exports, debugSectors_1, nonFillerStars_1, playerInfluence_1, starLinks_1, fleets_1, nonFillerVoronoiLines_1, resources_1, starOwners_1, fogOfWar_1, ownerBorders_1, starIncome_1) {
    "use strict";
    exports.debugSectors = debugSectors_1.default;
    exports.nonFillerStars = nonFillerStars_1.default;
    exports.playerInfluence = playerInfluence_1.default;
    exports.starLinks = starLinks_1.default;
    exports.fleets = fleets_1.default;
    exports.nonFillerVoronoiLines = nonFillerVoronoiLines_1.default;
    exports.resources = resources_1.default;
    exports.starOwners = starOwners_1.default;
    exports.fogOfWar = fogOfWar_1.default;
    exports.ownerBorders = ownerBorders_1.default;
    exports.starIncome = starIncome_1.default;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
});
define("modules/defaultmapmodes/MapLayerTemplates", ["require", "exports", "modules/defaultmapmodes/allMapLayerTemplates"], function (require, exports, MapLayers) {
    "use strict";
    var MapLayerTemplates = (_l = {},
        _l[MapLayers.debugSectors.key] = MapLayers.debugSectors,
        _l[MapLayers.nonFillerStars.key] = MapLayers.nonFillerStars,
        _l[MapLayers.playerInfluence.key] = MapLayers.playerInfluence,
        _l[MapLayers.starLinks.key] = MapLayers.starLinks,
        _l[MapLayers.fleets.key] = MapLayers.fleets,
        _l[MapLayers.nonFillerVoronoiLines.key] = MapLayers.nonFillerVoronoiLines,
        _l[MapLayers.resources.key] = MapLayers.resources,
        _l[MapLayers.starOwners.key] = MapLayers.starOwners,
        _l[MapLayers.fogOfWar.key] = MapLayers.fogOfWar,
        _l[MapLayers.ownerBorders.key] = MapLayers.ownerBorders,
        _l[MapLayers.starIncome.key] = MapLayers.starIncome,
        _l
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapLayerTemplates;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
});
define("modules/defaultmapmodes/mapmodetemplates/mapModes", ["require", "exports", "modules/defaultmapmodes/allMapLayerTemplates"], function (require, exports, MapLayers) {
    "use strict";
    exports.defaultMapMode = {
        key: "defaultMapMode",
        displayName: "Default",
        layers: [
            MapLayers.nonFillerVoronoiLines,
            MapLayers.starOwners,
            MapLayers.ownerBorders,
            MapLayers.starLinks,
            MapLayers.nonFillerStars,
            MapLayers.fogOfWar,
            MapLayers.fleets
        ]
    };
    exports.noStatic = {
        key: "noStatic",
        displayName: "No Static Layers",
        layers: [
            MapLayers.starOwners,
            MapLayers.ownerBorders,
            MapLayers.nonFillerStars,
            MapLayers.fogOfWar,
            MapLayers.fleets
        ]
    };
    exports.income = {
        key: "income",
        displayName: "Income",
        layers: [
            MapLayers.starIncome,
            MapLayers.nonFillerVoronoiLines,
            MapLayers.starLinks,
            MapLayers.nonFillerStars,
            MapLayers.fleets
        ]
    };
    exports.influence = {
        key: "influence",
        displayName: "Player Influence",
        layers: [
            MapLayers.playerInfluence,
            MapLayers.nonFillerVoronoiLines,
            MapLayers.starLinks,
            MapLayers.nonFillerStars,
            MapLayers.fleets
        ]
    };
    exports.resources = {
        key: "resources",
        displayName: "Resources",
        layers: [
            MapLayers.debugSectors,
            MapLayers.nonFillerVoronoiLines,
            MapLayers.starLinks,
            MapLayers.nonFillerStars,
            MapLayers.fogOfWar,
            MapLayers.fleets,
            MapLayers.resources
        ]
    };
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
});
define("modules/defaultmapmodes/MapModeTemplates", ["require", "exports", "modules/defaultmapmodes/mapmodetemplates/mapModes"], function (require, exports, MapModes) {
    "use strict";
    var MapModeTemplates = (_m = {},
        _m[MapModes.defaultMapMode.key] = MapModes.defaultMapMode,
        _m[MapModes.noStatic.key] = MapModes.noStatic,
        _m[MapModes.income.key] = MapModes.income,
        _m[MapModes.influence.key] = MapModes.influence,
        _m[MapModes.resources.key] = MapModes.resources,
        _m
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = MapModeTemplates;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
});
define("modules/defaultmapmodes/defaultMapmodes", ["require", "exports", "modules/defaultmapmodes/MapLayerTemplates", "modules/defaultmapmodes/MapModeTemplates"], function (require, exports, MapLayerTemplates_1, MapModeTemplates_1) {
    "use strict";
    var defaultMapModes = {
        key: "defaultMapModes",
        metaData: {
            name: "Default map modes",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        loadAssets: function (onLoaded) {
            var loader = new PIXI.loaders.Loader();
            loader.add("modules/defaultmapmodes/img/fowTexture.png");
            loader.load(function (loader) {
                onLoaded();
            });
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(MapLayerTemplates_1.default, "MapRendererLayers");
            moduleData.copyTemplates(MapModeTemplates_1.default, "MapRendererMapModes");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultMapModes;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
});
define("modules/paintingportraits/paintingPortraitsCulture", ["require", "exports"], function (require, exports) {
    "use strict";
    var paintingPortraitsCulture = {
        key: "paintingPortraitsCulture",
        portraits: {
            adelaide_hanscom1: {
                key: "adelaide_hanscom1",
                imageSrc: "modules/paintingportraits/img/adelaide_hanscom1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            alessandro_allori1: {
                key: "alessandro_allori1",
                imageSrc: "modules/paintingportraits/img/alessandro_allori1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            alessandro_allori2: {
                key: "alessandro_allori2",
                imageSrc: "modules/paintingportraits/img/alessandro_allori2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            alexandre_cabanel1: {
                key: "alexandre_cabanel1",
                imageSrc: "modules/paintingportraits/img/alexandre_cabanel1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            alexei_harlamov1: {
                key: "alexei_harlamov1",
                imageSrc: "modules/paintingportraits/img/alexei_harlamov1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            alexey_petrovich_antropov1: {
                key: "alexey_petrovich_antropov1",
                imageSrc: "modules/paintingportraits/img/alexey_petrovich_antropov1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            alice_pike_barney1: {
                key: "alice_pike_barney1",
                imageSrc: "modules/paintingportraits/img/alice_pike_barney1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            aman_theodor1: {
                key: "aman_theodor1",
                imageSrc: "modules/paintingportraits/img/aman_theodor1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            antonello_messina1: {
                key: "antonello_messina1",
                imageSrc: "modules/paintingportraits/img/antonello_messina1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            antonio_herrera_toro1: {
                key: "antonio_herrera_toro1",
                imageSrc: "modules/paintingportraits/img/antonio_herrera_toro1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            benjaminconstant1: {
                key: "benjaminconstant1",
                imageSrc: "modules/paintingportraits/img/benjamin-constant1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            benoist_marieguillemine1: {
                key: "benoist_marieguillemine1",
                imageSrc: "modules/paintingportraits/img/benoist_marie-guillemine1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            bouguereau_williamadolphe1: {
                key: "bouguereau_williamadolphe1",
                imageSrc: "modules/paintingportraits/img/bouguereau_william-adolphe1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            byron1: {
                key: "byron1",
                imageSrc: "modules/paintingportraits/img/byron1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            carl_fredric_breda1: {
                key: "carl_fredric_breda1",
                imageSrc: "modules/paintingportraits/img/carl_fredric_breda1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            carl_fredric_breda2: {
                key: "carl_fredric_breda2",
                imageSrc: "modules/paintingportraits/img/carl_fredric_breda2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            cramacj_lucas1: {
                key: "cramacj_lucas1",
                imageSrc: "modules/paintingportraits/img/cramacj_lucas1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            cranach_lucas2: {
                key: "cranach_lucas2",
                imageSrc: "modules/paintingportraits/img/cranach_lucas2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            cristobal_rojas1: {
                key: "cristobal_rojas1",
                imageSrc: "modules/paintingportraits/img/cristobal_rojas1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            delacroix_eugene_ferdinand_victor1: {
                key: "delacroix_eugene_ferdinand_victor1",
                imageSrc: "modules/paintingportraits/img/delacroix_eugene_ferdinand_victor1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            domenikos_theotokopoulos1: {
                key: "domenikos_theotokopoulos1",
                imageSrc: "modules/paintingportraits/img/domenikos_theotokopoulos1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            edmund_blair_leighton1: {
                key: "edmund_blair_leighton1",
                imageSrc: "modules/paintingportraits/img/edmund_blair_leighton1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            edmund_blair_leighton2: {
                key: "edmund_blair_leighton2",
                imageSrc: "modules/paintingportraits/img/edmund_blair_leighton2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            edwin_longsden_long1: {
                key: "edwin_longsden_long1",
                imageSrc: "modules/paintingportraits/img/edwin_longsden_long1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            falero_luis_ricardo1: {
                key: "falero_luis_ricardo1",
                imageSrc: "modules/paintingportraits/img/falero_luis_ricardo1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            felix_bonfils1: {
                key: "felix_bonfils1",
                imageSrc: "modules/paintingportraits/img/felix_bonfils1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            francesco_hayez1: {
                key: "francesco_hayez1",
                imageSrc: "modules/paintingportraits/img/francesco_hayez1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            francisco_goya_lucientes1: {
                key: "francisco_goya_lucientes1",
                imageSrc: "modules/paintingportraits/img/francisco_goya_lucientes1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            francisco_goya_lucientes2: {
                key: "francisco_goya_lucientes2",
                imageSrc: "modules/paintingportraits/img/francisco_goya_lucientes2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            francisco_zurbaran1: {
                key: "francisco_zurbaran1",
                imageSrc: "modules/paintingportraits/img/francisco_zurbaran1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            franz_von_defregger1: {
                key: "franz_von_defregger1",
                imageSrc: "modules/paintingportraits/img/franz_von_defregger1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            franz_von_defregger2: {
                key: "franz_von_defregger2",
                imageSrc: "modules/paintingportraits/img/franz_von_defregger2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            franz_von_defregger3: {
                key: "franz_von_defregger3",
                imageSrc: "modules/paintingportraits/img/franz_von_defregger3.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            frederick_leighton1: {
                key: "frederick_leighton1",
                imageSrc: "modules/paintingportraits/img/frederick_leighton1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            frederic_westin1: {
                key: "frederic_westin1",
                imageSrc: "modules/paintingportraits/img/frederic_westin1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            frederic_yates1: {
                key: "frederic_yates1",
                imageSrc: "modules/paintingportraits/img/frederic_yates1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            gaston_bussiere1: {
                key: "gaston_bussiere1",
                imageSrc: "modules/paintingportraits/img/gaston_bussiere1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            george_henry_hall1: {
                key: "george_henry_hall1",
                imageSrc: "modules/paintingportraits/img/george_henry_hall1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            giovanni_battista_tiepolo1: {
                key: "giovanni_battista_tiepolo1",
                imageSrc: "modules/paintingportraits/img/giovanni_battista_tiepolo1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            giovanni_bellini1: {
                key: "giovanni_bellini1",
                imageSrc: "modules/paintingportraits/img/giovanni_bellini1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            hans_holbein1: {
                key: "hans_holbein1",
                imageSrc: "modules/paintingportraits/img/hans_holbein1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            hayez_francesco1: {
                key: "hayez_francesco1",
                imageSrc: "modules/paintingportraits/img/hayez_francesco1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            henryk_siemiradzki1: {
                key: "henryk_siemiradzki1",
                imageSrc: "modules/paintingportraits/img/henryk_siemiradzki1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            ilja_jefimowitsch_repin1: {
                key: "ilja_jefimowitsch_repin1",
                imageSrc: "modules/paintingportraits/img/ilja_jefimowitsch_repin1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            james_carrol_beckwith1: {
                key: "james_carrol_beckwith1",
                imageSrc: "modules/paintingportraits/img/james_carrol_beckwith1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            jeanbaptistecamille_corot1: {
                key: "jeanbaptistecamille_corot1",
                imageSrc: "modules/paintingportraits/img/jean-baptiste-camille_corot1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            jeanbaptistecamille_corot2: {
                key: "jeanbaptistecamille_corot2",
                imageSrc: "modules/paintingportraits/img/jean-baptiste-camille_corot2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            jeanleon_gerome1: {
                key: "jeanleon_gerome1",
                imageSrc: "modules/paintingportraits/img/jean-leon_gerome1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            jeanleon_gerome2: {
                key: "jeanleon_gerome2",
                imageSrc: "modules/paintingportraits/img/jean-leon_gerome2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            jeanleon_gerome3: {
                key: "jeanleon_gerome3",
                imageSrc: "modules/paintingportraits/img/jean-leon_gerome3.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            jeanleon_gerome4: {
                key: "jeanleon_gerome4",
                imageSrc: "modules/paintingportraits/img/jean-leon_gerome4.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            john_william_godward1: {
                key: "john_william_godward1",
                imageSrc: "modules/paintingportraits/img/john_william_godward1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            john_william_godward2: {
                key: "john_william_godward2",
                imageSrc: "modules/paintingportraits/img/john_william_godward2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            john_william_godward3: {
                key: "john_william_godward3",
                imageSrc: "modules/paintingportraits/img/john_william_godward3.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            julije_klovic1: {
                key: "julije_klovic1",
                imageSrc: "modules/paintingportraits/img/julije_klovic1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            juriaen_streek1: {
                key: "juriaen_streek1",
                imageSrc: "modules/paintingportraits/img/juriaen_streek1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            kiprenskij_orest_adamovic1: {
                key: "kiprenskij_orest_adamovic1",
                imageSrc: "modules/paintingportraits/img/kiprenskij_orest_adamovic1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            konstantin_makovsky1: {
                key: "konstantin_makovsky1",
                imageSrc: "modules/paintingportraits/img/konstantin_makovsky1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            lefebvre_jules_joseph1: {
                key: "lefebvre_jules_joseph1",
                imageSrc: "modules/paintingportraits/img/lefebvre_jules_joseph1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            leonfrancois_comerre1: {
                key: "leonfrancois_comerre1",
                imageSrc: "modules/paintingportraits/img/leon-francois_comerre1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            leopold_loffler1: {
                key: "leopold_loffler1",
                imageSrc: "modules/paintingportraits/img/leopold_loffler1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            lewis_john_frederick1: {
                key: "lewis_john_frederick1",
                imageSrc: "modules/paintingportraits/img/lewis_john_frederick1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            madrazo_garreta_raimundo1: {
                key: "madrazo_garreta_raimundo1",
                imageSrc: "modules/paintingportraits/img/madrazo_garreta_raimundo1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            marie_bashkirtseff1: {
                key: "marie_bashkirtseff1",
                imageSrc: "modules/paintingportraits/img/marie_bashkirtseff1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            moritz_kellerhoven1: {
                key: "moritz_kellerhoven1",
                imageSrc: "modules/paintingportraits/img/moritz_kellerhoven1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            nathaniel_jocelyn1: {
                key: "nathaniel_jocelyn1",
                imageSrc: "modules/paintingportraits/img/nathaniel_jocelyn1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            nikolai_alexandrowitsch_jaroschenko1: {
                key: "nikolai_alexandrowitsch_jaroschenko1",
                imageSrc: "modules/paintingportraits/img/nikolai_alexandrowitsch_jaroschenko1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            nils_johan_olsson_blommer1: {
                key: "nils_johan_olsson_blommer1",
                imageSrc: "modules/paintingportraits/img/nils_johan_olsson_blommer1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            paolo_veronese1: {
                key: "paolo_veronese1",
                imageSrc: "modules/paintingportraits/img/paolo_veronese1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            parmigianino1: {
                key: "parmigianino1",
                imageSrc: "modules/paintingportraits/img/parmigianino1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            paul_cesar_helleu1: {
                key: "paul_cesar_helleu1",
                imageSrc: "modules/paintingportraits/img/paul_cesar_helleu1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            regnault_henri1: {
                key: "regnault_henri1",
                imageSrc: "modules/paintingportraits/img/regnault_henri1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            richard_bergh1: {
                key: "richard_bergh1",
                imageSrc: "modules/paintingportraits/img/richard_bergh1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            richard_bergh2: {
                key: "richard_bergh2",
                imageSrc: "modules/paintingportraits/img/richard_bergh2.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            robert_dampier1: {
                key: "robert_dampier1",
                imageSrc: "modules/paintingportraits/img/robert_dampier1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            robert_lefevre1: {
                key: "robert_lefevre1",
                imageSrc: "modules/paintingportraits/img/robert_lefevre1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            robert_leopold1: {
                key: "robert_leopold1",
                imageSrc: "modules/paintingportraits/img/robert_leopold1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            sichel_nathanael1: {
                key: "sichel_nathanael1",
                imageSrc: "modules/paintingportraits/img/sichel_nathanael1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            svetoslav_roerich1: {
                key: "svetoslav_roerich1",
                imageSrc: "modules/paintingportraits/img/svetoslav_roerich1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            velazquez_diego1: {
                key: "velazquez_diego1",
                imageSrc: "modules/paintingportraits/img/velazquez_diego1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            viktor_vasnetsov1: {
                key: "viktor_vasnetsov1",
                imageSrc: "modules/paintingportraits/img/viktor_vasnetsov1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            },
            williamadolphe_bouguereau1: {
                key: "williamadolphe_bouguereau1",
                imageSrc: "modules/paintingportraits/img/william-adolphe_bouguereau1.png",
                generatedFor: [
                    0,
                    1,
                    2
                ]
            }
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = paintingPortraitsCulture;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
});
define("modules/paintingportraits/paintingPortraits", ["require", "exports", "modules/paintingportraits/paintingPortraitsCulture"], function (require, exports, paintingPortraitsCulture_1) {
    "use strict";
    var paintingPortraits = {
        key: "paintingPortraits",
        metaData: {
            name: "Painting portraits",
            version: "0.1.0",
            author: "various artists",
            description: "old ppl"
        },
        loadAssets: function (onLoaded) {
            onLoaded();
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates({ paintingPortraits: paintingPortraitsCulture_1.default }, "Cultures");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = paintingPortraits;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
});
define("modules/defaultbuildings/BuildingTemplates", ["require", "exports"], function (require, exports) {
    "use strict";
    var sectorCommand = {
        type: "sectorCommand",
        category: "defence",
        family: "sectorCommand",
        displayName: "Sector Command",
        description: "Defence building with slight defender advantage. (All defence buildings must " +
            "be captured to gain control of area)",
        iconSrc: "sectorCommand.png",
        buildCost: 200,
        maxPerType: 1,
        maxUpgradeLevel: 1,
        upgradeInto: [
            {
                templateType: "sectorCommand1",
                level: 1
            },
            {
                templateType: "sectorCommand2",
                level: 1
            }
        ],
        defenderAdvantage: 0.2
    };
    var sectorCommand1 = {
        type: "sectorCommand1",
        category: "defence",
        family: "sectorCommand",
        displayName: "Sector Command1",
        description: "just testing upgrade paths",
        iconSrc: "sectorCommand.png",
        buildCost: 100,
        maxPerType: 1,
        maxUpgradeLevel: 1,
        upgradeOnly: true,
        defenderAdvantage: 0.3
    };
    var sectorCommand2 = {
        type: "sectorCommand2",
        category: "defence",
        family: "sectorCommand",
        displayName: "Sector Command2",
        description: "just testing upgrade paths",
        iconSrc: "sectorCommand.png",
        buildCost: 200,
        maxPerType: 1,
        maxUpgradeLevel: 1,
        upgradeOnly: true,
        defenderAdvantage: 0.3
    };
    var starBase = {
        type: "starBase",
        category: "defence",
        displayName: "Starbase",
        description: "Defence building with no defender advantage. (All defence buildings must " +
            "be captured to gain control of area)",
        iconSrc: "starBase.png",
        buildCost: 200,
        maxPerType: 3,
        maxUpgradeLevel: 1,
        defenderAdvantage: 0.1,
        upgradeInto: [
            {
                templateType: "sectorCommand",
                level: 1
            }
        ]
    };
    var commercialPort = {
        type: "commercialPort",
        category: "economy",
        displayName: "Commercial Spaceport",
        description: "Increase star income by 20",
        iconSrc: "commercialPort.png",
        buildCost: 200,
        maxPerType: 1,
        effect: {
            income: {
                flat: 20
            }
        },
        maxUpgradeLevel: 4
    };
    var deepSpaceRadar = {
        type: "deepSpaceRadar",
        category: "vision",
        displayName: "Deep Space Radar",
        description: "Increase star vision and detection radius",
        iconSrc: "commercialPort.png",
        buildCost: 200,
        maxPerType: 1,
        effect: {
            vision: 1,
            detection: 0.999
        },
        maxUpgradeLevel: 2
    };
    var resourceMine = {
        type: "resourceMine",
        category: "mine",
        displayName: "Mine",
        description: "Gathers resources from current star",
        iconSrc: "commercialPort.png",
        buildCost: 500,
        maxPerType: 1,
        effect: {
            resourceIncome: {
                flat: 1
            }
        },
        maxUpgradeLevel: 3
    };
    var reserachLab = {
        type: "reserachLab",
        category: "research",
        displayName: "Research Lab",
        description: "Increase research speed",
        iconSrc: "commercialPort.png",
        buildCost: 300,
        maxPerType: 1,
        effect: {
            research: {
                flat: 10
            }
        },
        maxUpgradeLevel: 3
    };
    var BuildingTemplates = (_o = {},
        _o[sectorCommand.type] = sectorCommand,
        _o[sectorCommand1.type] = sectorCommand1,
        _o[sectorCommand2.type] = sectorCommand2,
        _o[starBase.type] = starBase,
        _o[commercialPort.type] = commercialPort,
        _o[deepSpaceRadar.type] = deepSpaceRadar,
        _o[resourceMine.type] = resourceMine,
        _o[reserachLab.type] = reserachLab,
        _o
    );
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = BuildingTemplates;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
});
define("modules/defaultbuildings/defaultBuildings", ["require", "exports", "modules/defaultbuildings/BuildingTemplates", "src/cacheSpriteSheetAsImages"], function (require, exports, BuildingTemplates_1, cacheSpriteSheetAsImages_2) {
    "use strict";
    var defaultBuildings = {
        key: "defaultBuildings",
        metaData: {
            name: "Default Buildings",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        loadAssets: function (onLoaded) {
            var loader = new PIXI.loaders.Loader();
            var spriteSheetKey = "buildings";
            loader.add(spriteSheetKey, "modules/defaultbuildings/img/buildings.json");
            loader.load(function (loader) {
                var json = loader.resources[spriteSheetKey].data;
                var image = loader.resources[spriteSheetKey + "_image"].data;
                cacheSpriteSheetAsImages_2.default(json, image);
                onLoaded();
            });
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(BuildingTemplates_1.default, "Buildings");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultBuildings;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
});
define("modules/defaultnotifications/defaultNotifications", ["require", "exports", "modules/defaultnotifications/NotificationTemplates"], function (require, exports, NotificationTemplates_1) {
    "use strict";
    var defaultNotifications = {
        key: "defaultNotifications",
        metaData: {
            name: "Default Notifications",
            version: "0.1.0",
            author: "giraluna",
            description: ""
        },
        constructModule: function (moduleData) {
            moduleData.copyTemplates(NotificationTemplates_1.default, "Notifications");
            return moduleData;
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = defaultNotifications;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
});
define("src/App", ["require", "exports", "src/Game", "src/GameLoader", "src/idGenerators", "src/MapRenderer", "src/ModuleLoader", "src/NotificationLog", "src/Player", "src/PlayerControl", "src/ReactUI", "src/Renderer", "src/setDynamicTemplateProperties", "src/options", "src/tutorials/TutorialStatus", "src/utility", "modules/common/copyCommonTemplates", "modules/defaultemblems/defaultEmblems", "modules/defaultruleset/defaultRuleset", "modules/defaultai/defaultAI", "modules/defaultitems/defaultItems", "modules/defaulttechnologies/defaultTechnologies", "modules/defaultattitudemodifiers/defaultAttitudemodifiers", "modules/defaultmapgen/defaultMapgen", "modules/defaultunits/defaultUnits", "modules/defaultbackgrounds/defaultBackgrounds", "modules/defaultmapmodes/defaultMapmodes", "modules/paintingportraits/paintingPortraits", "modules/defaultbuildings/defaultBuildings", "modules/defaultnotifications/defaultNotifications"], function (require, exports, Game_2, GameLoader_1, idGenerators_9, MapRenderer_1, ModuleLoader_1, NotificationLog_3, Player_5, PlayerControl_1, ReactUI_1, Renderer_1, setDynamicTemplateProperties_1, options_10, TutorialStatus_5, utility_54, copyCommonTemplates_1, defaultEmblems_1, defaultRuleset_1, defaultAI_1, defaultItems_1, defaultTechnologies_1, defaultAttitudemodifiers_1, defaultMapgen_1, defaultUnits_1, defaultBackgrounds_1, defaultMapmodes_1, paintingPortraits_1, defaultBuildings_1, defaultNotifications_1) {
    "use strict";
    var App = (function () {
        function App() {
            this.images = {};
            var self = this;
            PIXI.utils._saidHello = true;
            this.seed = "" + Math.random();
            Math.random = RNG.prototype.uniform.bind(new RNG(this.seed));
            var boundMakeApp = this.makeApp.bind(this);
            utility_54.onDOMLoaded(function () {
                var moduleLoader = self.moduleLoader = new ModuleLoader_1.default();
                self.moduleData = moduleLoader.moduleData;
                moduleLoader.addModuleFile(defaultEmblems_1.default);
                moduleLoader.addModuleFile(defaultRuleset_1.default);
                moduleLoader.addModuleFile(defaultAI_1.default);
                moduleLoader.addModuleFile(defaultItems_1.default);
                moduleLoader.addModuleFile(defaultTechnologies_1.default);
                moduleLoader.addModuleFile(defaultAttitudemodifiers_1.default);
                moduleLoader.addModuleFile(defaultMapgen_1.default);
                moduleLoader.addModuleFile(defaultUnits_1.default);
                moduleLoader.addModuleFile(defaultBackgrounds_1.default);
                moduleLoader.addModuleFile(defaultMapmodes_1.default);
                moduleLoader.addModuleFile(paintingPortraits_1.default);
                moduleLoader.addModuleFile(defaultBuildings_1.default);
                moduleLoader.addModuleFile(defaultNotifications_1.default);
                copyCommonTemplates_1.default(moduleLoader.moduleData);
                moduleLoader.loadAll(boundMakeApp);
            });
        }
        App.prototype.makeApp = function () {
            var startTime = Date.now();
            options_10.default.load();
            TutorialStatus_5.default.load();
            setDynamicTemplateProperties_1.default();
            this.initUI();
            this.setInitialScene();
            if (this.reactUI.currentScene === "galaxyMap") {
                this.game = this.makeGame();
                this.initGame();
                this.initDisplay();
                this.hookUI();
            }
            this.reactUI.render();
            console.log("Init in " + (Date.now() - startTime) + " ms");
        };
        App.prototype.destroy = function () {
            if (this.game) {
                this.game.destroy();
                this.game = null;
            }
            if (this.mapRenderer) {
                this.mapRenderer.destroy();
                this.mapRenderer = null;
            }
            if (this.renderer) {
                this.renderer.destroy();
                this.renderer = null;
            }
            if (this.playerControl) {
                this.playerControl.destroy();
                this.playerControl = null;
            }
            if (this.reactUI) {
                this.reactUI.destroy();
                this.reactUI = null;
            }
        };
        App.prototype.load = function (saveKey) {
            var data = localStorage.getItem(saveKey);
            if (!data)
                return;
            var parsed = JSON.parse(data);
            idGenerators_9.default.setValues(parsed.idGenerators);
            this.destroy();
            this.initUI();
            this.game = new GameLoader_1.default().deserializeGame(parsed.gameData);
            this.game.gameStorageKey = saveKey;
            this.initGame();
            this.initDisplay();
            this.hookUI();
            if (parsed.cameraLocation) {
                this.renderer.toCenterOn = parsed.cameraLocation;
            }
            this.reactUI.switchScene("galaxyMap");
        };
        App.prototype.makeGameFromSetup = function (map, players) {
            this.destroy();
            this.initUI();
            this.game = new Game_2.default(map, players, players[0]);
            this.initGame();
            this.initDisplay();
            this.hookUI();
            this.reactUI.switchScene("galaxyMap");
        };
        App.prototype.makeGame = function () {
            var playerData = this.makePlayers();
            var players = playerData.players;
            var map = this.makeMap(playerData);
            var game = new Game_2.default(map, players, players[0]);
            return game;
        };
        App.prototype.makePlayers = function () {
            var players = [];
            for (var i = 0; i < 5; i++) {
                var player = new Player_5.default(i >= 1);
                player.makeRandomFlag();
                player.initTechnologies();
                players.push(player);
            }
            return ({
                players: players
            });
        };
        App.prototype.makeMap = function (playerData) {
            var optionValues = {
                defaultOptions: {
                    height: 1200,
                    width: 1200,
                    starCount: 30
                },
                basicOptions: {
                    arms: 5,
                    centerDensity: 40,
                    starSizeRegularity: 100
                }
            };
            var mapGenResult = this.moduleData.getDefaultMap().mapGenFunction(optionValues, playerData.players);
            var galaxyMap = mapGenResult.makeMap();
            return galaxyMap;
        };
        App.prototype.initGame = function () {
            if (!this.game)
                throw new Error("App tried to init game without " +
                    "having one specified");
            this.humanPlayer = this.game.humanPlayer;
            this.humanPlayer.isAI = false;
            if (this.playerControl)
                this.playerControl.removeEventListeners();
            this.playerControl = new PlayerControl_1.default(this.humanPlayer);
            for (var i = 0; i < this.game.playerOrder.length; i++) {
                var player = this.game.playerOrder[i];
                if (player.isAI) {
                    player.setupAI(this.game);
                }
            }
            if (!this.game.notificationLog) {
                this.game.notificationLog = new NotificationLog_3.default(this.humanPlayer);
                this.game.notificationLog.setTurn(this.game.turnNumber, true);
            }
        };
        App.prototype.initDisplay = function () {
            this.renderer = new Renderer_1.default(this.game.galaxyMap);
            this.renderer.init();
            this.mapRenderer = new MapRenderer_1.default(this.game.galaxyMap, this.humanPlayer);
            this.mapRenderer.setParent(this.renderer.layers["map"]);
            this.mapRenderer.init();
        };
        App.prototype.initUI = function () {
            this.reactUI = new ReactUI_1.default(document.getElementById("react-container"));
        };
        App.prototype.hookUI = function () {
            this.reactUI.game = this.game;
            this.reactUI.player = this.humanPlayer;
            this.reactUI.playerControl = this.playerControl;
            this.reactUI.renderer = this.renderer;
            this.reactUI.mapRenderer = this.mapRenderer;
        };
        App.prototype.setInitialScene = function () {
            var uriParser = document.createElement("a");
            uriParser.href = document.URL;
            var hash = uriParser.hash;
            if (hash) {
                this.reactUI.currentScene = hash.slice(1);
            }
            else {
                this.reactUI.currentScene = "setupGame";
            }
        };
        return App;
    }());
    var app = new App();
    console.log("create app");
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = app;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
});
//# sourceMappingURL=main.js.map

import app from "./App"; // TODO refactor | autogenerated
import UnitFamily from "./templateinterfaces/UnitFamily";
import ResourceTemplate from "./templateinterfaces/ResourceTemplate";
import ItemTemplate from "./templateinterfaces/ItemTemplate";

interface DistributablesByDistributionGroup
{
  [groupName: string]:
  {
    unitFamilies: UnitFamily[];
    resources: ResourceTemplate[];
  };
}
interface ItemsByTechLevel
{
  [techLevel: number]: ItemTemplate[];
}

class TemplateIndexes
{
  private builtIndexes:
  {
    distributablesByDistributionGroup: DistributablesByDistributionGroup;
    itemsByTechLevel: ItemsByTechLevel;
  } =
  {
    distributablesByDistributionGroup: null,
    itemsByTechLevel: null,
  }
  
  public get distributablesByDistributionGroup()
  {
    if (!this.builtIndexes.distributablesByDistributionGroup)
    {
      this.builtIndexes.distributablesByDistributionGroup =
        TemplateIndexes.getDistributablesByDistributionGroup();
    }
    return this.builtIndexes.distributablesByDistributionGroup;
  }
  public get itemsByTechLevel()
  {
    if (!this.builtIndexes.itemsByTechLevel)
    {
      this.builtIndexes.itemsByTechLevel = TemplateIndexes.getItemsByTechLevel();
    }
    return this.builtIndexes.itemsByTechLevel;
  }
  
  constructor()
  {
    
  }
  
  public clear(): void
  {
    for (let key in this.builtIndexes)
    {
      this.builtIndexes[key] = null;
    }
  }
  
  private static getDistributablesByDistributionGroup()
  {
    var result:
    {
      [groupName: string]:
      {
        unitFamilies: UnitFamily[];
        resources: ResourceTemplate[];
      };
    } = {};

    function putInGroups(distributables: any, distributableType: string)
    {
      for (var prop in distributables)
      {
        var distributable = distributables[prop];
        for (var i = 0; i < distributable.distributionGroups.length; i++)
        {
          var groupName = distributable.distributionGroups[i];
          if (!result[groupName])
          {
            result[groupName] =
            {
              unitFamilies: [],
              resources: []
            }
          }

          result[groupName][distributableType].push(distributable);
        }
      }
    }

    putInGroups(app.moduleData.Templates.UnitFamilies, "unitFamilies");
    putInGroups(app.moduleData.Templates.Resources, "resources");

    return result;
  }
  private static getItemsByTechLevel()
  {
    var itemsByTechLevel:
    {
      [techLevel: number]: ItemTemplate[];
    } = {};
    for (var itemName in app.moduleData.Templates.Items)
    {
      var item = app.moduleData.Templates.Items[itemName];

      if (!itemsByTechLevel[item.techLevel])
      {
        itemsByTechLevel[item.techLevel] = [];
      }

      itemsByTechLevel[item.techLevel].push(item);
    }

    return itemsByTechLevel;
  }
}

const indexes = new TemplateIndexes();
export default indexes;


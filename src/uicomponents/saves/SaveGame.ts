/// <reference path="../../../lib/react-global.d.ts" />
import ListItem from "../unitlist/ListItem"; // TODO refactor | autogenerated

import app from "../../App"; // TODO refactor | autogenerated

import SaveList from "./SaveList";
import {default as PopupManager, PopupManagerComponent} from "../popups/PopupManager";
import ConfirmPopup from "../popups/ConfirmPopup";


interface PropTypes extends React.Props<any>
{
  handleClose: () => void;
}

interface StateType
{
  saveName?: string;
}

export class SaveGameComponent extends React.Component<PropTypes, StateType>
{
  displayName: string = "SaveGame";

  state: StateType =
  {
    saveName: ""
  };
  ref_TODO_okButton: React.HTMLComponent;
  ref_TODO_popupManager: PopupManagerComponent;
  ref_TODO_saveName: React.HTMLComponent;

  constructor(props: PropTypes)
  {
    super(props);
    
    this.bindMethods();
  }
  private bindMethods()
  {
    this.handleClose = this.handleClose.bind(this);
    this.makeConfirmOverWritePopup = this.makeConfirmOverWritePopup.bind(this);
    this.setSaveName = this.setSaveName.bind(this);
    this.saveGame = this.saveGame.bind(this);
    this.handleSave = this.handleSave.bind(this);
    this.handleRowChange = this.handleRowChange.bind(this);    
  }
  
  componentDidMount()
  {
    if (app.game.gameStorageKey)
    {
      ReactDOM.findDOMNode<HTMLElement>(this.ref_TODO_okButton).focus();
    }
    else
    {
      ReactDOM.findDOMNode<HTMLElement>(this.ref_TODO_saveName).focus();
    }
  }

  setSaveName(newText: string)
  {
    this.setState(
    {
      saveName: newText
    });
  }
  
  handleSaveNameInput(e: React.FormEvent)
  {
    const target = <HTMLInputElement> e.target;
    this.setSaveName(target.value);
  }

  handleRowChange(row: ListItem)
  {
    this.setSaveName(row.data.name)
  }

  handleSave()
  {
    var saveName = this.state.saveName
    var saveKey = "Save." + saveName;
    if (localStorage[saveKey])
    {
      this.makeConfirmOverWritePopup(saveName)
    }
    else
    {
      this.saveGame();
    }
  }
  saveGame()
  {
    app.game.save(this.state.saveName);
    this.handleClose();
  }
  handleClose()
  {
    this.props.handleClose();
  }
  makeConfirmOverWritePopup(saveName: string)
  {
    var confirmProps =
    {
      handleOk: this.saveGame,
      contentText: "Are you sure you want to overwrite " +
        saveName.replace("Save.", "") + "?"
    }

    this.ref_TODO_popupManager.makePopup(
    {
      contentConstructor: ConfirmPopup,
      contentProps: confirmProps
    });
  }

  render()
  {
    return(
      React.DOM.div(
      {
        className: "save-game"
      },
        PopupManager(
        {
          ref: (component: PopupManagerComponent) =>
          {
            this.ref_TODO_popupManager = component;
          },
          onlyAllowOne: true
        }),
        SaveList(
        {
          onRowChange: this.handleRowChange,
          selectedKey: app.game.gameStorageKey,
          autoSelect: false
        }),
        React.DOM.input(
        {
          className: "save-game-name",
          ref: (component: React.HTMLComponent) =>
          {
            this.ref_TODO_saveName = component;
          },
          type: "text",
          value: this.state.saveName,
          onChange: this.handleSaveNameInput,
          maxLength: 64
        }),
        React.DOM.div(
        {
          className: "save-game-buttons-container"
        },
          React.DOM.button(
          {
            className: "save-game-button",
            onClick: this.handleSave,
            ref: (component: React.HTMLComponent) =>
            {
              this.ref_TODO_okButton = component;
            }
          }, "Save"),
          React.DOM.button(
          {
            className: "save-game-button",
            onClick: this.handleClose
          }, "Cancel")
        )
      )
    );
  }
}

const Factory: React.Factory<PropTypes> = React.createFactory(SaveGameComponent);
export default Factory;
